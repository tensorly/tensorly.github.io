Search.setIndex({"docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_IL2", "auto_examples/applications/plot_covid", "auto_examples/applications/plot_image_compression", "auto_examples/applications/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_cp_line_search", "auto_examples/decomposition/plot_guide_for_constrained_cp", "auto_examples/decomposition/plot_nn_cp_hals", "auto_examples/decomposition/plot_nn_tucker", "auto_examples/decomposition/plot_parafac2", "auto_examples/decomposition/plot_permute_factors", "auto_examples/decomposition/sg_execution_times", "auto_examples/index", "auto_examples/plot_tensor", "auto_examples/regression/index", "auto_examples/regression/plot_cp_regression", "auto_examples/regression/plot_tucker_regression", "auto_examples/regression/sg_execution_times", "auto_examples/sg_execution_times", "development_guide/backend_system", "development_guide/contributing", "development_guide/documentation", "development_guide/index", "home", "index", "installation", "modules/api", "modules/generated/parafac2-function", "modules/generated/tensorly.abs", "modules/generated/tensorly.all", "modules/generated/tensorly.arange", "modules/generated/tensorly.argmax", "modules/generated/tensorly.argmin", "modules/generated/tensorly.backend_context", "modules/generated/tensorly.base.fold", "modules/generated/tensorly.base.partial_fold", "modules/generated/tensorly.base.partial_tensor_to_vec", "modules/generated/tensorly.base.partial_unfold", "modules/generated/tensorly.base.partial_vec_to_tensor", "modules/generated/tensorly.base.tensor_to_vec", "modules/generated/tensorly.base.unfold", "modules/generated/tensorly.base.vec_to_tensor", "modules/generated/tensorly.check_random_state", "modules/generated/tensorly.clip", "modules/generated/tensorly.concatenate", "modules/generated/tensorly.conj", "modules/generated/tensorly.context", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.parafac", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.contrib.sparse.decomposition.tucker", "modules/generated/tensorly.copy", "modules/generated/tensorly.cp_tensor.cp_mode_dot", "modules/generated/tensorly.cp_tensor.cp_norm", "modules/generated/tensorly.cp_tensor.cp_normalize", "modules/generated/tensorly.cp_tensor.cp_permute_factors", "modules/generated/tensorly.cp_tensor.cp_to_tensor", "modules/generated/tensorly.cp_tensor.cp_to_unfolded", "modules/generated/tensorly.cp_tensor.cp_to_vec", "modules/generated/tensorly.datasets.synthetic.gen_image", "modules/generated/tensorly.decomposition.CP", "modules/generated/tensorly.decomposition.CPPower", "modules/generated/tensorly.decomposition.CP_NN_HALS", "modules/generated/tensorly.decomposition.ConstrainedCP", "modules/generated/tensorly.decomposition.Parafac2", "modules/generated/tensorly.decomposition.RandomizedCP", "modules/generated/tensorly.decomposition.SymmetricCP", "modules/generated/tensorly.decomposition.TensorRing", "modules/generated/tensorly.decomposition.TensorTrain", "modules/generated/tensorly.decomposition.TensorTrainMatrix", "modules/generated/tensorly.decomposition.Tucker", "modules/generated/tensorly.decomposition.constrained_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac_hals", "modules/generated/tensorly.decomposition.non_negative_tucker", "modules/generated/tensorly.decomposition.non_negative_tucker_hals", "modules/generated/tensorly.decomposition.parafac", "modules/generated/tensorly.decomposition.parafac_power_iteration", "modules/generated/tensorly.decomposition.partial_tucker", "modules/generated/tensorly.decomposition.power_iteration", "modules/generated/tensorly.decomposition.randomised_parafac", "modules/generated/tensorly.decomposition.robust_pca", "modules/generated/tensorly.decomposition.sample_khatri_rao", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.decomposition.symmetric_power_iteration", "modules/generated/tensorly.decomposition.tensor_ring", "modules/generated/tensorly.decomposition.tensor_train", "modules/generated/tensorly.decomposition.tensor_train_matrix", "modules/generated/tensorly.diag", "modules/generated/tensorly.dot", "modules/generated/tensorly.eps", "modules/generated/tensorly.eye", "modules/generated/tensorly.finfo", "modules/generated/tensorly.get_backend", "modules/generated/tensorly.index", "modules/generated/tensorly.index_update", "modules/generated/tensorly.is_tensor", "modules/generated/tensorly.kr", "modules/generated/tensorly.kron", "modules/generated/tensorly.matmul", "modules/generated/tensorly.max", "modules/generated/tensorly.mean", "modules/generated/tensorly.metrics.factors.congruence_coefficient", "modules/generated/tensorly.metrics.regression.MSE", "modules/generated/tensorly.metrics.regression.RMSE", "modules/generated/tensorly.min", "modules/generated/tensorly.moveaxis", "modules/generated/tensorly.ndim", "modules/generated/tensorly.norm", "modules/generated/tensorly.ones", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec", "modules/generated/tensorly.prod", "modules/generated/tensorly.qr", "modules/generated/tensorly.random.random_cp", "modules/generated/tensorly.random.random_parafac2", "modules/generated/tensorly.random.random_tt", "modules/generated/tensorly.random.random_tt_matrix", "modules/generated/tensorly.random.random_tucker", "modules/generated/tensorly.regression.cp_regression.CPRegressor", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor", "modules/generated/tensorly.reshape", "modules/generated/tensorly.set_backend", "modules/generated/tensorly.shape", "modules/generated/tensorly.sign", "modules/generated/tensorly.solve", "modules/generated/tensorly.sort", "modules/generated/tensorly.sqrt", "modules/generated/tensorly.stack", "modules/generated/tensorly.sum", "modules/generated/tensorly.tenalg.backend_context", "modules/generated/tensorly.tenalg.batched_outer", "modules/generated/tensorly.tenalg.get_backend", "modules/generated/tensorly.tenalg.higher_order_moment", "modules/generated/tensorly.tenalg.inner", "modules/generated/tensorly.tenalg.khatri_rao", "modules/generated/tensorly.tenalg.kronecker", "modules/generated/tensorly.tenalg.mode_dot", "modules/generated/tensorly.tenalg.multi_mode_dot", "modules/generated/tensorly.tenalg.outer", "modules/generated/tensorly.tenalg.proximal.procrustes", "modules/generated/tensorly.tenalg.proximal.soft_thresholding", "modules/generated/tensorly.tenalg.proximal.svd_thresholding", "modules/generated/tensorly.tenalg.set_backend", "modules/generated/tensorly.tenalg.tensordot", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao", "modules/generated/tensorly.tensor", "modules/generated/tensorly.tensordot", "modules/generated/tensorly.to_numpy", "modules/generated/tensorly.transpose", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec", "modules/generated/tensorly.tt_tensor.pad_tt_rank", "modules/generated/tensorly.tt_tensor.tt_to_tensor", "modules/generated/tensorly.tt_tensor.tt_to_unfolded", "modules/generated/tensorly.tt_tensor.tt_to_vec", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded", "modules/generated/tensorly.tucker_tensor.tucker_to_vec", "modules/generated/tensorly.where", "modules/generated/tensorly.zeros", "modules/generated/tensorly.zeros_like", "modules/generated/tucker-function", "user_guide/backend", "user_guide/index", "user_guide/quickstart", "user_guide/sparse_backend", "user_guide/tensor_basics", "user_guide/tensor_decomposition", "user_guide/tensor_regression"], "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_IL2.rst", "auto_examples/applications/plot_covid.rst", "auto_examples/applications/plot_image_compression.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_cp_line_search.rst", "auto_examples/decomposition/plot_guide_for_constrained_cp.rst", "auto_examples/decomposition/plot_nn_cp_hals.rst", "auto_examples/decomposition/plot_nn_tucker.rst", "auto_examples/decomposition/plot_parafac2.rst", "auto_examples/decomposition/plot_permute_factors.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_tensor.rst", "auto_examples/regression/index.rst", "auto_examples/regression/plot_cp_regression.rst", "auto_examples/regression/plot_tucker_regression.rst", "auto_examples/regression/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "development_guide/backend_system.rst", "development_guide/contributing.rst", "development_guide/documentation.rst", "development_guide/index.rst", "home.rst", "index.rst", "installation.rst", "modules/api.rst", "modules/generated/parafac2-function.rst", "modules/generated/tensorly.abs.rst", "modules/generated/tensorly.all.rst", "modules/generated/tensorly.arange.rst", "modules/generated/tensorly.argmax.rst", "modules/generated/tensorly.argmin.rst", "modules/generated/tensorly.backend_context.rst", "modules/generated/tensorly.base.fold.rst", "modules/generated/tensorly.base.partial_fold.rst", "modules/generated/tensorly.base.partial_tensor_to_vec.rst", "modules/generated/tensorly.base.partial_unfold.rst", "modules/generated/tensorly.base.partial_vec_to_tensor.rst", "modules/generated/tensorly.base.tensor_to_vec.rst", "modules/generated/tensorly.base.unfold.rst", "modules/generated/tensorly.base.vec_to_tensor.rst", "modules/generated/tensorly.check_random_state.rst", "modules/generated/tensorly.clip.rst", "modules/generated/tensorly.concatenate.rst", "modules/generated/tensorly.conj.rst", "modules/generated/tensorly.context.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca.rst", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.contrib.sparse.decomposition.tucker.rst", "modules/generated/tensorly.copy.rst", "modules/generated/tensorly.cp_tensor.cp_mode_dot.rst", "modules/generated/tensorly.cp_tensor.cp_norm.rst", "modules/generated/tensorly.cp_tensor.cp_normalize.rst", "modules/generated/tensorly.cp_tensor.cp_permute_factors.rst", "modules/generated/tensorly.cp_tensor.cp_to_tensor.rst", "modules/generated/tensorly.cp_tensor.cp_to_unfolded.rst", "modules/generated/tensorly.cp_tensor.cp_to_vec.rst", "modules/generated/tensorly.datasets.synthetic.gen_image.rst", "modules/generated/tensorly.decomposition.CP.rst", "modules/generated/tensorly.decomposition.CPPower.rst", "modules/generated/tensorly.decomposition.CP_NN_HALS.rst", "modules/generated/tensorly.decomposition.ConstrainedCP.rst", "modules/generated/tensorly.decomposition.Parafac2.rst", "modules/generated/tensorly.decomposition.RandomizedCP.rst", "modules/generated/tensorly.decomposition.SymmetricCP.rst", "modules/generated/tensorly.decomposition.TensorRing.rst", "modules/generated/tensorly.decomposition.TensorTrain.rst", "modules/generated/tensorly.decomposition.TensorTrainMatrix.rst", "modules/generated/tensorly.decomposition.Tucker.rst", "modules/generated/tensorly.decomposition.constrained_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac_hals.rst", "modules/generated/tensorly.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.decomposition.non_negative_tucker_hals.rst", "modules/generated/tensorly.decomposition.parafac.rst", "modules/generated/tensorly.decomposition.parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.partial_tucker.rst", "modules/generated/tensorly.decomposition.power_iteration.rst", "modules/generated/tensorly.decomposition.randomised_parafac.rst", "modules/generated/tensorly.decomposition.robust_pca.rst", "modules/generated/tensorly.decomposition.sample_khatri_rao.rst", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.symmetric_power_iteration.rst", "modules/generated/tensorly.decomposition.tensor_ring.rst", "modules/generated/tensorly.decomposition.tensor_train.rst", "modules/generated/tensorly.decomposition.tensor_train_matrix.rst", "modules/generated/tensorly.diag.rst", "modules/generated/tensorly.dot.rst", "modules/generated/tensorly.eps.rst", "modules/generated/tensorly.eye.rst", "modules/generated/tensorly.finfo.rst", "modules/generated/tensorly.get_backend.rst", "modules/generated/tensorly.index.rst", "modules/generated/tensorly.index_update.rst", "modules/generated/tensorly.is_tensor.rst", "modules/generated/tensorly.kr.rst", "modules/generated/tensorly.kron.rst", "modules/generated/tensorly.matmul.rst", "modules/generated/tensorly.max.rst", "modules/generated/tensorly.mean.rst", "modules/generated/tensorly.metrics.factors.congruence_coefficient.rst", "modules/generated/tensorly.metrics.regression.MSE.rst", "modules/generated/tensorly.metrics.regression.RMSE.rst", "modules/generated/tensorly.min.rst", "modules/generated/tensorly.moveaxis.rst", "modules/generated/tensorly.ndim.rst", "modules/generated/tensorly.norm.rst", "modules/generated/tensorly.ones.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec.rst", "modules/generated/tensorly.prod.rst", "modules/generated/tensorly.qr.rst", "modules/generated/tensorly.random.random_cp.rst", "modules/generated/tensorly.random.random_parafac2.rst", "modules/generated/tensorly.random.random_tt.rst", "modules/generated/tensorly.random.random_tt_matrix.rst", "modules/generated/tensorly.random.random_tucker.rst", "modules/generated/tensorly.regression.cp_regression.CPRegressor.rst", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor.rst", "modules/generated/tensorly.reshape.rst", "modules/generated/tensorly.set_backend.rst", "modules/generated/tensorly.shape.rst", "modules/generated/tensorly.sign.rst", "modules/generated/tensorly.solve.rst", "modules/generated/tensorly.sort.rst", "modules/generated/tensorly.sqrt.rst", "modules/generated/tensorly.stack.rst", "modules/generated/tensorly.sum.rst", "modules/generated/tensorly.tenalg.backend_context.rst", "modules/generated/tensorly.tenalg.batched_outer.rst", "modules/generated/tensorly.tenalg.get_backend.rst", "modules/generated/tensorly.tenalg.higher_order_moment.rst", "modules/generated/tensorly.tenalg.inner.rst", "modules/generated/tensorly.tenalg.khatri_rao.rst", "modules/generated/tensorly.tenalg.kronecker.rst", "modules/generated/tensorly.tenalg.mode_dot.rst", "modules/generated/tensorly.tenalg.multi_mode_dot.rst", "modules/generated/tensorly.tenalg.outer.rst", "modules/generated/tensorly.tenalg.proximal.procrustes.rst", "modules/generated/tensorly.tenalg.proximal.soft_thresholding.rst", "modules/generated/tensorly.tenalg.proximal.svd_thresholding.rst", "modules/generated/tensorly.tenalg.set_backend.rst", "modules/generated/tensorly.tenalg.tensordot.rst", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao.rst", "modules/generated/tensorly.tensor.rst", "modules/generated/tensorly.tensordot.rst", "modules/generated/tensorly.to_numpy.rst", "modules/generated/tensorly.transpose.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec.rst", "modules/generated/tensorly.tt_tensor.pad_tt_rank.rst", "modules/generated/tensorly.tt_tensor.tt_to_tensor.rst", "modules/generated/tensorly.tt_tensor.tt_to_unfolded.rst", "modules/generated/tensorly.tt_tensor.tt_to_vec.rst", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_vec.rst", "modules/generated/tensorly.where.rst", "modules/generated/tensorly.zeros.rst", "modules/generated/tensorly.zeros_like.rst", "modules/generated/tucker-function.rst", "user_guide/backend.rst", "user_guide/index.rst", "user_guide/quickstart.rst", "user_guide/sparse_backend.rst", "user_guide/tensor_basics.rst", "user_guide/tensor_decomposition.rst", "user_guide/tensor_regression.rst"], "titles": ["About us", "Practical applications of tensor methods", "Non-negative PARAFAC Decomposition of IL-2 Response Data", "COVID-19 Serology Dataset Analysis with CP", "Image compression via tensor decomposition", "Computation times", "Tensor decomposition", "Using line search with PARAFAC", "Constrained CP decomposition in Tensorly &gt;=0.7", "Non-negative CP decomposition in Tensorly &gt;=0.6", "Non-negative Tucker decomposition in Tensorly &gt;=0.6", "Demonstration of PARAFAC2", "Permuting CP factors", "Computation times", "Gallery of examples", "Basic tensor operations", "Tensor regression with tensorly", "CP tensor regression", "Tucker tensor regression", "Computation times", "Computation times", "Backend System", "Contributing", "Writing documentation", "Development guide", "&lt;no title&gt;", "TensorLy: Tensor Learning in Python", "Installing tensorly", "API reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.abs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.all", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.arange", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmax", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.clip", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.concatenate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.conj", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_cross", "tensorly.contrib.sparse.decomposition.non_negative_parafac", "tensorly.contrib.sparse.decomposition.non_negative_tucker", "tensorly.contrib.sparse.decomposition.parafac", "tensorly.contrib.sparse.decomposition.partial_tucker", "tensorly.contrib.sparse.decomposition.robust_pca", "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "tensorly.contrib.sparse.decomposition.tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.copy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_permute_factors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets.synthetic</span></code>.gen_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CPPower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP_NN_HALS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.ConstrainedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.RandomizedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.SymmetricCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorRing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrainMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.constrained_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.partial_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.randomised_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.robust_pca", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.sample_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_ring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.diag", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eps", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eye", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.finfo", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index_update", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.is_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.matmul", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.max", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.factors</span></code>.congruence_coefficient", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.MSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.RMSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.moveaxis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ndim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ones", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slice", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.prod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.qr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_cp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.cp_regression</span></code>.CPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.tucker_regression</span></code>.TuckerRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.reshape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.shape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sign", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.solve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sort", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sqrt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.stack", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.batched_outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.higher_order_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.inner", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.kronecker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.multi_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.procrustes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.soft_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.svd_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.unfolding_dot_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.to_numpy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.transpose", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.pad_tt_rank", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.where", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros_like", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tucker", "<span class=\"section-number\">2. </span>TensorLy\u2019s backend system", "User guide", "<span class=\"section-number\">1. </span>Quick-Start", "<span class=\"section-number\">6. </span>Sparse Backend", "<span class=\"section-number\">3. </span>Tensor basics", "<span class=\"section-number\">4. </span>Tensor decomposition", "<span class=\"section-number\">5. </span>Tensor regression"], "terms": {"tensorli": [0, 1, 2, 4, 6, 7, 11, 12, 13, 15, 17, 18, 21, 22, 23, 26, 175, 177, 178, 179, 180], "wa": [0, 27, 29, 70, 95, 122, 130, 135, 136, 159, 163, 177], "creat": [0, 17, 18, 22, 23, 28, 29, 30, 47, 57, 70, 74, 88, 93, 94, 116, 117, 118, 119, 120, 123, 125, 126, 127, 133, 135, 136, 172, 174, 175, 176, 177, 179], "2015": 0, "jean": [0, 26], "kossaifi": [0, 26], "make": [0, 2, 9, 11, 22, 26, 27, 28, 49, 130, 135, 174, 177, 179], "tensor": [0, 2, 3, 5, 7, 8, 19, 20, 21, 23, 24, 26, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 101, 102, 108, 113, 114, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 177], "method": [0, 3, 8, 9, 10, 12, 21, 22, 26, 28, 31, 57, 61, 69, 77, 95, 106, 107, 111, 121, 130, 132, 135, 138, 158, 174, 176, 179, 180], "access": [0, 174, 176], "easi": [0, 15, 26, 174], "It": [0, 3, 8, 11, 12, 21, 22, 27, 31, 33, 34, 62, 121, 130, 135, 138, 174, 177], "first": [0, 2, 3, 8, 9, 10, 11, 22, 27, 28, 29, 31, 33, 34, 38, 39, 46, 49, 62, 70, 73, 74, 91, 93, 95, 104, 105, 106, 111, 116, 117, 121, 122, 130, 135, 137, 138, 143, 156, 174, 178, 179, 180], "present": [0, 2, 27, 106, 111, 179], "neurip": 0, "workshop": 0, "learn": [0, 17, 18, 26, 44, 50, 78, 128, 129, 174, 176, 180], "why": [0, 175, 176], "now": [0, 2, 3, 9, 11, 12, 27, 105, 135, 174, 176, 177, 179], "how": [0, 1, 2, 3, 4, 7, 8, 11, 12, 14, 15, 17, 18, 24, 162, 175, 177, 179], "later": [0, 22], "publish": 0, "jmlr": [0, 26], "paper": [0, 26], "titl": [0, 8, 9, 10, 11, 24, 26], "python": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 23, 26, 32, 57, 105, 106, 111, 138, 178], "yanni": [0, 26], "panagaki": [0, 26], "anima": [0, 26], "anandkumar": [0, 26], "maja": [0, 26], "pantic": [0, 26], "built": [0, 23, 32], "top": [0, 11], "numpi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 15, 21, 23, 24, 26, 31, 32, 35, 44, 88, 94, 95, 97, 106, 107, 111, 115, 121, 122, 134, 135, 138, 139, 158, 171, 174, 176, 177, 178, 179], "scipi": [0, 4, 11, 12, 61, 122, 134, 177], "onli": [0, 2, 8, 9, 10, 11, 12, 21, 22, 23, 27, 28, 30, 33, 34, 35, 47, 49, 52, 54, 56, 66, 68, 76, 82, 87, 88, 105, 106, 111, 122, 130, 133, 136, 138, 139, 144, 162, 170, 173, 176, 177], "In": [0, 2, 3, 8, 9, 10, 23, 24, 26, 27, 28, 32, 33, 34, 36, 46, 50, 60, 69, 77, 78, 81, 95, 97, 104, 107, 115, 121, 122, 130, 135, 138, 154, 171, 174, 176, 177, 178, 179], "order": [0, 2, 8, 9, 12, 29, 30, 47, 49, 53, 55, 56, 57, 61, 69, 70, 73, 75, 76, 77, 81, 84, 89, 90, 91, 92, 97, 105, 112, 114, 115, 130, 133, 135, 136, 142, 143, 144, 145, 156, 158, 171, 172, 173, 179], "combin": [0, 22, 28, 174, 176, 179], "deep": [0, 26, 174, 176], "run": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 174, 176], "them": [0, 3, 21, 23, 174, 177], "multipl": [0, 2, 9, 10, 21, 31, 33, 34, 46, 50, 51, 52, 66, 68, 76, 78, 80, 82, 95, 105, 106, 107, 111, 135, 137, 176], "devic": [0, 28, 174], "cpu": [0, 28, 175], "gpu": [0, 26, 28, 175, 176], "flexibl": [0, 8, 26, 69, 77, 95], "backend": [0, 24, 26, 35, 99, 131, 139, 141, 150, 152, 175], "system": [0, 2, 3, 8, 22, 24, 26, 52, 66, 68, 69, 77, 82, 134, 175, 176], "ad": [0, 22, 122, 135, 138], "thi": [0, 2, 8, 9, 10, 11, 12, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 46, 47, 49, 52, 53, 57, 59, 62, 66, 68, 69, 70, 73, 75, 77, 81, 82, 84, 91, 92, 94, 95, 97, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 130, 133, 135, 136, 138, 139, 144, 154, 160, 164, 170, 171, 174, 176, 177, 178, 179, 180], "allow": [0, 2, 3, 21, 28, 29, 32, 49, 52, 66, 68, 71, 73, 75, 82, 86, 91, 92, 97, 105, 106, 111, 115, 171, 174, 176, 180], "algorithm": [0, 8, 9, 10, 11, 22, 28, 29, 49, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 135, 173, 175], "written": [0, 177], "ran": 0, "ani": [0, 8, 22, 26, 28, 29, 31, 32, 70, 106, 107, 111, 121, 135, 136, 138, 144, 147, 167, 168, 169, 174], "major": [0, 97, 115, 171], "framework": [0, 8, 26, 69, 77, 176], "pytorch": [0, 21, 22, 26, 28, 35, 139, 175, 176, 177], "mxnet": [0, 22, 26, 28, 35, 139, 174, 176], "tensorflow": [0, 21, 22, 26, 28, 35, 139, 174, 176, 177], "cupi": [0, 22, 26, 28, 35, 139, 174, 176], "jax": [0, 22, 26, 28, 174, 176], "i": [0, 2, 3, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 150, 152, 154, 156, 158, 159, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180], "formost": 0, "commun": [0, 179], "aim": [0, 3], "With": [0, 26, 31, 33, 34, 106, 107, 111, 121, 138, 177], "robust": [0, 54, 55, 67, 72, 83, 85, 87, 89, 90, 177], "activ": [0, 2, 3, 26, 29, 52, 66, 68, 69, 70, 77, 81, 82], "group": 0, "contributor": 0, "we": [0, 2, 3, 9, 10, 11, 12, 21, 22, 23, 28, 29, 49, 52, 54, 57, 63, 66, 68, 70, 81, 82, 87, 108, 116, 117, 118, 119, 120, 121, 122, 174, 176, 177, 178, 179, 180], "would": [0, 39, 46, 95, 137, 177], "like": [0, 3, 8, 9, 10, 21, 22, 23, 32, 54, 87, 97, 105, 115, 122, 130, 171, 174, 176, 180], "thank": 0, "all": [0, 10, 14, 22, 23, 26, 27, 28, 29, 35, 49, 51, 52, 53, 56, 57, 60, 62, 63, 64, 65, 66, 68, 69, 70, 73, 75, 76, 77, 79, 80, 81, 82, 84, 86, 91, 92, 97, 106, 107, 108, 111, 112, 116, 117, 118, 119, 120, 121, 122, 131, 134, 135, 136, 138, 139, 144, 152, 170, 173, 174, 176, 177], "those": [0, 2], "who": 0, "have": [0, 2, 8, 9, 10, 11, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 46, 47, 52, 57, 65, 66, 68, 69, 70, 77, 82, 95, 105, 107, 117, 121, 130, 133, 135, 136, 137, 138, 147, 167, 168, 169, 174, 176, 177, 179], "contribut": [0, 24, 26], "includ": [0, 2, 3, 8, 10, 12, 22, 23, 28, 31, 32, 37, 40, 107, 121, 138, 176], "alphabet": 0, "jeremi": 0, "cohen": 0, "julia": 0, "gusak": 0, "meraj": 0, "hashemizadeh": 0, "aaron": 0, "meurer": 0, "yngve": 0, "mardal": 0, "moe": 0, "meyer": [0, 3], "taylor": [0, 3], "lee": 0, "patti": 0, "mari": 0, "roald": 0, "caglayan": 0, "tuna": 0, "For": [0, 2, 3, 11, 21, 22, 23, 28, 30, 32, 39, 47, 49, 95, 105, 107, 122, 130, 133, 135, 136, 137, 138, 145, 146, 147, 158, 174, 176, 177, 178, 179, 180], "full": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 37, 40, 62, 88, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 134, 154, 158, 159, 160, 163, 164, 167, 171, 174, 176, 178, 179], "list": [0, 8, 11, 12, 27, 29, 46, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 108, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 135, 137, 144, 145, 147, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 173, 177, 179], "check": [0, 11, 22, 28, 31, 134], "github": [0, 22, 26], "page": [0, 8, 12, 22, 26], "The": [0, 8, 9, 10, 11, 12, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 46, 47, 49, 50, 52, 54, 57, 61, 66, 68, 69, 70, 77, 78, 79, 81, 82, 87, 88, 94, 104, 105, 106, 107, 108, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 124, 130, 132, 133, 134, 135, 136, 137, 138, 139, 143, 154, 156, 158, 162, 170, 171, 172, 174, 176, 177, 178, 179], "project": [0, 11, 22, 23, 29, 69, 70, 77, 116, 117, 118, 119, 120, 154, 177, 179], "ha": [0, 2, 8, 9, 10, 11, 21, 33, 34, 51, 62, 63, 79, 80, 81, 104, 107, 121, 135, 136, 137, 138, 149, 150, 151, 177, 179], "been": [0, 2, 21, 35, 135, 139, 149, 150, 151, 177], "variou": [0, 2, 10, 21, 135, 176], "organ": [0, 104, 175], "univers": [0, 26, 52, 66, 68, 82], "inria": 0, "fund": 0, "time": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 27, 29, 51, 52, 56, 66, 68, 70, 76, 79, 80, 81, 82, 116, 117, 118, 119, 120, 144, 145, 147, 154, 173, 177, 178, 179], "engin": [0, 2], "work": [0, 2, 3, 24, 52, 62, 66, 68, 79, 82, 122, 135, 174, 177], "see": [1, 2, 3, 9, 14, 26, 29, 30, 31, 32, 47, 50, 51, 52, 59, 66, 68, 69, 70, 77, 78, 79, 80, 81, 82, 94, 105, 106, 107, 111, 117, 121, 122, 133, 134, 136, 138, 144, 145, 179], "you": [1, 8, 11, 12, 14, 21, 22, 23, 26, 27, 28, 59, 94, 106, 121, 122, 130, 138, 169, 174, 176, 177, 178, 179, 180], "can": [1, 2, 3, 8, 9, 10, 11, 12, 14, 21, 22, 23, 27, 28, 30, 31, 32, 57, 59, 60, 64, 104, 105, 106, 107, 121, 122, 130, 135, 138, 144, 154, 156, 169, 170, 174, 176, 177, 178, 179, 180], "us": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 32, 35, 44, 46, 50, 51, 52, 53, 56, 57, 59, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 91, 92, 93, 94, 95, 99, 100, 101, 105, 106, 107, 111, 116, 117, 118, 119, 120, 121, 122, 127, 130, 133, 134, 135, 138, 139, 141, 146, 147, 154, 156, 158, 162, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180], "dataset": [1, 2, 5, 11, 14, 17, 18, 175], "imag": [1, 5, 14, 17, 18, 65, 133, 174, 180], "compress": [1, 5, 14], "via": [1, 5, 14, 21, 29, 30, 32, 47, 49, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 82, 83, 84, 86, 87, 89, 91, 92, 97, 115, 122, 133, 136, 171, 173, 177], "decomposit": [1, 5, 7, 11, 13, 22, 26, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 144, 145, 159, 163, 168, 169, 174, 175, 177, 178, 180], "non": [1, 5, 6, 8, 13, 14, 27, 29, 31, 32, 50, 51, 52, 66, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 106, 107, 111, 121, 130, 135, 136, 138, 156, 177, 179], "neg": [1, 3, 5, 6, 8, 13, 14, 29, 31, 50, 51, 68, 69, 70, 76, 77, 78, 79, 80, 81, 97, 121, 136, 138, 156, 179], "parafac": [1, 3, 4, 5, 6, 8, 13, 14, 22, 28, 29, 66, 68, 69, 70, 77, 175, 176, 177], "il": [1, 5, 14], "2": [1, 3, 4, 5, 8, 10, 11, 12, 14, 15, 17, 18, 22, 23, 27, 29, 30, 32, 33, 34, 46, 47, 49, 50, 51, 52, 54, 55, 57, 59, 62, 66, 67, 68, 69, 70, 72, 74, 77, 78, 80, 81, 82, 83, 87, 89, 93, 94, 95, 97, 104, 105, 106, 107, 111, 112, 114, 115, 121, 122, 130, 132, 134, 135, 136, 137, 138, 150, 156, 158, 160, 164, 170, 171, 172, 174, 176, 177, 178, 179, 180], "respons": [1, 3, 5, 14], "data": [1, 3, 5, 9, 10, 11, 14, 17, 18, 28, 29, 32, 46, 54, 57, 70, 87, 97, 98, 106, 107, 111, 115, 121, 122, 128, 129, 130, 135, 155, 171, 172, 176, 177, 180], "covid": [1, 5, 14], "19": [1, 5, 8, 14, 15, 57, 69, 77, 107, 177, 178], "serologi": [1, 5, 14], "analysi": [1, 5, 14, 52, 66, 68, 82], "cp": [1, 4, 5, 6, 7, 11, 13, 14, 16, 19, 22, 29, 50, 51, 52, 55, 58, 59, 61, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 86, 89, 123, 128, 175, 176, 180], "click": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "here": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 23, 27, 29, 32, 70, 133, 174, 177, 179], "download": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "exampl": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 24, 26, 30, 31, 32, 33, 34, 35, 46, 47, 49, 57, 94, 95, 97, 100, 104, 105, 106, 107, 111, 112, 115, 121, 122, 130, 132, 133, 134, 135, 136, 137, 138, 139, 150, 156, 158, 170, 171, 172, 175, 178], "code": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 23, 26, 28, 49, 154, 174, 176], "provid": [2, 3, 8, 9, 21, 26, 28, 30, 33, 34, 46, 47, 53, 56, 76, 84, 105, 107, 114, 122, 128, 129, 133, 136, 137, 138, 147, 167, 168, 169, 170, 173, 174, 176], "an": [2, 3, 8, 9, 10, 11, 12, 22, 26, 27, 29, 30, 31, 32, 33, 34, 46, 47, 54, 57, 62, 63, 65, 66, 67, 68, 69, 70, 77, 79, 81, 87, 94, 95, 97, 100, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 130, 132, 133, 135, 136, 137, 138, 156, 158, 168, 170, 171, 172, 174, 177, 178], "reduc": [2, 31, 33, 34, 106, 107, 111, 121, 122, 138], "dimension": [2, 3, 28, 33, 34, 115, 121, 122, 171, 174, 178, 179], "experiment": [2, 175], "insight": 2, "about": [2, 10, 22, 26, 98, 177], "underli": [2, 3, 23, 130, 162], "structur": [2, 3, 8, 11, 23, 104, 135, 176, 177], "To": [2, 3, 8, 10, 11, 22, 27, 28, 29, 57, 70, 106, 111, 116, 117, 118, 119, 120, 174, 176], "do": [2, 3, 22, 23, 175], "measur": [2, 3, 174, 176], "cell": [2, 3], "signal": [2, 3, 8, 69, 77], "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 30, 35, 57, 105, 139, 150, 174, 176, 177, 178, 179], "np": [2, 3, 4, 7, 8, 9, 10, 11, 15, 21, 22, 29, 30, 31, 32, 33, 34, 44, 46, 47, 49, 50, 51, 52, 53, 56, 57, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 84, 86, 94, 95, 97, 104, 105, 106, 107, 111, 112, 115, 121, 122, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 144, 156, 158, 170, 171, 172, 173, 174, 177, 178, 179], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "plt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "from": [2, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 26, 27, 28, 29, 31, 32, 33, 34, 46, 49, 60, 70, 88, 97, 104, 105, 116, 117, 118, 119, 120, 121, 130, 133, 136, 137, 138, 150, 160, 164, 170, 174, 176, 177, 178, 179, 180], "load_il2data": 2, "non_negative_parafac": [2, 9, 177], "cp_tensor": [2, 9, 12, 154, 174, 176, 177], "cp_normal": 2, "load": [2, 24, 28, 131, 152, 176], "cellular": 2, "stimul": 2, "natur": 2, "occur": [2, 12, 32, 46, 61, 138], "immun": [2, 3], "molecul": 2, "which": [2, 8, 9, 11, 12, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 46, 47, 49, 50, 52, 53, 56, 57, 58, 65, 66, 68, 69, 70, 76, 77, 78, 79, 82, 84, 96, 97, 98, 101, 105, 106, 107, 111, 115, 121, 122, 123, 125, 126, 133, 135, 136, 137, 138, 146, 149, 150, 151, 153, 154, 158, 159, 163, 166, 170, 171, 173, 174, 176, 177, 179, 180], "pharmaceut": 2, "compani": [2, 26], "drug": 2, "design": 2, "attempt": [2, 95, 107, 177], "act": [2, 8], "effect": [2, 52, 66, 68, 82], "immunotherapi": 2, "therapi": 2, "alter": [2, 3], "": [2, 3, 22, 23, 24, 26, 27, 31, 44, 51, 80, 106, 111, 115, 130, 138, 143, 156, 171, 175, 176, 177, 178, 179], "increas": [2, 8, 54, 87, 162], "decreas": [2, 8, 29, 69, 70, 71, 77, 86], "its": [2, 8, 12, 22, 28, 30, 31, 47, 49, 94, 95, 105, 130, 133, 136, 158, 160, 161, 162, 164, 165, 176, 178, 179], "interact": [2, 3, 21], "particular": [2, 9, 11, 21, 22, 23, 27, 95], "type": [2, 3, 21, 23, 29, 31, 32, 52, 66, 68, 69, 70, 77, 82, 95, 97, 98, 106, 107, 111, 115, 121, 122, 135, 138, 171, 172, 176, 180], "through": [2, 28, 31, 57, 106, 107, 111, 121, 138, 174, 176, 180], "jak": 2, "stat": 2, "pathwai": 2, "transmit": 2, "phosphoryl": 2, "stat5": 2, "pstat5": 2, "when": [2, 9, 10, 21, 22, 29, 32, 46, 50, 52, 53, 56, 57, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 105, 106, 108, 111, 121, 122, 130, 135, 136, 138, 156, 158, 170, 173, 174, 177], "caus": [2, 3, 107, 138, 177], "prolifer": 2, "depend": [2, 8, 26, 94, 105, 107, 122, 134, 135, 138, 170, 174, 176, 177], "whether": [2, 26, 31, 51, 52, 56, 66, 76, 79, 80, 81, 82, 94, 97, 108, 115, 122, 135, 171, 173, 174, 176, 177], "regulatori": 2, "t": [2, 3, 10, 11, 12, 22, 29, 35, 46, 49, 52, 59, 66, 68, 69, 70, 76, 77, 81, 82, 104, 106, 108, 111, 116, 117, 118, 119, 120, 122, 130, 139, 144, 145, 150, 154, 174, 176, 177, 178, 179], "treg": 2, "effector": 2, "helper": 2, "killer": 2, "cytotox": 2, "thelper": 2, "nk": 2, "cd8": 2, "respond": 2, "result": [2, 3, 9, 10, 12, 22, 23, 27, 30, 31, 32, 33, 34, 46, 47, 65, 79, 81, 94, 97, 105, 106, 107, 111, 112, 115, 121, 122, 130, 133, 136, 137, 138, 143, 154, 156, 169, 171, 172, 177], "immunosuppress": 2, "immunostimul": 2, "respect": [2, 79, 81, 105, 143, 174], "thu": [2, 8, 177], "meant": 2, "repress": 2, "potenti": 2, "treatment": 2, "autoimmun": 2, "diseas": 2, "primarili": 2, "enact": 2, "desir": [2, 52, 63, 66, 68, 82, 107, 115, 130, 171, 174], "convers": [2, 107], "cancer": 2, "achiev": [2, 112], "either": [2, 8, 22, 29, 69, 77, 95, 105, 122, 134, 174, 176], "bia": 2, "variant": [2, 154, 177], "affin": 2, "receptor": [2, 3], "il2r\u03b1": 2, "il2r\u03b2": 2, "furthermor": 2, "bind": [2, 3], "domain": 2, "multival": 2, "mai": [2, 8, 10, 11, 21, 28, 29, 31, 32, 46, 49, 57, 70, 107, 121, 122, 138, 177], "more": [2, 3, 22, 29, 31, 32, 46, 70, 94, 106, 107, 111, 122, 133, 137, 138, 144, 145, 154, 156, 174, 176, 177, 178, 179], "therapeut": 2, "understand": 2, "mutat": 2, "affect": [2, 32, 35, 139], "mutant": 2, "perform": [2, 4, 9, 15, 17, 18, 22, 29, 31, 49, 52, 53, 66, 70, 82, 84, 95, 107, 121, 135, 138, 174, 176, 177, 178, 179, 180], "our": [2, 9, 10, 22, 28, 174, 176, 177, 179], "contain": [2, 28, 29, 30, 50, 52, 55, 57, 66, 67, 68, 70, 72, 78, 79, 82, 83, 88, 89, 107, 116, 117, 118, 119, 120, 122, 135, 136, 156, 158, 176, 177], "8": [2, 3, 8, 11, 15, 29, 32, 51, 69, 70, 77, 79, 80, 81, 94, 122, 134, 135, 156, 170, 177, 178], "differ": [2, 3, 9, 10, 11, 28, 29, 57, 70, 105, 106, 133, 135, 136, 174, 178], "13": [2, 11, 15, 29, 33, 34, 70, 95, 105, 107, 177, 178], "4": [2, 8, 9, 10, 11, 12, 15, 17, 18, 31, 32, 33, 34, 46, 49, 57, 74, 93, 94, 95, 100, 104, 105, 106, 107, 111, 112, 121, 130, 132, 133, 135, 136, 137, 150, 156, 158, 170, 172, 176, 177, 178], "timepoint": 2, "12": [2, 8, 9, 10, 15, 33, 34, 95, 107, 121, 135, 170, 177, 178, 179], "standard": 2, "concentr": 2, "therefor": [2, 8, 9, 10, 22, 28, 37, 39, 42, 95, 178, 179], "shape": [2, 11, 12, 15, 17, 18, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 144, 145, 146, 148, 149, 150, 154, 156, 158, 159, 166, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179], "x": [2, 11, 17, 18, 27, 29, 30, 33, 34, 39, 47, 54, 57, 59, 70, 74, 87, 93, 94, 112, 116, 117, 118, 119, 120, 121, 122, 128, 129, 132, 133, 134, 136, 158, 170, 171, 172, 177, 178, 180], "dimens": [2, 31, 32, 33, 34, 37, 38, 39, 40, 46, 49, 65, 95, 104, 105, 106, 107, 111, 112, 121, 122, 127, 129, 130, 132, 137, 138, 156, 162, 172, 178, 179, 180], "repres": [2, 3, 10, 21, 124, 159, 162, 163, 174, 177, 179], "dose": 2, "each": [2, 3, 9, 10, 11, 12, 22, 28, 29, 30, 39, 49, 50, 51, 52, 54, 55, 56, 60, 61, 66, 67, 68, 69, 70, 72, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 112, 124, 127, 128, 129, 136, 137, 138, 144, 147, 154, 173, 179, 180], "quantiti": 2, "amount": [2, 3, 8], "phosphorly": 2, "given": [2, 8, 11, 21, 22, 29, 31, 32, 33, 34, 49, 57, 69, 70, 77, 88, 95, 96, 106, 108, 111, 115, 116, 117, 118, 119, 120, 121, 130, 136, 138, 144, 156, 159, 160, 163, 164, 171, 172, 174, 178, 180], "popul": [2, 32], "follow": [2, 8, 9, 10, 11, 23, 28, 29, 70, 81, 105, 122, 135, 156, 177], "specifi": [2, 8, 22, 29, 31, 32, 33, 34, 36, 38, 39, 46, 58, 65, 70, 79, 94, 97, 100, 101, 107, 121, 131, 135, 137, 138, 146, 147, 152, 153, 156, 158, 166, 174], "response_data": 2, "il2mut": 2, "tick": [2, 3], "0": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 29, 31, 32, 33, 34, 37, 38, 39, 40, 42, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 62, 64, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 91, 94, 95, 97, 104, 105, 106, 107, 111, 112, 115, 121, 122, 125, 126, 130, 132, 133, 134, 135, 136, 137, 138, 144, 145, 147, 150, 154, 156, 158, 162, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179], "3": [2, 3, 4, 7, 8, 10, 11, 12, 15, 17, 18, 21, 22, 32, 33, 34, 46, 49, 52, 56, 57, 66, 68, 69, 71, 73, 74, 75, 76, 77, 81, 82, 86, 91, 92, 93, 94, 95, 97, 100, 101, 104, 105, 106, 107, 111, 112, 115, 121, 122, 130, 132, 134, 135, 136, 137, 144, 145, 150, 156, 158, 170, 171, 172, 173, 176, 177, 178, 179], "print": [2, 8, 9, 10, 11, 12, 15, 18, 23, 32, 49, 79, 81, 177, 179], "dim": [2, 3], "ligand": 2, "compon": [2, 12, 29, 50, 52, 54, 55, 61, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 82, 83, 85, 86, 87, 89, 90, 123, 127, 154, 156], "normal": [2, 3, 8, 17, 18, 22, 29, 52, 60, 66, 68, 69, 70, 77, 82, 122, 176], "aid": 2, "futur": [2, 22, 27, 28], "comparison": [2, 7, 106, 111], "correl": 2, "across": [2, 136], "must": [2, 9, 10, 22, 23, 30, 31, 32, 46, 47, 55, 61, 89, 90, 95, 105, 106, 107, 111, 112, 121, 122, 124, 125, 126, 133, 134, 136, 137, 138, 156, 158], "preprocess": 2, "readi": [2, 27], "factor": [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 29, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 91, 92, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 144, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 176, 177, 179], "few": [2, 8, 9], "miss": [2, 52, 53, 54, 56, 66, 68, 82, 84, 87, 150, 173, 175], "valu": [2, 8, 9, 10, 21, 22, 28, 29, 30, 31, 32, 33, 34, 47, 50, 52, 53, 54, 56, 57, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 87, 91, 92, 93, 97, 100, 101, 105, 106, 107, 108, 109, 110, 111, 115, 121, 122, 128, 129, 130, 133, 134, 135, 136, 138, 150, 151, 170, 171, 172, 173, 174, 175, 179], "so": [2, 10, 11, 22, 28, 29, 61, 70, 122, 136, 156, 162, 177, 179], "gener": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 23, 27, 32, 49, 65, 88, 116, 117, 122, 123, 124, 125, 126, 127, 135, 138, 140, 148, 176, 177], "mask": [2, 46, 50, 52, 53, 54, 56, 62, 66, 68, 76, 78, 82, 84, 87, 103, 144, 150, 173, 177], "mark": 2, "where": [2, 10, 11, 28, 29, 30, 31, 32, 35, 46, 47, 52, 53, 54, 56, 60, 62, 63, 64, 66, 68, 69, 70, 77, 82, 84, 87, 95, 97, 104, 106, 107, 111, 116, 117, 118, 119, 120, 121, 122, 124, 133, 135, 136, 138, 139, 144, 145, 158, 173, 177], "tensor_mask": 2, "isfinit": [2, 3], "ve": 2, "finit": [2, 8], "regener": 2, "without": [2, 7, 29, 70, 79, 81, 85, 90, 95, 130, 162, 176, 177], "response_data_fin": 2, "nan_to_num": [2, 3], "decompos": [2, 9, 10, 11, 49, 53, 54, 55, 56, 66, 67, 68, 69, 70, 73, 74, 75, 76, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 123, 124, 125, 126, 127, 173, 174, 176, 177, 179], "three": [2, 11, 17, 18, 23, 156, 170], "also": [2, 3, 9, 10, 12, 21, 22, 27, 28, 32, 39, 52, 53, 56, 66, 68, 75, 82, 84, 88, 92, 112, 121, 138, 162, 173, 174, 176, 177, 178, 179, 180], "easier": 2, "made": [2, 26, 29, 70, 104, 122], "between": [2, 3, 9, 10, 21, 32, 79, 81, 108, 109, 110, 143, 153], "mean": [2, 9, 10, 11, 22, 29, 57, 70, 108, 109, 110, 121, 130, 138, 172, 174, 176, 179], "magnitud": 2, "sig_tensor_fact": 2, "init": [2, 4, 9, 29, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 173, 174, 177], "random": [2, 4, 7, 8, 9, 10, 11, 12, 17, 18, 22, 29, 44, 49, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 122, 135, 137, 173, 174, 175, 177], "rank": [2, 3, 4, 7, 8, 9, 10, 12, 17, 18, 22, 29, 49, 50, 51, 52, 53, 54, 55, 56, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 93, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 134, 144, 154, 162, 173, 174, 176, 177, 179, 180], "n_iter_max": [2, 3, 7, 10, 11, 17, 18, 29, 49, 50, 51, 52, 53, 54, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 128, 129, 173], "5000": 2, "tol": [2, 3, 4, 7, 10, 11, 17, 18, 29, 49, 50, 51, 52, 53, 54, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 128, 129, 173], "1e": [2, 3, 10, 11, 29, 50, 52, 54, 66, 68, 69, 70, 71, 77, 78, 79, 81, 82, 86, 87, 128, 129], "9": [2, 3, 7, 8, 11, 15, 74, 93, 94, 105, 107, 122, 135, 136, 150, 156, 170, 177, 178], "random_st": [2, 4, 7, 11, 29, 49, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 123, 124, 125, 126, 127, 128, 129, 173], "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 95, 97, 100, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 144, 145, 146, 150, 154, 156, 158, 159, 161, 162, 165, 166, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180], "name": [2, 21, 23, 35, 99, 108, 131, 135, 139, 141, 152, 176], "thei": [2, 9, 28, 105, 135, 156, 174, 179], "ar": [2, 3, 8, 9, 10, 11, 12, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 39, 46, 52, 53, 54, 56, 57, 60, 61, 62, 65, 66, 68, 69, 70, 77, 81, 82, 84, 87, 94, 95, 97, 104, 105, 106, 107, 111, 115, 116, 117, 118, 119, 120, 121, 122, 134, 135, 136, 137, 138, 147, 150, 156, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179], "origin": [2, 4, 9, 10, 11, 15, 17, 18, 30, 36, 37, 40, 47, 112, 130, 133, 136, 149, 158, 177, 179], "refer": [2, 12, 24, 29, 31, 32, 49, 50, 51, 52, 56, 57, 61, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 86, 91, 92, 97, 107, 115, 121, 130, 134, 135, 136, 138, 144, 145, 158, 171, 173, 174, 175, 176], "specif": [2, 3, 9, 10, 21, 22, 28, 95, 121, 176], "amino": 2, "acid": 2, "sequenc": [2, 9, 10, 46, 49, 73, 75, 91, 92, 112, 115, 137, 156, 172], "well": [2, 3, 11, 21, 22, 106, 111, 121, 134, 176], "valenc": 2, "format": [2, 9, 10, 15, 17, 18, 22, 23, 28, 74, 93, 126, 159, 160, 161, 163, 164, 165, 176], "monoval": 2, "bival": 2, "final": [2, 11, 22, 62, 178], "label": [2, 3, 7, 11, 17, 18, 128, 129, 180], "plot": [2, 3, 4, 8, 9, 10, 11, 12, 17, 18, 30], "analyz": 2, "f": [2, 3, 9, 10, 11, 12, 29, 57, 70, 97, 115, 130, 154, 171, 172, 179], "ax": [2, 3, 4, 7, 11, 12, 17, 18, 31, 33, 34, 95, 105, 106, 107, 111, 112, 121, 122, 134, 138, 156, 158], "subplot": [2, 3, 11, 12], "figsiz": [2, 3, 11], "5": [2, 3, 4, 8, 10, 11, 12, 15, 17, 18, 29, 31, 32, 33, 46, 49, 52, 53, 54, 66, 70, 75, 82, 84, 87, 92, 94, 95, 100, 101, 104, 105, 106, 107, 111, 112, 115, 121, 130, 132, 133, 134, 137, 138, 150, 156, 158, 170, 171, 172, 174, 176, 177, 178], "width": 2, "25": [2, 4, 8, 9, 17, 18, 49], "lig_fac": 2, "x_lig": 2, "arang": [2, 3, 9, 15, 33, 34, 46, 49, 94, 95, 104, 105, 106, 111, 130, 156, 158, 170, 172, 177, 178], "len": [2, 3, 11, 17, 18, 51, 53, 56, 76, 80, 81, 84, 88, 125, 126, 132, 144, 173, 179], "lig_rects_comp1": 2, "bar": 2, "lig_rects_comp2": 2, "lig_rects_comp3": 2, "set": [2, 9, 11, 21, 30, 31, 33, 34, 35, 39, 47, 57, 79, 81, 88, 106, 107, 111, 115, 121, 128, 129, 131, 133, 136, 138, 139, 152, 171, 172, 174, 175, 176, 177], "xlabel": [2, 3], "ylabel": [2, 3], "weight": [2, 3, 4, 9, 11, 12, 17, 18, 29, 50, 52, 55, 60, 62, 63, 64, 66, 67, 68, 69, 70, 72, 77, 78, 79, 82, 83, 89, 103, 107, 116, 117, 118, 119, 120, 128, 129, 144, 180], "ylim": 2, "set_xtick": [2, 3, 11], "set_xticklabel": [2, 3], "get_xticklabel": 2, "rotat": 2, "60": [2, 156, 170], "right": [2, 10, 11, 29, 49, 70, 95, 144, 145, 178], "fontsiz": [2, 11], "legend": [2, 7, 8, 9, 10, 11], "cell_fac": 2, "x_cell": 2, "cell_rects_comp1": 2, "cell_rects_comp2": 2, "cell_rects_comp3": 2, "45": [2, 8], "tight_layout": [2, 4, 11], "show": [2, 4, 7, 8, 9, 11, 12, 17, 18, 22, 26, 30], "observ": [2, 12, 180], "both": [2, 3, 7, 8, 9, 10, 22, 26, 29, 70, 95, 105, 122, 130, 135, 156, 170, 177, 179, 180], "interepret": 2, "look": [2, 3, 9, 10, 11, 23, 27], "pattern": [2, 3, 17, 18, 51, 80], "among": [2, 12, 29, 70], "higher": [2, 10, 53, 56, 76, 81, 84, 107, 138, 142, 173], "two": [2, 3, 10, 11, 12, 21, 32, 81, 95, 104, 105, 106, 108, 109, 110, 111, 112, 121, 140, 148, 153, 156, 158, 177, 179], "infer": [2, 32, 130], "than": [2, 9, 10, 29, 32, 49, 50, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 106, 111, 121, 122, 133, 135, 137, 138, 156, 173, 177, 178, 179], "relationship": 2, "strengthen": 2, "avail": [2, 9, 10, 22, 122, 135, 179, 180], "one": [2, 3, 11, 12, 22, 23, 28, 29, 31, 33, 34, 40, 46, 55, 58, 67, 70, 72, 79, 83, 88, 89, 97, 106, 107, 111, 121, 131, 133, 137, 138, 144, 146, 147, 150, 152, 156, 166, 171, 174, 176, 177, 178, 179], "subunit": 2, "just": [2, 11, 26, 122, 147], "By": [2, 33, 34, 106, 107, 111, 121, 176], "could": [2, 8, 9, 10, 28, 154], "addition": [2, 9, 21, 54, 87, 180], "dynam": [2, 21], "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "104": [2, 5, 49], "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 28, 29, 70, 95, 104, 105, 106, 111, 117, 124, 135, 156, 179], "sourc": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 26, 29, 36, 37, 38, 39, 40, 41, 42, 43, 49, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 110, 112, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173], "plot_il2": [2, 5], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 23], "jupyt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "notebook": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "galleri": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 23], "sphinx": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 23], "sphinx_gallery_thumbnail_numb": 3, "extrem": 3, "reduct": [3, 31], "u": [3, 9, 22, 26, 27, 60, 62, 63, 64, 79, 81, 174], "develop": [3, 22, 26, 27], "model": [3, 9, 11, 22, 29, 52, 66, 68, 70, 82, 124, 128, 129, 180], "compact": 3, "while": [3, 8, 9, 10, 23, 27, 28, 32, 38, 39, 49, 60, 64, 79, 121, 135, 138, 174, 179], "retain": [3, 30, 47, 133, 135, 136], "crucial": 3, "subject": [3, 54, 87], "biomed": 3, "research": [3, 26], "new": [3, 9, 21, 22, 27, 28, 31, 32, 33, 34, 46, 57, 97, 105, 106, 107, 111, 112, 115, 121, 122, 128, 129, 130, 134, 135, 137, 138, 171, 172, 174, 176, 177], "technologi": 3, "examin": 3, "antibodi": 3, "patient": 3, "serum": 3, "comprehens": 3, "profil": 3, "fc": 3, "alongsid": 3, "other": [3, 8, 12, 21, 22, 29, 30, 32, 36, 47, 61, 62, 79, 105, 112, 121, 122, 133, 135, 136, 138, 174, 176, 177, 179], "immunolog": 3, "demograph": 3, "438": 3, "sampl": [3, 17, 18, 39, 49, 71, 86, 88, 128, 129, 175, 180], "collect": 3, "were": [3, 46, 105, 122, 137, 177], "systemat": 3, "behavior": [3, 105, 106, 111], "sar": 3, "cov": 3, "viru": 3, "antigen": 3, "statu": 3, "detail": [3, 23, 31, 94, 106, 107, 111, 121, 134, 135, 138, 144, 145, 179, 180], "depth": [3, 46], "implic": 3, "found": [3, 11, 52, 66, 68, 69, 77, 82], "hiv": 3, "predict": [3, 109, 110, 128, 129, 176, 180], "panel": 3, "tl": [3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 35, 49, 55, 56, 58, 59, 67, 72, 74, 83, 85, 89, 90, 93, 114, 139, 150, 153, 154, 166, 167, 168, 169, 173, 174, 176, 178, 179], "data_import": 3, "load_covid19_serologi": 3, "cm": [3, 17, 18], "scalarmapp": 3, "comp": 3, "7": [3, 6, 9, 11, 13, 14, 15, 17, 18, 21, 31, 32, 94, 104, 105, 106, 107, 111, 121, 135, 138, 156, 170, 177, 178, 179], "cmtffac": 3, "cc": 3, "10": [3, 7, 8, 9, 10, 11, 15, 22, 27, 30, 33, 34, 51, 55, 57, 67, 69, 72, 77, 80, 83, 85, 89, 90, 104, 105, 106, 107, 111, 121, 130, 137, 138, 170, 174, 176, 177, 178, 179], "1000": [3, 10, 17, 18, 29, 70, 177], "linesearch": [3, 7, 52, 66, 82], "true": [3, 7, 8, 9, 10, 11, 12, 29, 30, 31, 33, 34, 35, 39, 46, 47, 50, 51, 52, 53, 54, 56, 57, 66, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 104, 105, 106, 107, 108, 111, 116, 117, 121, 122, 123, 124, 125, 126, 127, 133, 134, 136, 138, 139, 144, 145, 146, 147, 154, 156, 162, 167, 168, 169, 170, 172, 173, 176, 177], "orthogonalis": [3, 52, 66, 82], "evalu": [3, 11, 31, 49, 156], "explain": [3, 11], "varianc": 3, "percent": 3, "reconstruct": [3, 4, 9, 11, 29, 50, 51, 52, 53, 54, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 162, 173, 174, 179], "r2x": 3, "rang": [3, 8, 11, 12, 15, 32, 37, 39, 42, 137, 144, 154, 156, 158], "def": [3, 4, 9, 10, 22, 23, 169, 174], "reconstructed_vari": 3, "tfac": 3, "tin": 3, "none": [3, 11, 29, 30, 31, 32, 33, 34, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 62, 65, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 95, 97, 100, 103, 105, 106, 107, 109, 110, 111, 114, 115, 121, 123, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 138, 143, 144, 145, 147, 154, 155, 158, 167, 168, 169, 171, 172, 173], "function": [3, 4, 8, 9, 10, 11, 12, 22, 24, 26, 29, 30, 32, 44, 46, 50, 52, 53, 56, 57, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 91, 92, 93, 94, 97, 104, 105, 106, 111, 117, 122, 133, 134, 136, 138, 170, 173, 175, 176, 177, 178, 179], "calcul": [3, 7, 9, 10, 11, 30, 81, 121, 136], "captur": 3, "tmask": 3, "vtop": 3, "sum": [3, 8, 11, 12, 29, 52, 54, 61, 62, 66, 68, 70, 82, 87, 94, 95, 105, 107, 156, 179], "squar": [3, 8, 9, 10, 29, 49, 52, 66, 68, 69, 70, 77, 79, 81, 82, 109, 110, 122, 134, 136], "cp_to_tensor": [3, 4, 7, 9, 52, 59, 66, 68, 82, 177, 179], "vbottom": 3, "return": [3, 4, 10, 12, 23, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 179], "fig1": 3, "figur": [3, 4, 7, 8, 9, 10, 11, 17, 18], "cmtfr2x": 3, "arrai": [3, 10, 11, 12, 15, 29, 30, 31, 32, 33, 34, 41, 43, 46, 47, 49, 52, 53, 54, 56, 57, 58, 65, 66, 68, 69, 70, 77, 79, 81, 82, 84, 87, 94, 95, 97, 100, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 144, 146, 150, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178], "bo": 3, "number": [3, 10, 11, 12, 26, 29, 30, 31, 32, 37, 38, 39, 40, 47, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 97, 104, 107, 122, 128, 129, 133, 135, 136, 138, 144, 158, 172, 173, 174, 177, 179, 180], "gca": 3, "set_xlim": [3, 11], "amax": [3, 33, 34, 106, 111], "set_ylim": 3, "eventu": 3, "wish": [3, 11, 21, 94], "bring": 3, "case": [3, 9, 10, 28, 31, 32, 33, 34, 46, 60, 97, 104, 115, 121, 122, 130, 135, 138, 147, 156, 167, 168, 169, 170, 171, 175, 176, 177, 179], "reveal": 3, "trend": 3, "level": [3, 21, 29, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 128, 129, 173], "ensur": [3, 21, 22, 32, 57, 97, 115, 171], "most": [3, 8, 9, 10, 22, 105, 130], "direct": [3, 8, 9, 10, 11, 29, 69, 70, 77], "fig2": 3, "16": [3, 8, 11, 15, 105, 121, 177, 178, 179], "6": [3, 4, 6, 8, 11, 13, 14, 15, 26, 29, 32, 33, 34, 46, 52, 66, 68, 69, 70, 77, 82, 94, 95, 104, 106, 111, 122, 130, 132, 137, 138, 156, 170, 172, 177, 178], "ii": [3, 7], "fac": [3, 7], "scale": [3, 17, 18, 104, 122, 135], "linalg": [3, 11, 95, 122, 134, 177], "norm": [3, 7, 8, 11, 21, 29, 50, 51, 52, 59, 66, 68, 69, 70, 77, 78, 79, 80, 81, 82, 174], "ord": [3, 154], "inf": [3, 11, 136], "axi": [3, 11, 31, 33, 34, 46, 95, 105, 106, 107, 109, 110, 111, 114, 121, 130, 135, 137, 138, 154, 156, 158, 178], "imshow": [3, 4, 17, 18, 30], "cmap": [3, 17, 18, 30], "piyg": 3, "vmin": 3, "vmax": 3, "set_ytick": 3, "set_yticklabel": 3, "els": [3, 52, 53, 54, 56, 66, 68, 82, 84, 87, 133, 154, 170, 173], "set_titl": [3, 4, 11, 12, 17, 18], "set_aspect": 3, "auto": 3, "colorbar": 3, "object": [3, 11, 21, 22, 31, 32, 46, 57, 97, 115, 122, 130, 156, 171, 176, 177, 180], "0x7fe9aa533190": 3, "separ": [3, 11, 175], "distinct": [3, 177], "clear": [3, 57], "acut": 3, "igg3": 3, "igm": 3, "iga": 3, "long": [3, 156], "term": [3, 8], "igg1": 3, "symptom": 3, "distinguish": 3, "indic": [3, 22, 28, 33, 34, 49, 51, 56, 61, 76, 79, 80, 81, 88, 100, 101, 106, 111, 133, 173], "great": 3, "tool": 3, "find": [3, 8, 11, 12, 49, 108, 135, 180], "signific": [3, 138], "tan": 3, "z": [3, 31, 57], "c": [3, 9, 10, 11, 27, 29, 57, 70, 95, 97, 104, 105, 115, 116, 117, 118, 119, 120, 130, 156, 170, 171, 172], "murphi": 3, "m": [3, 29, 57, 70, 81, 88, 95, 97, 105, 107, 122, 134, 144, 145, 178], "alpai": 3, "h": [3, 29, 70, 122], "d": [3, 8, 46, 54, 55, 67, 69, 72, 77, 83, 87, 89, 94, 95, 97, 104, 105, 130, 132, 138, 156, 158, 160, 161, 164, 165, 170, 179], "A": [3, 4, 8, 10, 11, 15, 21, 26, 29, 30, 31, 47, 49, 50, 52, 54, 57, 59, 66, 68, 69, 70, 71, 77, 78, 79, 81, 82, 85, 86, 87, 90, 105, 116, 117, 118, 119, 120, 122, 124, 130, 133, 135, 136, 144, 156, 158, 172, 174, 176, 177, 178, 179], "2021": 3, "improv": [3, 27, 138], "molecular": 3, "biologi": 3, "17": [3, 9, 15, 106, 111, 121, 135, 138, 172, 177, 178, 179], "e10243": 3, "http": [3, 9, 10, 26, 27, 122], "www": 3, "embopress": 3, "org": [3, 26, 122], "doi": 3, "15252": 3, "msb": 3, "202110243": 3, "_": [3, 8, 11, 29, 54, 70, 87, 137, 178], "zohar": 3, "loo": 3, "fisching": 3, "atyeo": 3, "wang": 3, "slein": 3, "g": [3, 10, 21, 22, 28, 31, 52, 56, 62, 66, 68, 69, 71, 74, 76, 77, 81, 82, 86, 93, 100, 115, 134, 144, 145, 171, 173, 174, 176, 178, 179], "2020": 3, "compromis": 3, "humor": 3, "evolut": [3, 12], "track": 3, "mortal": 3, "183": 3, "1508": 3, "1519": 3, "sciencedirect": 3, "com": [3, 27], "scienc": 3, "articl": [3, 9, 10, 26], "pii": 3, "s0092867420314598": 3, "081": [3, 5], "plot_covid": [3, 5], "tucker": [4, 6, 11, 13, 14, 16, 19, 51, 53, 80, 81, 84, 108, 127, 129, 166, 167, 168, 169, 174, 175, 176, 180], "misc": 4, "face": 4, "ndimag": 4, "zoom": 4, "math": [4, 138], "ceil": [4, 32], "12345": 4, "dtype": [4, 9, 10, 28, 30, 31, 32, 33, 34, 46, 47, 57, 95, 96, 97, 98, 105, 106, 107, 111, 115, 121, 132, 133, 135, 136, 138, 155, 156, 171, 172, 174, 177], "float64": [4, 21, 28, 107, 115, 138, 171, 177], "to_imag": 4, "conveni": [4, 21, 22, 28, 100], "convert": [4, 23, 28, 31, 33, 34, 64, 167, 168, 169], "float": [4, 10, 29, 31, 32, 49, 50, 52, 53, 54, 56, 65, 66, 68, 69, 70, 71, 74, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 90, 93, 96, 97, 98, 106, 107, 108, 109, 110, 111, 114, 122, 128, 129, 135, 138, 143, 150, 151, 171, 172, 173, 177], "back": [4, 21, 43, 130, 178], "uint8": [4, 121], "im": 4, "to_numpi": [4, 17, 18], "min": [4, 22, 34, 122, 174], "max": [4, 33, 111, 150, 174, 176], "255": 4, "astyp": 4, "cp_rank": 4, "tucker_rank": 4, "100": [4, 10, 17, 18, 29, 49, 50, 52, 53, 54, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 87, 104, 128, 129, 173, 177], "10e": [4, 17, 18, 54, 87, 179], "cp_reconstruct": 4, "core": [4, 10, 21, 26, 49, 51, 53, 56, 58, 59, 76, 80, 81, 84, 127, 129, 159, 163, 166, 167, 168, 169, 173, 176, 179], "tucker_factor": 4, "tucker_reconstruct": 4, "tucker_to_tensor": [4, 10, 179], "fig": [4, 7, 8, 9, 10, 11, 12, 17, 18], "add_subplot": [4, 7, 17, 18], "set_axis_off": [4, 17, 18], "446": [4, 5], "plot_image_compress": [4, 5], "00": [5, 13, 19, 20, 179], "14": [5, 8, 10, 15, 33, 34, 97, 107, 177, 178], "630": 5, "execut": [5, 13, 19, 20, 21, 23, 26, 174, 176], "auto_examples_appl": 5, "file": [5, 13, 19, 20, 23], "08": [5, 8, 29, 52, 66, 69, 70, 71, 77, 81, 82, 86], "mb": [5, 13, 19, 20], "03": [5, 8, 13], "permut": [6, 11, 13, 14, 61, 108, 112, 158], "line": [6, 13, 14, 23, 52, 66, 82], "search": [6, 13, 14, 52, 66, 82], "constrain": [6, 13, 14, 29, 69, 70, 77], "demonstr": [6, 13, 14, 179], "parafac2": [6, 13, 14, 116, 117, 118, 119, 120, 124], "acceler": [7, 9, 10], "converg": [7, 9, 10, 29, 49, 54, 70, 87, 128, 129], "random_cp": [7, 12, 176], "logspac": 7, "err": [7, 11], "empty_lik": [7, 172], "err_l": 7, "tt": [7, 49, 74, 75, 92, 93, 125, 126, 159, 160, 161, 163, 164, 165, 176, 179], "tt_l": 7, "1234": 7, "get": [7, 11, 22, 26, 96, 98, 174, 176], "high": [7, 10, 49, 79, 81, 179], "accuraci": [7, 49], "2000000": 7, "0e": 7, "15": [7, 8, 9, 11, 12, 15, 33, 34, 106, 107, 111, 121, 135, 138, 177, 178], "err_min": 7, "toll": 7, "enumer": [7, 17, 18, 154], "start": [7, 11, 26, 27, 30, 32, 37, 39, 42, 121, 138, 175, 178], "fals": [7, 29, 30, 31, 35, 39, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 106, 107, 111, 121, 123, 124, 125, 126, 127, 131, 133, 136, 138, 139, 144, 145, 146, 147, 152, 162, 166, 167, 168, 169, 170, 173, 177], "fit_transform": [7, 66, 67, 68, 69, 70, 174], "fac_l": 7, "error": [7, 9, 10, 11, 28, 29, 49, 50, 51, 52, 53, 54, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 105, 109, 110, 121, 130, 138, 173, 174, 176], "loglog": 7, "No": [7, 122], "r": [7, 11, 29, 52, 60, 62, 63, 64, 66, 68, 70, 82, 116, 117, 118, 119, 120, 122, 135, 144, 154, 178, 179, 180], "set_ylabel": [7, 11], "set_xlabel": [7, 11], "11": [7, 8, 13, 15, 33, 34, 107, 112, 170, 177, 178], "650": [7, 13], "plot_cp_line_search": [7, 13], "On": [8, 12, 49, 135, 175], "sinc": [8, 9, 10, 11, 22, 29, 49, 70, 117], "version": [8, 9, 10, 11, 27, 29, 31, 32, 33, 34, 46, 57, 62, 70, 94, 97, 105, 106, 107, 111, 112, 115, 121, 122, 134, 135, 136, 137, 138, 171, 172, 176, 177, 179], "penal": [8, 69, 77], "chosen": [8, 135, 170], "user": [8, 9, 10, 22, 26, 28, 69, 77, 97, 135, 174], "propos": [8, 10, 52, 66, 82], "implement": [8, 10, 21, 28, 29, 31, 32, 62, 105, 106, 107, 111, 121, 135, 138, 144, 174, 175, 176, 177, 180], "altern": [8, 9, 10, 29, 31, 49, 52, 62, 66, 68, 69, 70, 77, 79, 82, 105, 106, 107, 111, 116, 117, 118, 119, 120, 121, 133, 138, 174], "optim": [8, 11, 26, 28, 69, 77, 108], "multipli": [8, 58, 69, 77, 95, 105, 121, 122, 146, 154, 166], "ao": [8, 69, 77], "admm": [8, 69, 77], "solv": [8, 10, 54, 69, 77, 81, 87, 122, 177], "convex": 8, "problem": [8, 10, 54, 81, 87, 122, 179], "primal": 8, "dual": 8, "auxilliari": [8, 69, 77], "introduc": [8, 28, 69, 77, 105], "regular": [8, 69, 77, 176], "oper": [8, 14, 20, 21, 26, 95, 105, 106, 111, 149, 150, 151, 176], "call": [8, 9, 10, 12, 21, 22, 23, 32, 33, 34, 58, 69, 77, 105, 122, 130, 146, 166, 170, 174, 176, 178, 179], "proxim": 8, "chang": [8, 22, 28, 29, 47, 57, 70, 130, 131, 135, 152, 162, 175, 176], "accord": [8, 9, 10, 69, 77, 135], "select": [8, 106, 111, 121, 135, 176, 177], "sever": [8, 9, 10, 23, 26, 28, 58, 146, 147, 166, 174, 176], "correspond": [8, 21, 33, 34, 46, 55, 67, 72, 83, 89, 106, 111, 132, 144, 156, 158, 159, 163, 176, 180], "appli": [8, 22, 33, 34, 62, 69, 77, 110, 134, 149, 150, 151, 156, 177, 179], "non_neg": [8, 9, 69, 76, 77], "signatur": [8, 21, 30, 47, 105, 133, 136], "prevent": 8, "l1": [8, 69, 77], "l1_reg": [8, 69, 77], "add": [8, 11, 22, 28, 138], "cost": [8, 79, 81], "promot": [8, 105], "sparsiti": [8, 52, 66, 68, 79, 81, 82], "choos": [8, 9, 11, 49, 135, 170, 177], "l2": [8, 59, 69, 77], "l2_reg": [8, 52, 66, 69, 77, 82], "l2_square_reg": [8, 69, 77], "unimod": [8, 69, 77], "columnwis": [8, 81], "impos": [8, 29, 69, 70, 77, 79, 81, 180], "column": [8, 12, 46, 49, 55, 60, 61, 62, 63, 64, 67, 69, 72, 77, 79, 83, 88, 89, 97, 108, 115, 122, 134, 144, 171], "local": [8, 11, 21, 69, 77], "maximum": [8, 29, 33, 49, 50, 51, 52, 53, 54, 56, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 91, 92, 106, 111, 128, 129, 173], "gaussian": 8, "simplex": [8, 69, 77], "live": 8, "defin": [8, 21, 29, 32, 69, 70, 77, 81, 97, 115, 135, 161, 165, 171, 172, 178], "radiu": 8, "entri": [8, 9, 10, 29, 49, 70, 116, 117, 118, 119, 120, 179], "nonneg": [8, 9, 10], "posit": [8, 31, 32, 50, 51, 71, 78, 79, 80, 81, 86, 97, 112, 136], "paramet": [8, 11, 17, 18, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180], "largest": 8, "absolut": [8, 29, 30, 69, 70, 77, 108], "elementwis": 8, "normalized_spars": [8, 69, 77], "k": [8, 11, 29, 30, 47, 49, 57, 58, 63, 70, 73, 75, 91, 92, 94, 95, 97, 104, 105, 116, 117, 118, 119, 120, 122, 133, 134, 136, 144, 145, 146, 154, 156, 159, 166, 172, 178], "spars": [8, 66, 68, 82, 84, 87, 173, 175, 176], "nonzero": [8, 29, 70, 116, 117, 118, 119, 120, 170], "per": [8, 9, 10, 71, 86, 147, 150], "soft": [8, 150], "soft_spars": [8, 69, 77], "bound": [8, 69, 77], "threshold": [8, 10, 49, 69, 77, 149, 150, 151], "smooth": [8, 69, 77], "favor": 8, "fact": [8, 9, 22, 59, 63], "band": [8, 69, 77], "monoton": [8, 69, 77], "alwai": [8, 22, 122, 130, 138, 176, 178], "base": [8, 9, 17, 18, 21, 22, 23, 49, 57, 172, 178, 179], "isoton": 8, "regress": [8, 9, 10, 19, 26, 65, 175], "hard": [8, 69, 77], "hard_spars": [8, 69, 77], "requir": [8, 9, 21, 22, 136, 174, 177], "boolean": [8, 31, 51, 52, 53, 54, 56, 66, 68, 73, 74, 75, 76, 79, 80, 81, 82, 84, 87, 91, 92, 93, 173, 177], "enough": [8, 105, 135], "support": [8, 11, 21, 22, 26, 28, 32, 54, 87, 97, 115, 171, 174, 176, 177], "constrained_parafac": 8, "set_printopt": 8, "precis": [8, 29, 32, 70, 79, 81, 107, 121, 138], "rand": 8, "itself": [8, 177], "tenalg": [8, 23, 53, 84, 176], "validate_constraint": 8, "process": [8, 9, 10, 69, 77, 180], "If": [8, 11, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 46, 47, 52, 57, 66, 68, 69, 70, 77, 79, 81, 82, 88, 94, 95, 97, 104, 105, 106, 107, 111, 114, 115, 121, 122, 130, 131, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 150, 152, 156, 158, 170, 171, 172, 174], "want": [8, 22, 23, 27, 28, 130, 174, 176, 180], "same": [8, 9, 10, 11, 29, 31, 33, 34, 46, 47, 49, 51, 52, 53, 54, 56, 57, 60, 62, 63, 64, 66, 68, 70, 73, 74, 75, 76, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 93, 95, 104, 105, 106, 107, 111, 112, 116, 117, 118, 119, 120, 121, 122, 127, 130, 135, 136, 137, 138, 144, 149, 154, 156, 169, 172, 173, 174, 176, 177, 179], "bool": [8, 29, 31, 33, 34, 35, 39, 52, 54, 55, 57, 66, 67, 68, 69, 70, 72, 76, 77, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 111, 121, 123, 124, 125, 126, 127, 131, 138, 139, 144, 145, 146, 147, 152, 162, 167, 168, 169, 170, 172], "should": [8, 10, 12, 21, 22, 23, 28, 32, 33, 34, 51, 52, 53, 54, 56, 62, 66, 68, 74, 76, 79, 80, 81, 82, 84, 87, 93, 97, 101, 112, 122, 130, 147, 156, 162, 167, 168, 169, 170, 173, 174, 176, 177], "assum": [8, 104, 147, 174], "doe": [8, 11, 31, 32, 105, 106, 107, 111, 121, 122, 135, 138, 177], "write": [8, 24, 26, 27, 28, 63, 94, 130, 174, 176], "loc": [8, 9, 10, 11, 17, 18], "upper": [8, 9, 10, 11, 94, 97, 122], "left": [8, 9, 11, 29, 31, 33, 34, 49, 70, 106, 107, 111, 121, 138, 144, 145, 178], "similarli": [8, 23, 174], "05": [8, 13, 19], "coeffici": [8, 9, 11, 79, 81, 108, 134, 179], "induc": 8, "larg": [8, 32, 138, 177], "histogram": 8, "hist": 8, "flatten": [8, 33, 34, 39, 46, 94, 106, 107, 111, 135], "As": [8, 9, 10, 12, 22, 179], "option": [8, 9, 10, 23, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 47, 50, 51, 52, 53, 54, 56, 57, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 91, 92, 93, 94, 95, 97, 105, 106, 107, 111, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 144, 145, 147, 152, 158, 167, 168, 169, 171, 172, 173], "dictionari": [8, 21, 69, 77, 128, 129, 174], "n": [8, 9, 10, 11, 15, 18, 28, 29, 32, 33, 34, 36, 52, 54, 56, 58, 66, 68, 69, 70, 76, 77, 81, 82, 87, 95, 97, 104, 105, 122, 128, 129, 132, 135, 144, 145, 146, 147, 154, 156, 158, 166, 173, 176, 178, 179, 180], "24": [8, 9, 10, 15, 33, 34, 49, 104, 121, 156, 177, 178], "51": [8, 9, 11, 13, 52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "76": 8, "62": 8, "63": 8, "48": 8, "99": [8, 49], "79": [8, 23, 49], "96": 8, "56": 8, "88": [8, 9, 49], "36": 8, "31": [8, 10], "38e": 8, "01": [8, 19], "92e": 8, "12e": 8, "46e": 8, "68e": 8, "84e": 8, "55e": 8, "26e": 8, "44e": 8, "30e": 8, "18e": 8, "34e": 8, "71e": 8, "95e": 8, "02": 8, "09e": 8, "88e": 8, "04": 8, "57e": 8, "63e": 8, "83e": 8, "13e": 8, "80e": 8, "73e": 8, "last": [8, 10, 31, 32, 38, 50, 52, 66, 68, 69, 74, 77, 78, 82, 93, 95, 105, 116, 117, 121, 130, 135, 137, 138, 143, 156, 174, 178], "One": [8, 9, 10, 23, 130, 179], "prefer": [8, 32, 57, 95, 170], "possibl": [8, 22, 30, 47, 57, 62, 122, 130, 133, 136, 138, 158, 172, 174], "kei": [8, 21, 135], "46": 8, "58": 8, "55": 8, "28": 8, "23": [8, 9, 15, 177, 178], "54": [8, 49], "52": 8, "87": [8, 9], "78": 8, "22": [8, 15, 33, 34, 134, 177, 178], "53": [8, 9, 13], "65": [8, 10], "21": [8, 15, 177, 178, 180], "89": 8, "95": 8, "37": 8, "32": [8, 121], "82": 8, "38": [8, 135], "42": [8, 9], "47": 8, "35": 8, "66": [8, 9], "61": [8, 9], "41": [8, 9, 135], "18": [8, 9, 15, 26, 135, 177, 178], "07": [8, 68, 79], "06": [8, 13, 19, 50, 54, 69, 77, 78, 87, 128, 129], "l_1": 8, "l_2": 8, "huang": [8, 69, 77], "kejun": [8, 69, 77], "nichola": [8, 69, 77], "sidiropoulo": [8, 69, 77], "athanasio": [8, 69, 77], "p": [8, 69, 77, 116, 117, 122, 158], "liava": [8, 69, 77], "effici": [8, 69, 77], "matrix": [8, 9, 10, 11, 28, 29, 40, 49, 52, 58, 62, 66, 68, 69, 70, 74, 77, 82, 88, 93, 95, 105, 116, 117, 118, 119, 120, 122, 124, 126, 134, 142, 144, 145, 146, 147, 149, 151, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 175, 176, 178], "ieee": [8, 51, 69, 77, 80, 180], "transact": [8, 69, 77, 180], "64": [8, 69, 77], "2016": [8, 69, 73, 77, 91], "5052": [8, 69, 77], "5065": [8, 69, 77], "onlin": [8, 11], "002": [8, 13], "plot_guide_for_constrained_cp": [8, 13], "comput": [9, 10, 22, 28, 29, 50, 51, 52, 53, 56, 62, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 91, 92, 93, 104, 106, 107, 108, 111, 114, 116, 117, 118, 119, 120, 122, 134, 142, 156, 160, 164, 173, 174, 179], "ncp": 9, "updat": [9, 10, 22, 27, 49, 50, 51, 62, 69, 76, 77, 78, 79, 80, 81, 100, 101], "mu": [9, 10, 54, 87], "alreadi": [9, 10, 21, 22, 26, 35, 135, 139, 174], "least": [9, 10, 29, 49, 52, 66, 68, 70, 79, 81, 82, 106, 111, 122, 134, 174], "al": [9, 10, 11, 29, 52, 66, 68, 70, 71, 73, 79, 82, 86, 91], "hierarch": [9, 10, 79], "constraint": [9, 10, 11, 29, 69, 70, 77, 79, 116, 117, 118, 119, 120], "handl": [9, 10, 11, 32, 105, 136, 174, 176, 177], "expect": [9, 10, 11, 12, 22, 23, 31, 46, 106, 107, 111, 121, 138], "after": [9, 10, 11, 12, 23, 69, 77, 105, 179], "obtain": [9, 10, 21, 47, 85, 90, 169, 178, 179, 180], "non_negative_parafac_h": 9, "_cp": 9, "initialize_cp": 9, "cptensor": [9, 29, 52, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 77, 82], "copi": [9, 58, 94, 130, 135, 166], "deepcopi": [9, 57], "There": [9, 10, 12, 28, 62, 133, 174, 176], "wai": [9, 10, 21, 22, 28, 52, 66, 68, 82, 105, 156, 174, 176, 178, 179], "chose": [9, 10], "integ": [9, 10, 29, 32, 70, 79, 81, 107, 121, 130, 135, 138], "24000": 9, "reshap": [9, 11, 15, 33, 34, 49, 74, 93, 94, 95, 104, 105, 106, 111, 156, 158, 172, 174, 177, 178], "30": [9, 10, 11, 12], "40": [9, 10, 11, 12, 32], "20": [9, 11, 15, 23, 26, 31, 32, 46, 65, 71, 86, 97, 104, 107, 115, 130, 171, 177, 178], "float32": [9, 28, 107, 138, 174], "goal": [9, 174], "produc": [9, 32], "approxim": [9, 10, 49, 52, 66, 68, 79, 81, 82, 176, 179], "abov": [9, 12, 23, 29, 70, 94, 107, 116, 117, 118, 119, 120, 121, 122, 136, 177], "low": [9, 10, 54, 87, 128, 129, 176], "befor": [9, 12, 22, 23, 31, 36, 46, 106, 107, 108, 111, 121, 135, 138, 177, 179], "good": 9, "initi": [9, 11, 29, 49, 50, 52, 53, 54, 55, 66, 67, 68, 69, 70, 72, 77, 78, 82, 83, 84, 85, 87, 89, 90, 106, 111, 121, 130, 138, 174], "guess": 9, "compar": [9, 10, 12, 61, 106, 111, 135], "fair": 9, "idea": [9, 154, 179], "transform": 9, "instanc": [9, 11, 22, 23, 28, 32, 39, 44, 98, 174, 176, 177, 178, 180], "class": [9, 23, 24, 26, 31, 57, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 97, 100, 106, 107, 111, 121, 128, 129, 131, 138, 152, 172], "weights_init": 9, "factors_init": 9, "cp_init": 9, "let": [9, 22, 26, 122, 130, 174, 176, 178, 179], "tic": [9, 10], "tensor_mu": [9, 10], "errors_mu": 9, "return_error": [9, 10, 11, 22, 29, 50, 51, 52, 54, 56, 66, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 86, 87, 173], "cp_reconstruction_mu": 9, "time_mu": [9, 10], "output": [9, 10, 11, 12, 30, 31, 32, 47, 95, 97, 106, 107, 111, 121, 130, 133, 136, 138, 156], "input": [9, 10, 12, 22, 29, 30, 31, 32, 33, 34, 46, 47, 54, 55, 57, 66, 67, 68, 69, 70, 74, 77, 83, 85, 87, 89, 90, 93, 94, 105, 106, 107, 111, 112, 115, 121, 122, 132, 133, 136, 137, 138, 156, 158, 171, 172, 174, 177], "inde": 9, "quit": 9, "coars": 9, "8345": 9, "8209": 9, "69": [9, 13], "8330": 9, "8077": 9, "9185": 9, "9220": 9, "9128": 9, "9086": 9, "8210": 9, "8211": 9, "8230": 9, "8231": 9, "9010": 9, "9011": 9, "9030": 9, "9031": 9, "tensor_h": 9, "errors_h": 9, "cp_reconstruction_h": 9, "time_h": 9, "again": 9, "8208": 9, "8227": 9, "86": 9, "8235": 9, "29": [9, 49], "8245": 9, "33": [9, 75, 92], "9008": 9, "9026": 9, "9034": 9, "75": [9, 49, 52, 66, 68, 82], "9043": 9, "huge": 9, "gap": 9, "solut": [9, 10, 79, 81, 134], "subproblem": 9, "rather": [9, 32, 49], "faster": [9, 10, 49, 106, 111, 135, 154], "note": [9, 12, 21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 44, 46, 47, 49, 52, 53, 54, 56, 57, 59, 62, 63, 66, 68, 70, 74, 81, 82, 84, 87, 93, 104, 105, 106, 107, 111, 121, 122, 130, 133, 134, 135, 136, 138, 139, 144, 145, 147, 154, 156, 158, 167, 168, 169, 170, 173, 176, 177, 179], "overal": 9, "still": [9, 27, 135, 176], "need": [9, 10, 21, 22, 27, 28, 49, 79, 135, 170, 174, 176, 177], "longer": [9, 10, 23, 177], "reach": 9, "subroutin": [9, 81], "simpli": [9, 15, 27, 122, 174, 176], "tensorhals_exact": 9, "errors_exact": 9, "cp_reconstruction_exact_h": 9, "time_exact_h": 9, "str": [9, 10, 29, 46, 50, 52, 53, 56, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 91, 92, 93, 99, 131, 135, 141, 152, 173], "2f": [9, 10], "26": [9, 26], "4192": 9, "take": [9, 22, 108, 130, 143, 154, 156, 174, 176, 177, 178, 180], "much": [9, 10, 32, 81, 162, 169, 177], "gain": 9, "often": [9, 11, 32, 138], "void": 9, "recommend": [9, 10, 23], "avoid": [9, 11, 177], "unless": [9, 31, 121, 138], "applic": [9, 28, 49, 50, 52, 56, 66, 68, 69, 76, 77, 78, 81, 82, 134, 144, 145, 173, 178, 179], "appear": [9, 10, 23], "similar": [9, 10, 11, 57, 108, 122, 134], "runtim": [9, 49], "howev": [9, 10, 11, 28, 31, 106, 107, 111, 121, 122, 138, 174, 177, 178], "closer": 9, "suggest": 9, "behav": [9, 170], "tell": 9, "stori": 9, "better": [9, 10, 22, 28, 32, 135, 138, 177, 178], "root": [9, 10, 110, 136], "rmse": [9, 10], "metric": [9, 10, 175], "233": 9, "04243": 9, "616161": 9, "3015113": 9, "lower": [9, 10, 94, 97, 138], "appreci": [9, 10], "speed": [9, 10, 135, 138], "iter": [9, 10, 11, 29, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 106, 111, 128, 129, 173], "each_iter": [9, 10], "b": [9, 10, 11, 29, 30, 33, 34, 46, 52, 56, 57, 59, 66, 68, 69, 70, 76, 77, 81, 82, 95, 104, 105, 106, 111, 116, 117, 118, 119, 120, 122, 130, 134, 137, 144, 145, 156, 173, 178, 179], "set_size_inch": [9, 10, 12], "get_figheight": [9, 10, 12], "forward": [9, 10, 12, 22, 135], "conclus": [9, 10], "quick": [9, 10, 175], "test": [9, 10, 15, 17, 18, 24, 26, 28, 31, 65, 176, 177, 180], "give": [9, 10, 22, 79, 81, 130, 132, 158, 177], "default": [9, 10, 21, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 42, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 106, 107, 111, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 138, 139, 143, 144, 145, 146, 147, 152, 156, 158, 162, 167, 168, 169, 171, 172, 173, 174, 176], "resort": [9, 10], "encount": [9, 10], "expert": [9, 10], "gilli": [9, 10], "glineur": [9, 10], "2012": [9, 10, 180], "neural": [9, 10], "1085": [9, 10], "1105": [9, 10], "link": [9, 10], "mit": [9, 10], "edu": [9, 10], "neco": [9, 10], "7755": [9, 10], "406": [9, 13], "plot_nn_cp_hal": [9, 13], "e": [10, 21, 22, 27, 28, 31, 54, 60, 62, 64, 69, 74, 77, 85, 87, 88, 90, 93, 100, 115, 134, 143, 144, 168, 171, 174, 176, 177], "min_": [10, 54, 81, 87], "geq": 10, "t_": 10, "g_": 10, "_f": [10, 11], "ith": 10, "mode": [10, 11, 15, 27, 28, 29, 36, 37, 39, 42, 50, 51, 52, 53, 56, 58, 62, 63, 64, 66, 68, 69, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 91, 116, 117, 119, 122, 127, 129, 143, 146, 147, 153, 154, 160, 164, 166, 167, 168, 169, 173, 174, 176, 177, 178, 179], "unfold": [10, 15, 23, 36, 37, 39, 62, 63, 64, 119, 154, 160, 164, 168, 174, 175, 176, 177], "vector": [10, 11, 58, 62, 64, 95, 105, 108, 120, 146, 147, 161, 165, 166, 167, 168, 169, 176, 177, 179, 180], "AS": 10, "fast": [10, 26, 49, 138], "shrinkag": [10, 150], "gradient": [10, 81], "unconstrain": 10, "wide": 10, "lawson": 10, "hanson": 10, "1974": 10, "non_negative_tuck": [10, 176, 179], "non_negative_tucker_h": 10, "randint": 10, "size": [10, 11, 17, 18, 31, 32, 33, 34, 46, 51, 53, 55, 56, 67, 72, 74, 76, 80, 81, 83, 84, 89, 90, 93, 95, 105, 106, 107, 111, 117, 121, 122, 135, 137, 138, 142, 144, 145, 156, 173, 176, 178, 179], "error_mu": 10, "tucker_reconstruction_mu": 10, "ticnew": 10, "tensor_hals_fista": 10, "error_fista": 10, "tucker_reconstruction_fista": 10, "time_fista": 10, "tensor_hals_a": 10, "error_a": 10, "active_set": [10, 81], "tucker_reconstruction_a": 10, "time_a": 10, "nntucker": 10, "glanc": 10, "complex": [10, 30, 47, 95, 105, 122, 133, 135, 136, 146, 147], "284": 10, "8953243197879": 10, "280": 10, "95333597825584": 10, "279": 10, "4017704999264": 10, "besid": [10, 49], "experi": [10, 17, 18, 27], "veri": [10, 28, 57, 174], "207": [10, 13], "plot_nn_tuck": [10, 13], "la": 11, "linear_sum_assign": 11, "inx": 11, "kier": [11, 29, 70], "et": [11, 73, 91], "1999": [11, 29, 70], "mathcal": 11, "mathbb": [11, 178], "j": [11, 17, 18, 29, 47, 58, 70, 75, 81, 92, 95, 104, 136, 144, 146, 156, 166, 178], "shift": 11, "form": [11, 29, 70, 116, 117, 118, 119, 120, 175, 176], "ijk": [11, 29, 70, 116, 117, 118, 119, 120], "sum_": [11, 29, 54, 70, 87, 116, 117, 118, 119, 120, 178, 179], "a_": [11, 29, 54, 70, 87, 116, 117, 118, 119, 120], "ir": [11, 29, 70, 116, 117, 118, 119, 120], "b_": [11, 29, 70, 116, 117, 118, 119, 120], "sigma_i": 11, "c_": [11, 29, 70, 116, 117, 118, 119, 120], "kr": [11, 21, 29, 70, 116, 117, 118, 119, 120], "cyclic": 11, "element": [11, 23, 29, 30, 31, 32, 33, 34, 47, 50, 51, 52, 56, 57, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 86, 97, 104, 105, 106, 107, 111, 116, 117, 118, 119, 120, 121, 124, 130, 132, 133, 135, 136, 138, 150, 156, 170, 173, 178], "true_rank": 11, "noise_r": 11, "seed": [11, 44, 88], "matric": [11, 29, 60, 62, 63, 64, 70, 88, 103, 105, 108, 116, 117, 118, 119, 120, 122, 144, 145, 147, 154, 167, 168, 169, 177, 179], "a_factor_matrix": 11, "uniform": [11, 28, 174], "b_factor_matrix": 11, "c_factor_matrix": 11, "normalis": [11, 60], "a_normalis": 11, "b_normalis": 11, "c_normalis": 11, "b_factor_matric": 11, "roll": 11, "bs_normalis": 11, "construct": [11, 94, 118, 119, 120, 177], "einsum": [11, 28, 95, 105, 144, 154, 156, 176], "ijr": [11, 29, 70, 116, 117, 118, 119, 120], "nois": [11, 29, 70], "standard_norm": 11, "minima": [11, 111], "initialis": 11, "lowest": 11, "best_err": 11, "train": [11, 49, 75, 92, 162, 164, 175, 176], "trial_decomposit": 11, "trial_err": 11, "500": [11, 52, 56, 66, 68, 69, 76, 77, 81, 82, 104, 144, 145, 173, 178, 179], "best": [11, 85, 90, 122, 134, 135, 138], "09204720575424472": 11, "09204726856012718": 11, "09269711804187236": 11, "392": 11, "09204692795621944": 11, "415": 11, "09204692959223097": 11, "09291065541285955": 11, "364": 11, "09204692769766268": 11, "424": 11, "09204692883956121": 11, "481": 11, "09204693125447479": 11, "09205635789758461": 11, "wrapper": [11, 24, 28, 174], "variabl": [11, 12, 21, 22, 23, 81, 134, 177], "somewhat": 11, "b_i": [11, 29, 70, 116, 117, 118, 119, 120], "p_i": [11, 29, 70, 116, 117, 118, 119, 120], "cannot": [11, 22, 29, 46, 50, 52, 66, 68, 69, 70, 77, 78, 82], "store": [11, 12, 30, 47, 97, 105, 115, 133, 136, 171], "instead": [11, 22, 28, 31, 46, 95, 105, 106, 107, 111, 117, 121, 135, 138, 176, 177, 178], "along": [11, 31, 33, 34, 46, 53, 84, 94, 106, 107, 111, 116, 117, 121, 122, 135, 137, 138, 156, 160, 164, 178], "blueprint": 11, "third": [11, 21, 29, 46, 65, 70, 156, 179], "tupl": [11, 30, 31, 33, 34, 36, 37, 40, 43, 47, 74, 88, 93, 104, 106, 107, 111, 114, 121, 123, 124, 125, 126, 127, 130, 132, 133, 136, 138, 153, 154, 158, 171], "extract": [11, 94], "inform": [11, 28, 32, 98, 122, 176, 179], "parafac2_tensor": [11, 176], "apply_projection_matric": 11, "anoth": [11, 12, 22, 28, 32, 61, 108, 177], "frontal": [11, 29, 70, 116, 117, 118, 119, 120, 178], "slice": [11, 29, 70, 106, 111, 116, 117, 118, 119, 120, 154, 178], "likewis": 11, "parafac2_to_tensor": [11, 117], "consist": [11, 23, 31, 135, 136, 156, 178], "uneven": [11, 118, 119, 120], "length": [11, 30, 32, 47, 55, 60, 67, 72, 79, 83, 88, 89, 106, 111, 130, 132, 133, 136, 144, 147, 156, 168, 169], "parafac2_to_slic": 11, "est_tensor": 11, "est_weight": 11, "est_a": 11, "est_b": 11, "est_c": 11, "apply_parafac2_project": 11, "reconstruction_error": 11, "recovery_r": 11, "recov": [11, 179], "congruenc": [11, 108], "est_projected_b": 11, "sign": [11, 47, 121, 138, 150], "ab": [11, 29, 70, 150], "newaxi": [11, 30], "est_a_normalis": 11, "est_bs_normalis": 11, "est_c_normalis": 11, "b_corr": 11, "a_corr": 11, "c_corr": 11, "corr": 11, "old": [11, 122], "maximis": 11, "v1": 11, "pass": [11, 21, 22, 23, 31, 32, 35, 52, 57, 82, 97, 105, 106, 107, 111, 115, 121, 122, 138, 139, 171, 177], "maxim": [11, 33, 54, 87], "congruence_coeffici": 11, "averag": [11, 107, 135, 138], "91": 11, "994704651242361": 11, "estim": [11, 17, 18, 85, 90, 109, 110, 180], "argmax": [11, 34, 106], "what": [11, 21, 27, 46, 94, 122, 137], "flip": 11, "a_sign": 11, "correct": [11, 21, 22, 32, 46, 109, 110, 134, 137, 174], "entir": [11, 35, 139], "get_legend_handles_label": 11, "center": 11, "ncol": 11, "0x7fe9aaa26130": 11, "interest": 11, "loss": [11, 32], "sure": [11, 22], "stationari": 11, "point": [11, 21, 32, 96, 98, 107, 122, 138], "skip": [11, 37, 40, 88, 144, 145, 147, 154, 167, 168, 169], "domin": 11, "rest": [11, 170, 174], "difficult": 11, "loss_fig": 11, "loss_ax": 11, "rel": [11, 29, 52, 66, 68, 69, 70, 77, 82, 135], "mathematical_expression_of_loss": 11, "frac": [11, 108], "hat": [11, 29, 70], "xtick": 11, "get_xtick": 11, "ten": [11, 29, 70], "berg": [11, 29, 70], "jm": 11, "bro": [11, 29, 52, 66, 68, 70, 82], "part": [11, 23, 27, 29, 47, 54, 70, 87, 135], "journal": [11, 26], "chemometr": [11, 29, 52, 66, 68, 70, 82], "societi": 11, "275": [11, 29, 70], "94": 11, "142": [11, 13], "plot_parafac2": [11, 13], "cp_permute_factor": 12, "match": [12, 46, 57, 61, 105, 137, 156, 172], "minim": [12, 26, 61, 174], "cosin": [12, 61, 108], "distanc": [12, 32, 61], "linear": [12, 49, 61, 134, 179], "assign": [12, 24, 61, 130], "simultan": 12, "manual": [12, 28], "50": [12, 49, 104, 106, 111, 170, 177], "cp_tensor_1": 12, "cp_tensor_2": 12, "cp_copi": 12, "cp_tensor_3": 12, "col_order_1": 12, "col_order_2": 12, "manipul": [12, 175], "limit": [12, 21, 98, 135, 138], "won": 12, "equal": [12, 29, 30, 31, 46, 47, 61, 70, 97, 116, 117, 118, 119, 120, 122, 133, 135, 136, 137], "predefin": 12, "subplots_adjust": 12, "hspace": 12, "text": [12, 23, 29, 54, 70, 87, 144, 145, 146, 147, 178], "208": [12, 13], "plot_permute_factor": [12, 13], "71": 13, "615": 13, "auto_examples_decomposit": 13, "usag": [14, 21, 26, 100, 175], "basic": [14, 20, 150, 175, 176], "auto_examples_python": 14, "zip": [14, 170], "auto_examples_jupyt": 14, "assert_array_equ": 15, "ndim": [15, 37, 39, 42, 51, 53, 56, 74, 76, 80, 81, 84, 93, 104, 106, 111, 143, 147, 154, 158, 167, 168, 169, 173], "re": [15, 33, 34, 37, 46, 154, 159, 163], "fold": [15, 21, 37, 43, 175, 176], "007": [15, 20], "plot_tensor": [15, 20], "cp_regress": 17, "cpregressor": 17, "tensor_to_vec": [17, 18, 169], "partial_tensor_to_vec": [17, 18], "synthet": [17, 18, 28], "gen_imag": [17, 18], "image_height": [17, 18, 65], "image_width": [17, 18, 65], "rectangl": [17, 18, 65], "swiss": [17, 18, 65, 179], "circl": [17, 18], "rng": [17, 18], "check_random_st": [17, 18], "deduc": [17, 18], "n_row": [17, 18, 144, 145], "n_column": [17, 18, 144, 145], "weight_img": [17, 18], "region": [17, 18, 65], "y": [17, 18, 47, 57, 105, 122, 128, 129, 132, 133, 136, 170, 171, 172, 180], "dot": [17, 18, 63, 105, 122, 134, 154, 156, 169, 176], "skip_begin": [17, 18, 37, 38, 39, 40], "orrd": [17, 18], "interpol": [17, 18], "nearest": [17, 18], "nweight": [17, 18], "regressor": [17, 18], "weight_rank": [17, 18, 128, 129], "reg_w": [17, 18, 128, 129], "verbos": [17, 18, 29, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 128, 129, 173], "fit": [17, 18, 22, 29, 70, 71, 86, 128, 129, 174, 176, 180], "weight_tensor_": [17, 18], "nrank": [17, 18], "suptitl": [17, 18], "316": [17, 19], "plot_cp_regress": [17, 19], "tucker_regress": 18, "tuckerregressor": 18, "391": [18, 19], "plot_tucker_regress": [18, 19], "707": 19, "auto_examples_regress": 19, "auto_exampl": 20, "switch": [21, 28, 135, 176], "thread": [21, 35, 131, 139, 152], "current": [21, 28, 52, 66, 68, 69, 77, 79, 82, 99, 122, 135, 141, 174, 176, 177], "being": [21, 32, 135, 177], "get_backend": [21, 22], "global": [21, 35, 44, 52, 66, 68, 82, 139], "set_backend": [21, 35, 139, 174, 176], "enabl": [21, 26, 28], "parti": 21, "packag": [21, 27, 177], "dask": 21, "parallel": 21, "over": [21, 28, 29, 30, 31, 47, 62, 70, 95, 105, 106, 107, 111, 121, 122, 133, 136, 138, 147, 156, 179], "inherit": 21, "spawn": 21, "typic": [21, 23], "main": [21, 49, 94, 97, 174], "context": [21, 24, 35, 123, 124, 125, 126, 127, 139, 175], "manag": [21, 35, 139], "backend_context": 21, "whcih": 21, "safe": [21, 46, 177], "approach": [21, 138], "librari": [21, 23, 28, 174], "matter": 21, "transpos": [21, 112, 122, 130, 146, 147, 154, 167, 168, 169, 176], "clip": [21, 69, 77], "etc": [21, 22, 28, 135, 174, 176], "staticmethod": 21, "common": [21, 104, 122, 133, 136, 156, 176], "api": [21, 26, 135, 174, 176], "some": [21, 23, 28, 29, 32, 70, 122, 170, 177, 179], "kron": 21, "subclass": [21, 122, 170], "logic": [21, 31], "__init__": [21, 174], "cach": 21, "maintain": [21, 26, 122], "_loaded_backend": 21, "actual": [21, 32, 74, 93, 135, 177], "modul": [21, 24, 28, 46, 174, 176, 180], "_backend": 21, "importlib": 21, "register_backend": 21, "onc": [21, 26, 174], "grab": 21, "intern": [21, 32, 50, 78], "_state": 21, "storag": [21, 179], "farm": 21, "out": [21, 22, 30, 31, 32, 33, 34, 46, 47, 94, 95, 104, 105, 106, 107, 111, 115, 121, 122, 133, 136, 137, 138, 170, 171, 172], "mechan": 21, "wrap": [21, 22], "docstr": [21, 22, 24], "minutia": 21, "themselv": 21, "certain": 21, "properti": [21, 122, 135, 174], "descriptor": 21, "int32": [21, 32, 138], "tf": 21, "compat": [21, 24, 27, 32, 97, 115, 122, 130, 135, 171], "varaibl": 21, "override_module_dispatch": 21, "done": [21, 27, 154, 174, 178], "_getattr__": 21, "__dir__": 21, "pep": [21, 105], "562": 21, "overwrit": 21, "sy": 21, "module_nam": 21, "__class__": 21, "custom": [21, 171], "moduletyp": 21, "overrridden": 21, "__getitem__": 21, "welcom": 22, "cool": 22, "spot": 22, "bug": 22, "even": [22, 28, 121, 135, 177], "typo": 22, "mistak": 22, "document": [22, 24, 26, 94, 134, 158, 170], "pleas": [22, 26, 106, 111, 180], "report": 22, "open": [22, 26, 32], "pull": 22, "request": 22, "relev": 22, "issu": [22, 26, 32, 107], "talk": 22, "gitter": 22, "fix": [22, 28, 50, 52, 56, 60, 62, 63, 64, 66, 68, 69, 76, 77, 78, 79, 82, 173, 178], "repositori": 22, "help": 22, "unit": [22, 60], "especi": [22, 107, 138, 174], "refactor": 22, "exis": 22, "broken": 22, "submit": 22, "your": [22, 23, 26, 27, 28, 74, 93, 174, 176], "adher": 22, "guid": [22, 26], "easiest": 22, "black": 22, "pip": 22, "instal": [22, 26, 174], "exist": [22, 46, 135, 137], "don": [22, 106, 111], "hesit": 22, "contact": 22, "unsur": 22, "transpar": [22, 28, 174, 176], "never": 22, "directli": [22, 27, 28, 49, 52, 82, 88, 138, 144, 170], "torch": [22, 26, 176], "tensordot": [22, 95, 105], "doesn": [22, 49], "try": [22, 172], "ones": [22, 29, 52, 66, 68, 70, 82, 97, 104, 105, 138, 158, 171, 172, 176, 177, 179], "otherwis": [22, 29, 33, 34, 52, 57, 66, 68, 70, 74, 76, 82, 93, 95, 107, 123, 124, 125, 126, 127, 130, 143, 170, 172], "statement": 22, "min_valu": [22, 174], "NOT": 22, "reason": 22, "restrict": 22, "might": [22, 32, 117, 174, 176], "ndarrai": [22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 64, 65, 66, 68, 69, 71, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 94, 95, 97, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 149, 150, 151, 156, 158, 159, 163, 166, 170, 171, 172, 173, 174], "fail": [22, 122, 136], "aspect": 22, "new_tensor": [22, 174], "express": [22, 29, 70, 116, 117, 118, 119, 120, 154, 178, 179], "unfortun": 22, "index_upd": [22, 28, 100], "previou": [22, 52, 66, 68, 69, 77, 79, 82, 122, 135], "becom": [22, 35, 62, 81, 138, 139], "becaus": [22, 29, 31, 32, 122, 176, 177], "orient": 22, "automat": [22, 23, 135, 177], "util": [22, 26, 28, 176], "assert_class_wrapper_correctly_passes_argu": 22, "keyword": [22, 30, 47, 105, 107, 130, 133, 135, 136, 158], "argument": [22, 30, 32, 46, 47, 57, 95, 97, 105, 106, 107, 111, 115, 133, 135, 136, 137, 156, 158, 170, 171, 174], "test_cp": 22, "monkeypatch": 22, "ignore_arg": 22, "except": [22, 31, 32, 46, 65, 95, 97, 106, 107, 111, 121, 122, 135, 138, 179], "notic": [22, 23, 106, 111], "pytest": [22, 27], "know": 22, "plan": 22, "purpos": [22, 28], "essenti": 22, "behind": 22, "scene": 22, "inspect": 22, "down": 22, "Then": [22, 27, 81, 144, 145], "mock": 22, "word": [22, 32, 36, 174], "temporarili": 22, "replac": 22, "assert": 22, "everi": [22, 138, 144, 145], "placehold": 22, "send": [22, 174], "reset": 22, "behaviour": [22, 32, 135], "crutial": 23, "cover": [23, 135, 170], "syntax": 23, "restructuredtext": 23, "rst": 23, "come": [23, 27, 135], "style": [23, 24, 97, 115, 171], "arg": 23, "descript": [23, 176], "possibli": 23, "space": [23, 32, 135], "colon": 23, "explan": [23, 122, 180], "singl": [23, 29, 31, 70, 85, 90, 106, 107, 111, 116, 121, 135, 138, 156], "backtick": 23, "doubl": [23, 122, 156], "inlin": 23, "block": [23, 46, 104, 137], "leav": [23, 37, 38, 39, 40], "white": 23, "indent": 23, "said": [23, 178], "mod": 23, "algebra": [23, 26, 134, 175], "func": 23, "hierarchi": 23, "determin": [23, 106, 111, 122, 134, 135], "tabl": 23, "content": 23, "rubric": 23, "locat": [23, 30, 47, 105, 133, 136, 176], "everytim": 23, "short": [23, 27, 174, 176], "plot_xyz": 23, "remaind": 23, "comment": 23, "below": [23, 29, 32, 94, 107], "displai": 23, "myvari": 23, "my": 23, "section": [23, 32], "header": 23, "render": 23, "begin": [23, 37, 38, 39, 40, 54, 87, 178], "underlin": 23, "emb": 23, "symbol": 23, "splitter": 23, "guidelin": 24, "practic": [24, 49, 71, 86, 122, 174], "index": [24, 33, 34, 37, 39, 42, 73, 88, 91, 97, 101, 105, 130, 137, 144, 145, 147, 154, 167, 168, 169, 178], "interfac": [24, 122, 174, 177], "dispatch": [24, 28, 176], "simpl": 26, "bsd": 26, "licens": 26, "pure": 26, "apach": 26, "thorough": 26, "discov": 26, "easili": [26, 28, 174, 176, 179], "advanc": [26, 28, 176], "anywher": 26, "multi": [26, 28, 52, 66, 68, 82, 115, 171, 174, 178], "machin": [26, 29, 50, 70, 78, 96, 98, 176], "speedup": 26, "extens": 26, "Its": [26, 56, 76, 134, 173], "suitabl": 26, "industri": [26, 52, 66, 68, 82], "academia": 26, "lab": 26, "around": 26, "world": 26, "instruct": [26, 174], "friendli": 26, "meet": 26, "team": 26, "consid": [26, 29, 52, 66, 68, 69, 70, 77, 82], "cite": 26, "year": [26, 27], "2019": 26, "volum": [26, 49], "v20": 26, "277": 26, "html": [26, 27], "emsp": 26, "author": 26, "bibtex": 26, "python3": 27, "python2": 27, "probabl": 27, "upgrad": 27, "pain": 27, "free": [27, 29, 70], "anaconda": 27, "distribiut": 27, "ship": 27, "termin": [27, 52, 66, 68, 69, 77, 79, 82], "channel": 27, "And": 27, "cd": 27, "git": 27, "edit": 27, "equival": [27, 31, 32, 57, 62, 95, 97, 101, 121, 130, 132, 133, 134, 138, 154, 156, 158, 169, 170, 179], "uni": 27, "vital": 27, "slimit": 27, "minifi": 27, "rcssmin": 27, "build": 27, "doc": [27, 30, 47, 105, 133, 136], "_build": 27, "answer": [27, 122], "2018": 27, "releas": 27, "ago": 27, "break": [27, 135], "lot": 27, "thing": 27, "quot": 27, "wiki": [27, 122], "legaci": 27, "languag": 27, "strengh": 28, "weak": 28, "loos": 28, "popular": 28, "complet": [28, 122, 176], "thin": 28, "known": [28, 75, 92, 159, 177, 179], "product": [28, 29, 58, 62, 63, 64, 70, 88, 95, 104, 105, 108, 116, 117, 118, 119, 120, 121, 140, 143, 144, 145, 146, 147, 148, 154, 156, 163, 166, 175, 176], "state": [28, 163, 175], "whose": [28, 29, 70, 97, 107, 112, 116, 117, 118, 119, 120, 136, 159, 163], "evolv": [28, 29, 70, 116, 117, 118, 119, 120], "khatri": [28, 59, 62, 63, 64, 88, 144, 154], "rao": [28, 59, 88, 144, 154], "kroneck": [28, 104, 144, 154, 169, 176], "own": 28, "candecomp": [28, 52, 66, 68, 69, 77, 82, 175], "quickli": [28, 176], "necessarili": 28, "tensor_slic": [29, 70], "2000": [29, 70], "svd": [29, 49, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 91, 92, 93, 149, 150, 173, 177, 179], "truncated_svd": [29, 50, 52, 53, 56, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 91, 92, 93, 173, 174], "normalize_factor": [29, 50, 51, 52, 66, 68, 70, 78, 79, 80, 81, 82], "absolute_tol": [29, 70], "nn_mode": [29, 68, 70, 79], "n_iter_parafac": [29, 70], "th": [29, 56, 70, 76, 94, 97, 116, 117, 118, 119, 120, 144, 158, 173], "x_i": [29, 70, 116, 117, 118, 119, 120, 180], "diag": [29, 70, 97, 116, 117, 118, 119, 120], "a_i": [29, 70, 116, 117, 118, 119, 120], "diagon": [29, 70, 94, 97, 116, 117, 118, 119, 120, 179], "row": [29, 46, 70, 88, 97, 115, 116, 117, 118, 119, 120, 134, 144, 171], "j_i": [29, 54, 70, 87, 116, 117, 118, 119, 120], "cross": [29, 49, 70, 116, 117, 118, 119, 120, 176, 179], "i_1": [29, 41, 43, 58, 70, 116, 117, 118, 119, 120, 146, 166, 178, 179], "constant": [29, 60, 70, 116, 117, 118, 119, 120, 124], "reformul": [29, 70, 116, 117, 118, 119, 120], "orthogon": [29, 53, 56, 70, 76, 84, 116, 117, 118, 119, 120, 122, 123, 127, 173], "formul": [29, 70, 116, 117, 118, 119, 120], "x_": [29, 70, 116, 117, 118, 119, 120, 178], "hold": [29, 60, 70, 116, 117, 118, 119, 120], "int": [29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 106, 107, 111, 112, 114, 115, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 135, 137, 138, 142, 143, 144, 145, 146, 147, 153, 154, 156, 158, 160, 162, 164, 166, 167, 168, 169, 171, 172, 173], "previous": [29, 57, 70, 178, 179], "parafac2tensor": [29, 70, 116, 117, 118, 119, 120], "initialize_factor": [29, 52, 66, 68, 69, 70, 77, 82], "accept": [29, 50, 52, 53, 56, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 91, 92, 93, 173], "svd_fun": [29, 50, 52, 53, 56, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 91, 92, 93, 173], "aggreg": [29, 50, 51, 52, 66, 68, 70, 78, 79, 80, 81, 82], "1d": [29, 41, 43, 50, 52, 58, 66, 68, 69, 70, 77, 78, 79, 82, 116, 117, 118, 119, 120, 128, 144, 146, 166, 169], "inaccuraci": [29, 70], "toler": [29, 50, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 173], "epsilon": [29, 70, 96], "That": [29, 70, 121, 179], "less": [29, 49, 50, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 121, 135, 138, 173], "stop": [29, 30, 32, 50, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 81, 82, 84, 86, 173], "condit": [29, 30, 47, 70, 74, 93, 95, 125, 126, 133, 136, 170], "tolearnc": [29, 70], "epsilon_": [29, 70], "necessari": [29, 70, 104, 107, 121, 122, 138, 174, 177], "warn": [29, 32, 70], "shown": [29, 70], "info": [29, 70], "randomst": [29, 44, 49, 50, 51, 52, 53, 56, 66, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 84, 86, 88, 123, 124, 125, 126, 127, 128, 129, 173], "projection_matric": [29, 70, 116, 117, 118, 119, 120], "slightli": [29, 70], "li": [29, 70], "wherea": [29, 70], "nd": [29, 52, 66, 68, 70, 82, 123, 125, 126, 127, 137, 142], "reorder": [29, 70, 112], "consequ": [29, 135], "unlik": [29, 106, 111], "l": [29, 70, 114], "294": [29, 70], "cast": [30, 32, 46, 47, 105, 107, 121, 133, 136, 138], "same_kind": [30, 46, 47, 105, 133, 136], "subok": [30, 47, 57, 105, 133, 136, 172], "extobj": [30, 47, 105, 133, 136], "wise": [30, 46, 47, 79, 106, 111, 133, 136, 144], "shorthand": [30, 105, 170], "array_lik": [30, 31, 32, 33, 34, 46, 47, 57, 94, 95, 97, 104, 105, 106, 107, 111, 115, 121, 122, 130, 132, 133, 134, 135, 136, 137, 138, 156, 158, 170, 171, 172], "broadcast": [30, 31, 33, 34, 47, 62, 105, 106, 107, 111, 121, 133, 134, 136, 138, 170], "freshli": [30, 47, 105, 133, 136], "alloc": [30, 47, 105, 133, 136], "At": [30, 47, 133, 136], "ufunc": [30, 31, 47, 105, 106, 107, 111, 121, 133, 136, 138], "elsewher": [30, 47, 97, 133, 136, 170], "uniniti": [30, 47, 115, 133, 136, 171], "within": [30, 32, 47, 57, 133, 136], "remain": [30, 47, 112, 130, 133, 136], "kwarg": [30, 47, 105, 128, 129, 133, 136, 155], "ib": 30, "sqrt": [30, 133], "scalar": [30, 47, 95, 105, 106, 111, 121, 133, 134, 136, 138, 156], "1j": [30, 47], "5620499351813308": 30, "linspac": [30, 32], "num": 30, "101": 30, "plane": [30, 136], "xx": 30, "extent": 30, "grai": 30, "keepdim": [31, 33, 34, 106, 107, 111, 121, 138], "AND": 31, "count": [31, 121, 138], "place": [31, 46, 106, 107, 111, 121, 130, 135, 137, 138], "preserv": [31, 46, 122], "correctli": [31, 33, 34, 106, 107, 111, 121, 138, 170], "against": [31, 33, 34, 106, 107, 111, 121, 138, 177], "sub": [31, 46, 57, 106, 107, 111, 121, 137, 138, 172, 177, 179], "rais": [31, 95, 105, 106, 107, 111, 121, 122, 130, 134, 138, 177], "Not": 31, "nan": [31, 106, 111, 121, 133, 135, 136, 138], "infin": 31, "zero": [31, 52, 54, 65, 66, 68, 71, 82, 86, 87, 97, 107, 112, 115, 118, 119, 120, 130, 138, 144, 156, 172, 178, 179], "o": [31, 49, 135], "id": [31, 179], "28293632": 31, "vari": [31, 32, 60, 62, 64, 107, 117, 121, 135, 138], "step": [32, 71, 86, 138], "evenli": 32, "interv": [32, 136], "half": 32, "exclud": 32, "roughli": 32, "real": [32, 122, 133, 135, 136, 179], "end": [32, 37, 38, 39, 40, 49, 54, 87, 135, 174, 178], "round": [32, 138, 179], "off": 32, "adjac": 32, "creation": [32, 97, 115, 171, 174], "__array_function__": [32, 97, 115, 171], "protocol": [32, 97, 115, 171], "overflow": [32, 121, 138], "rule": [32, 105, 134, 138], "greater": [32, 122], "numer": [32, 138, 174, 179], "stabl": [32, 135], "stabil": 32, "due": [32, 50, 52, 66, 68, 69, 77, 78, 82, 179], "larger": 32, "lead": [32, 57, 138], "unexpect": 32, "arbitrari": [32, 95, 105], "int64": 32, "incorrect": 32, "power": [32, 55, 67, 72, 83, 85, 89, 90, 179], "modulo": 32, "10000": 32, "x1": [32, 105, 134], "x2": [32, 105], "7776": 32, "8801": 32, "6176": 32, "625": 32, "6576": 32, "4001": 32, "7185": 32, "5969": 32, "4816": 32, "3361": 32, "care": [32, 177], "endpoint": 32, "ogrid": [32, 170], "mgrid": 32, "grid": 32, "insert": [33, 34, 130], "appropri": [33, 34, 177], "index_arrai": [33, 34], "remov": [33, 34, 52, 66, 68, 82, 105, 121, 138], "argmin": [33, 111], "unravel_index": [33, 34], "flat": [33, 34], "take_along_axi": [33, 34], "expand_dim": [33, 34], "occurr": [33, 34], "ind": [33, 34], "squeez": [33, 34], "minimum": [34, 52, 66, 68, 69, 77, 82, 106, 111], "amin": [34, 106, 111], "local_threadsaf": [35, 131, 139, 152], "hasn": [35, 139], "explicitli": [35, 104, 139], "session": [35, 139], "unfolded_tensor": [36, 42], "refold": [36, 40, 62, 176], "folded_tensor": 36, "skip_end": [37, 38, 39, 40], "partial": [37, 38, 39, 40, 49, 53, 84, 135, 138], "untouch": [37, 38, 39, 40], "vectoris": [38, 40, 41, 43, 64, 169], "ignor": [38, 39, 76, 106, 111, 150], "ravel_tensor": 39, "n_sampl": [39, 54, 71, 86, 87, 88, 109, 110, 128, 129, 140, 142], "n_1": 39, "n_2": 39, "n_i": [39, 88, 144], "i_n": [41, 43, 58, 146, 166, 178], "i_2": [41, 43, 178, 179], "vec": [43, 147], "ful": 43, "valid": [44, 56, 76, 116, 117, 173], "inspir": 44, "scikit": [44, 176, 177, 180], "eponym": 44, "a_min": 45, "a_max": 45, "a1": 46, "a2": 46, "join": [46, 137, 154], "destin": [46, 112, 137], "togeth": [46, 105, 170], "equiv": 46, "unsaf": 46, "control": [46, 57], "kind": [46, 95, 98, 130, 135], "ma": 46, "array_split": 46, "split": [46, 137, 179], "hsplit": 46, "horizont": 46, "vsplit": 46, "vertic": 46, "dsplit": 46, "3rd": 46, "stack": [46, 105, 122, 154], "assembl": [46, 137, 159, 163], "hstack": 46, "vstack": 46, "dstack": 46, "column_stack": 46, "maskedarrai": 46, "masked_arrai": 46, "fill_valu": [46, 177], "999999": 46, "conjug": [47, 95, 105, 146, 147], "imaginari": [47, 135], "alia": [47, 122], "2j": [47, 95, 105, 133], "ey": [47, 104, 132], "input_tensor": [49, 73, 75, 91, 92], "0001": [49, 51, 53, 54, 56, 76, 80, 84, 87, 173], "ttcross": 49, "whole": [49, 150], "fiber": 49, "skeleton": 49, "sweep": 49, "submatrix": 49, "advantag": [49, 156, 177, 179], "tensor_shap": [49, 63], "tensor_ord": 49, "feasibl": 49, "disadvantag": 49, "accur": [49, 107], "underestim": 49, "contrast": [49, 138], "theoret": 49, "guarante": [49, 130, 179], "kth": [49, 73, 75, 91, 92], "outer": [49, 62, 69, 77, 104, 140, 179], "loop": [49, 69, 77], "pseudo": 49, "qr": 49, "maxvol": 49, "acknowledg": 49, "bodi": 49, "modifi": [49, 50, 52, 57, 66, 68, 69, 77, 78, 82, 130, 158], "tensortoolbox": 49, "daniel": 49, "bigoni": 49, "ivan": [49, 75, 92], "oseledet": [49, 75, 92], "eugen": 49, "tyrtyshnikov": 49, "multidimension": [49, 170], "linearalgebra": 49, "432": 49, "70": [49, 104, 170], "2010": 49, "sergei": 49, "dolgov": 49, "robert": 49, "scheichl": 49, "hybrid": 49, "parametricpd": 49, "arxiv": [49, 73, 91], "preprint": [49, 73, 91], "1707": 49, "04562": 49, "2017": 49, "49": 49, "74": 49, "124": 49, "cvg_criterion": [50, 52, 66, 68, 69, 77, 78, 79, 82], "abs_rec_error": [50, 52, 66, 68, 69, 77, 78, 79, 82], "fixed_mod": [50, 52, 66, 68, 69, 77, 78, 79, 81, 82], "variat": [50, 53, 56, 71, 76, 78, 79, 81, 84, 86, 173], "amnon": [50, 78], "shashua": [50, 78], "tamir": [50, 78], "hazan": [50, 78], "statist": [50, 78], "vision": [50, 51, 78, 80], "proceed": [50, 78], "confer": [50, 51, 78, 80], "icml": [50, 78], "pp": [50, 51, 52, 56, 66, 68, 69, 76, 77, 78, 80, 81, 82, 144, 145, 173, 178, 179, 180], "792": [50, 78], "799": [50, 78], "2005": [50, 52, 66, 68, 78, 82], "yong": [51, 80], "deok": [51, 80], "kim": [51, 80], "seungjin": [51, 80], "choi": [51, 80], "recognit": [51, 80], "cvpr": [51, 80], "2007": [51, 80], "svd_mask_repeat": [52, 53, 66, 68, 82, 84], "callback": [52, 66, 71, 82, 86], "everywher": [52, 53, 54, 56, 66, 68, 82, 84, 87, 173, 179], "fill": [52, 53, 56, 66, 68, 82, 84, 101, 115, 171, 172, 173], "rec_error": [52, 54, 66, 68, 69, 77, 79, 82, 87], "criterion": [52, 66, 68, 69, 77, 79, 82], "low_rank_compon": [52, 66, 68, 82], "sparse_compon": [52, 66, 68, 82], "denot": [52, 66, 68, 82, 178], "fraction": [52, 66, 68, 82], "kolda": [52, 56, 66, 68, 69, 71, 76, 77, 81, 82, 86, 144, 145, 173, 178, 179], "w": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179, 180], "bader": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "siam": [52, 56, 66, 68, 69, 75, 76, 77, 81, 82, 92, 144, 145, 173, 178, 179], "review": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "vol": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "455": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "2009": [52, 56, 66, 68, 69, 76, 77, 81, 82, 144, 145, 173, 178, 179], "tomasi": [52, 66, 68, 82], "giorgio": [52, 66, 68, 82], "rasmu": [52, 66, 68, 82], "intellig": [52, 66, 68, 82], "laboratori": [52, 66, 68, 82], "163": [52, 66, 68, 82], "180": [52, 66, 68, 82], "food": [52, 66, 68, 82], "phd": [52, 66, 68, 82], "amsterdam": [52, 66, 68, 82], "1998": [52, 66, 68, 82], "hoi": [53, 56, 76, 84, 173], "exclus": [53, 84], "tuckertensor": [53, 84, 166, 167, 168, 169], "reg_": [54, 87], "reg_j": [54, 87], "mu_init": [54, 87], "mu_max": [54, 87], "10000000000": [54, 87], "learning_r": [54, 87], "pca": [54, 87], "alm": [54, 87], "n1": [54, 87, 128, 129], "regularis": [54, 87, 110, 128, 129], "10e9": [54, 87], "percentag": [54, 87], "tild": [54, 87, 178, 180], "equat": [54, 87, 122, 134], "align": [54, 87], "reg": [54, 87], "_j": [54, 87], "_e": [54, 87], "_1": [54, 87, 108], "cdot": [54, 87, 144, 145, 147, 156, 178, 179, 180], "n_repeat": [55, 67, 72, 83, 85, 89, 90], "n_iter": [55, 67, 72, 83, 85, 89, 90], "symmetr": [55, 60, 72, 89, 90], "tri": [55, 67, 72, 83, 85, 89, 90], "eigenvalu": [55, 60, 67, 72, 83, 85, 89, 90], "eigenvector": [55, 67, 72, 83, 85, 89, 90], "fixed_factor": [56, 76, 173], "keep": [56, 76, 79, 135, 162, 172, 173, 174], "memori": [57, 97, 115, 130, 138, 154, 171, 172, 177], "layout": [57, 130, 172], "fortran": [57, 97, 115, 122, 130, 171, 172], "contigu": [57, 95, 130, 172], "close": [57, 172], "forc": 57, "arr": 57, "interpret": 57, "writeabl": 57, "flag": 57, "shallow": 57, "mainli": 57, "surpris": 57, "mutabl": 57, "matrix_or_vector": [58, 146, 166], "keep_dim": [58, 166], "2d": [58, 123, 127, 142, 144, 146, 166, 167, 168], "i_k": [58, 144, 145, 146, 166, 178], "i_": [58, 146, 166, 178], "kruskal_multi_mode_dot": 58, "chain": [58, 95, 146, 166], "mode_dot": [58, 147, 166], "khatria": 59, "turn": [60, 62, 63, 64], "u_1": [60, 62, 63, 64, 144, 145], "u_n": [60, 62, 63, 64, 144, 145], "v_1": 60, "v_n": 60, "v_k": 60, "euclidean": 60, "u_k": [60, 63, 144, 145], "absorb": 60, "special": 60, "s_i": [60, 62, 64], "normalisation_weight": 60, "normalised_factor": 60, "ref_cp_tensor": 61, "tensors_to_permut": 61, "serv": 61, "permuted_tensor": 61, "lenght": 61, "factor_matric": [62, 63], "ie": 63, "s_u_i": 63, "exploit": 63, "khatri_rao": [63, 154], "ravel": [64, 130, 144], "n_channel": 65, "weight_valu": 65, "sparsity_coeffici": [68, 79, 81], "exact": [68, 79, 81, 95, 134, 138], "n_iter_max_inn": [69, 77], "tol_out": [69, 77], "tol_inn": [69, 77], "factor_aux": [69, 77], "inner": [69, 77, 95, 105], "dure": [69, 77, 174], "seper": [69, 77], "divid": [69, 77, 107], "distrbut": [69, 77], "self": [70, 128, 129], "max_stagn": [71, 86], "randomis": [71, 86], "casei": [71, 86], "battaglino": [71, 86], "grei": [71, 86], "ballard": [71, 86], "tamara": [71, 86], "ring": [73, 91, 162], "recurs": [73, 75, 91, 92], "union": [73, 91], "tr": [73, 91], "qibin": [73, 91], "zhao": [73, 91], "1606": [73, 91], "05535": [73, 91], "tensorized_shap": [74, 93], "rank_2": [74, 93], "boundari": [74, 93, 125, 126, 162], "dictat": [74, 93], "tt_matrix": [74, 93, 176], "v": [75, 79, 81, 92, 94, 108, 174, 177], "scientif": [75, 92], "2295": [75, 92], "2317": [75, 92], "2011": [75, 92], "hal": [79, 81], "r2e3307d426a": 79, "success": [79, 81], "core_sparsity_coeffici": 81, "fista": 81, "nnl": 81, "tensor_i": 81, "core_i": 81, "prod_": [81, 144, 145, 178], "neq": [81, 178], "delta": 81, "tm": 81, "tu": 81, "utu": 81, "utm": 81, "corecross": 81, "tensorcross": 81, "corecross_j": 81, "core_j": 81, "tensorcross_j": 81, "eigenv": [85, 90], "best_factor": [85, 90], "deflat": [85, 90], "skip_matrix": [88, 144, 145, 154], "indices_list": 88, "return_sampled_row": 88, "subsampl": 88, "taken": [88, 107], "random_sampl": 88, "returned_sampled_row": 88, "sampled_khatri_rao": 88, "matricis": 88, "indices_kr": 88, "view": [94, 112, 130, 158, 178], "question": 94, "diagflat": 94, "trace": 94, "triu": 94, "triangl": 94, "tril": 94, "matmul": [95, 122], "featur": [95, 175, 179], "met": 95, "valueerror": [95, 105], "vdot": [95, 105], "einstein": [95, 105], "summat": [95, 105, 138], "convent": [95, 105, 136], "multi_dot": 95, "neither": [95, 105, 174], "3j": [95, 105], "0j": [95, 105, 133], "499128": 95, "ident": [97, 134, 135], "almost": [97, 135, 179], "intput": 101, "composit": [104, 138], "prepend": [104, 105], "smallest": 104, "r0": 104, "r1": 104, "rn": 104, "s0": 104, "s1": 104, "sn": 104, "k0": 104, "k1": [104, 140, 148], "kn": 104, "i0": 104, "i1": [104, 179], "iN": 104, "j0": 104, "j1": [104, 140, 148], "jn": [104, 140, 148], "kt": 104, "st": 104, "jt": 104, "visual": 104, "600": 104, "700": 104, "extend": [104, 135, 156], "treat": 105, "resid": 105, "accordingli": 105, "append": [105, 154], "semant": 105, "465": 105, "mix": 105, "usual": [105, 177], "98": 105, "traceback": [105, 130], "recent": [105, 130], "operand": 105, "buffer": [106, 111], "empti": [106, 111, 115, 121, 138, 171, 172], "propag": [106, 111], "nanmax": [106, 111], "fmax": [106, 111], "nanmin": [106, 111], "fmin": [106, 111], "item": [106, 111, 135], "matlab": [106, 111], "maxima": 106, "isnan": [106, 111], "arithmet": [107, 121, 138], "intermedi": [107, 177], "std": 107, "var": 107, "nanmean": 107, "nanstd": 107, "nanvar": 107, "inaccur": 107, "accumul": [107, 121, 138, 144], "allevi": 107, "float16": 107, "extra": 107, "512": 107, "54999924": 107, "55000000074505806": 107, "matrix1": [108, 176], "matrix2": [108, 176], "absolute_valu": 108, "mathbf": [108, 178], "_2": 108, "y_true": [109, 110], "y_pred": [109, 110], "ground": [109, 110], "truth": [109, 110], "target": [109, 110], "mean_squared_error": 110, "isn": 111, "move": 112, "These": [112, 176], "uniqu": 112, "swapax": 112, "interchang": 112, "int8": [115, 121, 138, 171], "ones_lik": [115, 172], "slice_idx": 116, "describ": [116, 117, 118, 119, 120], "pad": [118, 119, 120, 162], "platform": [121, 138], "unsign": [121, 138], "product_along_axi": 121, "modular": [121, 138], "bit": 121, "536870910": 121, "neutral": [121, 138], "But": 121, "Or": [121, 156], "uint": 121, "q": 122, "orthonorm": 122, "triangular": 122, "raw": 122, "tau": 122, "backward": [122, 135], "earlier": [122, 176], "omit": [122, 170], "econom": 122, "deprec": 122, "letter": 122, "spell": 122, "unitari": 122, "cdoubl": 122, "household": 122, "reflector": 122, "linalgerror": [122, 134], "rq": 122, "lapack": [122, 134], "routin": [122, 134], "dgeqrf": 122, "zgeqrf": 122, "dorgqr": 122, "zungqr": 122, "en": 122, "wikipedia": 122, "qr_factor": 122, "too": [122, 138, 156, 170, 177], "addit": [122, 177], "expos": 122, "lapack_lit": 122, "await": 122, "randn": [122, 137], "allclos": [122, 134], "r2": 122, "illustr": 122, "y0": 122, "mx": 122, "graph": 122, "ll": 122, "gram": 122, "schmidt": 122, "inv": 122, "lstsq": [122, 134], "normalise_factor": [123, 124], "dict": [123, 125, 126, 174], "mp": [125, 163], "verifi": [125, 126], "tt_tensor": [125, 126, 176], "3d": [125, 126, 160, 161, 163, 164, 165], "tucker_tensor": [127, 176], "associ": [128, 129, 174], "get_param": [128, 129], "set_param": [128, 129], "newshap": 130, "read": [130, 178], "fastest": 130, "slowest": 130, "account": 130, "reshaped_arrai": 130, "attribut": [130, 172], "attributeerror": 130, "incompat": 130, "modif": 130, "fetch": 130, "sai": 130, "think": 130, "unspecifi": [130, 135], "i4": [132, 135, 171], "definit": 133, "ordin": 134, "singular": [134, 151, 177, 179], "_gesv": 134, "linearli": 134, "independ": 134, "strang": 134, "2nd": 134, "ed": 134, "orlando": 134, "fl": 134, "academ": 134, "press": 134, "inc": 134, "1980": 134, "pg": 134, "x0": 134, "quicksort": 135, "mergesort": 135, "heapsort": 135, "timsort": 135, "radix": 135, "under": [135, 174], "field": 135, "string": 135, "up": [135, 177], "ti": 135, "sorted_arrai": 135, "argsort": [135, 158], "indirect": 135, "lexsort": 135, "searchsort": 135, "partit": 135, "character": 135, "worst": 135, "four": 135, "log": 135, "ye": 135, "datatyp": 135, "finer": 135, "temporari": 135, "lexicograph": 135, "led": 135, "undefin": 135, "rj": 135, "nanj": 135, "placement": 135, "introsort": 135, "progress": 135, "map": [135, 178], "abil": 135, "hardwir": 135, "nearli": [135, 177], "cpython": 135, "listsort": 135, "txt": 135, "nat": 135, "s10": 135, "height": 135, "ag": 135, "arthur": 135, "lancelot": 135, "galahad": 135, "8999999999999999": 135, "f8": 135, "emath": 136, "branch": 136, "cut": 136, "continu": 136, "curv": 136, "4j": 136, "concaten": 137, "nest": 137, "sum_along_axi": 138, "cumsum": 138, "cumul": 138, "trapz": 138, "integr": [138, 176], "trapezoid": 138, "individu": 138, "pairwis": 138, "mani": [138, 177], "technic": 138, "fsum": 138, "slower": [138, 144, 156, 169, 177], "advis": 138, "small": [138, 179], "128": 138, "tensor1": [140, 143, 148, 153], "tensor2": [140, 143, 148, 153], "km": [140, 148], "momemt": 142, "n_featur": 142, "d1": 142, "dn": 142, "moment": 142, "n_mode": 143, "generalis": [143, 179], "tradit": [143, 156], "inner_product": 143, "revers": [144, 145, 158], "seen": [144, 179], "khatri_rao_product": 144, "prod": [144, 145, 177], "mathemat": [144, 145, 146, 169], "bigodot": 144, "intuit": 144, "kr_product": 144, "cum_prod": 144, "ij": 144, "kronecker_product": 145, "j_k": 145, "otim": [145, 156], "times_": 146, "multi_mode_dot": [146, 154], "matrix_or_vec_list": 147, "times_0": 147, "times_1": 147, "times_n": 147, "svd_threshold": [149, 150], "procrust": 151, "batched_mod": 153, "batch": 153, "contract": [153, 156], "mttkrp": 154, "kr_factor": 154, "mttkrp2": 154, "mttkrp_part": 154, "consum": 154, "tensor_idx": 154, "chr": 154, "op": 154, "tl_einsum": 154, "a_ax": 156, "b_ax": 156, "integer_lik": 156, "nth": 156, "0th": 156, "1th": 156, "forth": 156, "4400": 156, "4730": 156, "4532": 156, "4874": 156, "4664": 156, "5018": 156, "4796": 156, "5162": 156, "4928": 156, "5306": 156, "overload": 156, "abbcccdddd": 156, "aaaaabbbbbbcccccccdddddddd": 156, "acc": 156, "bdd": 156, "aaacccc": 156, "bbbdddd": 156, "aaaaacccccc": 156, "bbbbbdddddd": 156, "aaaaaaacccccccc": 156, "bbbbbbbdddddddd": 156, "incl": 156, "abbbbb": 156, "cddddd": 156, "aabbbbbb": 156, "ccdddddd": 156, "aaabbbbbbb": 156, "cccddddddd": 156, "aaaabbbbbbbb": 156, "ccccdddddddd": 156, "abb": 156, "cdd": 156, "aaabbbb": 156, "cccdddd": 156, "aaaaabbbbbb": 156, "cccccdddddd": 156, "aaaaaaabbbbbbbb": 156, "cccccccdddddddd": 156, "abbbcccccddddddd": 156, "aabbbbccccccdddddddd": 156, "acccbbdddd": 156, "aaaaacccccccbbbbbbdddddddd": 156, "whenev": [158, 177], "moveaxi": 158, "invert": 158, "transposit": 158, "unchang": [158, 172], "4d": 159, "rank_k": 159, "left_dim_k": 159, "right_dim_k": 159, "rank_": 159, "output_tensor": [159, 163], "reassembl": [160, 164], "factor_list": 162, "n_pad": 162, "pad_boundari": 162, "bond": 162, "padded_factor_list": 162, "tucker_multi_mode_dot": 166, "skip_factor": [167, 168, 169], "transpose_factor": [167, 168, 169], "lengh": 167, "asarrai": 170, "yield": 170, "xv": 170, "yv": 170, "80": 170, "90": 170, "zeros_lik": 171, "overrid": 172, "newli": 172, "impli": 172, "full_lik": 172, "ubiquit": 174, "exactli": [174, 179], "hood": 174, "decid": 174, "introduct": 174, "abl": 174, "default_backend": 174, "haven": 174, "complexifi": 174, "nor": 174, "tradition": [174, 178], "ctx": 174, "floattensor": 174, "cuda": 174, "characteris": 174, "trivial_fun": 174, "trivial": 174, "isol": 174, "n_eigenvec": 174, "go": [174, 179], "random_tensor": [174, 176], "reat": 174, "decomp": 174, "rec": 174, "to_tensor": 174, "everyth": 174, "post": 174, "posthoc": 174, "noth": [174, 178, 179], "studi": 175, "overview": 176, "familiar": 176, "submodul": 176, "contrib": [176, 177, 179], "mention": 176, "anyth": 176, "adapt": [176, 177], "subtlti": 176, "regardless": 176, "10x10x10": 176, "explicit": [176, 177], "zeroth": 176, "random_tuck": 176, "3x4x5": 176, "tucker_to_vec": 176, "aptli": 176, "hand": 176, "crafter": 176, "craft": 176, "tg": 176, "set_tenalg_backend": 176, "liner": 176, "optimis": 176, "applyt": 176, "unseen": 176, "assess": 176, "fulli": [176, 179], "pydata": [176, 177], "nativ": 177, "dens": 177, "represent": [177, 179], "lack": 177, "opinion": 177, "decis": 177, "partial_tuck": 177, "robust_pca": 177, "mirror": 177, "coo": 177, "coord": 177, "rewritten": 177, "properli": 177, "densifi": 177, "watch": 177, "environ": 177, "sparse_auto_densifi": 177, "runtimeerror": 177, "awar": 177, "protect": 177, "caveat": 177, "proport": 177, "stl": 177, "1001": 177, "1002": 177, "starting_weight": 177, "nnz": 177, "starting_factor": 177, "recompos": 177, "worri": 177, "5044": 177, "densli": 177, "nbyte": 177, "1e9": 177, "gb": 177, "000161408": 177, "024016": 177, "dense_cp": 177, "3858051300048828": 177, "sparse_parafac": 177, "sparse_cp": 177, "053689002990723": 177, "spsolv": 177, "umfpack": 177, "x_1": 178, "x_2": 178, "matriz": 178, "i_0": 178, "classic": [178, 179], "i_m": 178, "substack": 178, "original_shap": 178, "greatest": 179, "compactli": 179, "tutori": 179, "Such": 179, "canon": 179, "polyad": 179, "super": 179, "smaller": 179, "000e": 179, "340e": 179, "617e": 179, "914e": 179, "475e": 179, "746e": 179, "physic": 179, "edg": 179, "connect": 179, "ldot": 179, "i_d": 179, "approx": 179, "alpha_1": 179, "alpha_": 179, "g_1": 179, "g_2": 179, "alpha_2": 179, "g_3": 179, "i_3": 179, "alpha_3": 179, "g_d": 179, "address": 179, "mps_decomposit": 179, "mps_decomposition_cross": 179, "matrix_product_st": 179, "tt_to_tensor": 179, "decim": 179, "seri": 180, "y_i": 180, "langl": 180, "rangl": 180, "r_1": 180, "r_n": 180, "krusal": 180, "cpregress": 180, "guo": 180, "kotsia": 180, "patra": 180, "816": 180, "827": 180}, "objects": {"": [[28, 0, 0, "-", "tensorly"]], "tensorly": [[30, 1, 1, "", "abs"], [31, 1, 1, "", "all"], [32, 1, 1, "", "arange"], [33, 1, 1, "", "argmax"], [34, 1, 1, "", "argmin"], [35, 1, 1, "", "backend_context"], [28, 0, 0, "-", "base"], [44, 1, 1, "", "check_random_state"], [45, 1, 1, "", "clip"], [46, 1, 1, "", "concatenate"], [47, 1, 1, "", "conj"], [48, 1, 1, "", "context"], [28, 0, 0, "-", "contrib"], [57, 1, 1, "", "copy"], [28, 0, 0, "-", "cp_tensor"], [28, 0, 0, "-", "datasets"], [28, 0, 0, "-", "decomposition"], [94, 1, 1, "", "diag"], [95, 1, 1, "", "dot"], [96, 1, 1, "", "eps"], [97, 1, 1, "", "eye"], [98, 1, 1, "", "finfo"], [99, 1, 1, "", "get_backend"], [100, 1, 1, "", "index"], [101, 1, 1, "", "index_update"], [102, 1, 1, "", "is_tensor"], [103, 1, 1, "", "kr"], [104, 1, 1, "", "kron"], [105, 1, 1, "", "matmul"], [106, 1, 1, "", "max"], [107, 1, 1, "", "mean"], [28, 0, 0, "-", "metrics"], [111, 1, 1, "", "min"], [112, 1, 1, "", "moveaxis"], [113, 1, 1, "", "ndim"], [114, 1, 1, "", "norm"], [115, 1, 1, "", "ones"], [28, 0, 0, "-", "parafac2_tensor"], [121, 1, 1, "", "prod"], [122, 1, 1, "", "qr"], [28, 0, 0, "-", "random"], [28, 0, 0, "-", "regression"], [130, 1, 1, "", "reshape"], [131, 1, 1, "", "set_backend"], [132, 1, 1, "", "shape"], [133, 1, 1, "", "sign"], [134, 1, 1, "", "solve"], [135, 1, 1, "", "sort"], [136, 1, 1, "", "sqrt"], [137, 1, 1, "", "stack"], [138, 1, 1, "", "sum"], [28, 0, 0, "-", "tenalg"], [155, 1, 1, "", "tensor"], [156, 1, 1, "", "tensordot"], [157, 1, 1, "", "to_numpy"], [158, 1, 1, "", "transpose"], [28, 0, 0, "-", "tt_matrix"], [28, 0, 0, "-", "tt_tensor"], [28, 0, 0, "-", "tucker_tensor"], [170, 1, 1, "", "where"], [171, 1, 1, "", "zeros"], [172, 1, 1, "", "zeros_like"]], "tensorly.base": [[36, 1, 1, "", "fold"], [37, 1, 1, "", "partial_fold"], [38, 1, 1, "", "partial_tensor_to_vec"], [39, 1, 1, "", "partial_unfold"], [40, 1, 1, "", "partial_vec_to_tensor"], [41, 1, 1, "", "tensor_to_vec"], [42, 1, 1, "", "unfold"], [43, 1, 1, "", "vec_to_tensor"]], "tensorly.contrib.decomposition": [[49, 1, 1, "", "tensor_train_cross"]], "tensorly.contrib": [[28, 0, 0, "-", "sparse"]], "tensorly.contrib.sparse.decomposition": [[50, 1, 1, "", "non_negative_parafac"], [51, 1, 1, "", "non_negative_tucker"], [52, 1, 1, "", "parafac"], [53, 1, 1, "", "partial_tucker"], [54, 1, 1, "", "robust_pca"], [55, 1, 1, "", "symmetric_parafac_power_iteration"], [56, 1, 1, "", "tucker"]], "tensorly.cp_tensor": [[58, 1, 1, "", "cp_mode_dot"], [59, 1, 1, "", "cp_norm"], [60, 1, 1, "", "cp_normalize"], [61, 1, 1, "", "cp_permute_factors"], [62, 1, 1, "", "cp_to_tensor"], [63, 1, 1, "", "cp_to_unfolded"], [64, 1, 1, "", "cp_to_vec"]], "tensorly.datasets.synthetic": [[65, 1, 1, "", "gen_image"]], "tensorly.decomposition": [[66, 2, 1, "", "CP"], [67, 2, 1, "", "CPPower"], [68, 2, 1, "", "CP_NN_HALS"], [69, 2, 1, "", "ConstrainedCP"], [70, 2, 1, "", "Parafac2"], [71, 2, 1, "", "RandomizedCP"], [72, 2, 1, "", "SymmetricCP"], [73, 2, 1, "", "TensorRing"], [74, 2, 1, "", "TensorTrain"], [75, 2, 1, "", "TensorTrainMatrix"], [76, 2, 1, "", "Tucker"], [77, 1, 1, "", "constrained_parafac"], [78, 1, 1, "", "non_negative_parafac"], [79, 1, 1, "", "non_negative_parafac_hals"], [80, 1, 1, "", "non_negative_tucker"], [81, 1, 1, "", "non_negative_tucker_hals"], [82, 1, 1, "", "parafac"], [29, 1, 1, "", "parafac2"], [83, 1, 1, "", "parafac_power_iteration"], [84, 1, 1, "", "partial_tucker"], [85, 1, 1, "", "power_iteration"], [86, 1, 1, "", "randomised_parafac"], [87, 1, 1, "", "robust_pca"], [88, 1, 1, "", "sample_khatri_rao"], [89, 1, 1, "", "symmetric_parafac_power_iteration"], [90, 1, 1, "", "symmetric_power_iteration"], [91, 1, 1, "", "tensor_ring"], [92, 1, 1, "", "tensor_train"], [93, 1, 1, "", "tensor_train_matrix"], [173, 1, 1, "", "tucker"]], "tensorly.decomposition.CP": [[66, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CPPower": [[67, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CP_NN_HALS": [[68, 3, 1, "", "fit_transform"]], "tensorly.decomposition.ConstrainedCP": [[69, 3, 1, "", "fit_transform"]], "tensorly.decomposition.Parafac2": [[70, 3, 1, "", "fit_transform"]], "tensorly.metrics.factors": [[108, 1, 1, "", "congruence_coefficient"]], "tensorly.metrics.regression": [[109, 1, 1, "", "MSE"], [110, 1, 1, "", "RMSE"]], "tensorly.parafac2_tensor": [[116, 1, 1, "", "parafac2_to_slice"], [117, 1, 1, "", "parafac2_to_slices"], [118, 1, 1, "", "parafac2_to_tensor"], [119, 1, 1, "", "parafac2_to_unfolded"], [120, 1, 1, "", "parafac2_to_vec"]], "tensorly.random": [[123, 1, 1, "", "random_cp"], [124, 1, 1, "", "random_parafac2"], [125, 1, 1, "", "random_tt"], [126, 1, 1, "", "random_tt_matrix"], [127, 1, 1, "", "random_tucker"]], "tensorly.regression.cp_regression": [[128, 2, 1, "", "CPRegressor"]], "tensorly.regression.cp_regression.CPRegressor": [[128, 3, 1, "", "fit"], [128, 3, 1, "", "get_params"], [128, 3, 1, "", "predict"], [128, 3, 1, "", "set_params"]], "tensorly.regression.tucker_regression": [[129, 2, 1, "", "TuckerRegressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[129, 3, 1, "", "fit"], [129, 3, 1, "", "get_params"], [129, 3, 1, "", "predict"], [129, 3, 1, "", "set_params"]], "tensorly.tenalg": [[139, 1, 1, "", "backend_context"], [140, 1, 1, "", "batched_outer"], [141, 1, 1, "", "get_backend"], [142, 1, 1, "", "higher_order_moment"], [143, 1, 1, "", "inner"], [144, 1, 1, "", "khatri_rao"], [145, 1, 1, "", "kronecker"], [146, 1, 1, "", "mode_dot"], [147, 1, 1, "", "multi_mode_dot"], [148, 1, 1, "", "outer"], [152, 1, 1, "", "set_backend"], [153, 1, 1, "", "tensordot"], [154, 1, 1, "", "unfolding_dot_khatri_rao"]], "tensorly.tenalg.proximal": [[149, 1, 1, "", "procrustes"], [150, 1, 1, "", "soft_thresholding"], [151, 1, 1, "", "svd_thresholding"]], "tensorly.tt_matrix": [[159, 1, 1, "", "tt_matrix_to_tensor"], [160, 1, 1, "", "tt_matrix_to_unfolded"], [161, 1, 1, "", "tt_matrix_to_vec"]], "tensorly.tt_tensor": [[162, 1, 1, "", "pad_tt_rank"], [163, 1, 1, "", "tt_to_tensor"], [164, 1, 1, "", "tt_to_unfolded"], [165, 1, 1, "", "tt_to_vec"]], "tensorly.tucker_tensor": [[166, 1, 1, "", "tucker_mode_dot"], [167, 1, 1, "", "tucker_to_tensor"], [168, 1, 1, "", "tucker_to_unfolded"], [169, 1, 1, "", "tucker_to_vec"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"about": 0, "u": 0, "origin": 0, "core": [0, 28], "develop": [0, 24], "support": 0, "practic": [1, 14, 22], "applic": [1, 14], "tensor": [1, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 28, 73, 155, 174, 176, 178, 179, 180], "method": [1, 14], "non": [2, 9, 10], "neg": [2, 9, 10], "parafac": [2, 7, 9, 52, 82, 179], "decomposit": [2, 3, 4, 6, 8, 9, 10, 14, 28, 29, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 173, 176, 179], "il": 2, "2": 2, "respons": 2, "data": 2, "covid": 3, "19": 3, "serologi": 3, "dataset": [3, 28, 65, 176], "analysi": 3, "cp": [3, 8, 9, 12, 17, 28, 66, 179], "introduct": [3, 8, 9, 10, 12], "appli": 3, "thi": 3, "tensorli": [3, 8, 9, 10, 14, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176], "inspect": [3, 11], "biolog": 3, "insight": 3, "from": 3, "compon": [3, 11], "refer": [3, 8, 9, 10, 11, 23, 28, 178, 179, 180], "imag": 4, "compress": 4, "via": 4, "comput": [5, 11, 13, 19, 20], "time": [5, 13, 19, 20], "us": [7, 8], "line": 7, "search": 7, "constrain": 8, "0": [8, 9, 10], "7": 8, "one": 8, "constraint": 8, "all": [8, 31], "mode": 8, "some": 8, "differ": 8, "scalar": 8, "input": 8, "each": 8, "6": [9, 10], "creat": [9, 10, 11, 12, 178], "synthet": [9, 10, 11, 12, 65], "hal": [9, 10], "exact": 9, "comparison": [9, 10], "tucker": [10, 18, 28, 56, 76, 173, 179], "fista": 10, "activ": 10, "set": [10, 28, 180], "demonstr": 11, "parafac2": [11, 28, 29, 70], "fit": 11, "perform": [11, 28], "metric": [11, 28, 108, 109, 110, 176], "visual": 11, "converg": 11, "rate": 11, "permut": 12, "factor": [12, 108], "target": 12, "cptensor": 12, "galleri": 14, "exampl": [14, 23, 177], "content": 14, "gener": 14, "regress": [14, 16, 17, 18, 28, 109, 110, 128, 129, 176, 180], "basic": [15, 174, 178], "oper": [15, 28], "backend": [21, 22, 28, 174, 176, 177], "system": [21, 174], "how": [21, 22, 174], "work": [21, 22], "The": 21, "class": [21, 22, 28], "load": 21, "function": [21, 23, 28, 174], "": [21, 174], "dispatch": 21, "contribut": 22, "guidelin": 22, "compat": 22, "In": 22, "context": [22, 28, 48, 174], "index": [22, 28, 100], "assign": [22, 28], "numpi": [22, 28], "style": [22, 28], "test": [22, 27], "interfac": [22, 28], "wrapper": 22, "write": 23, "document": [23, 27], "docstr": 23, "modul": 23, "titl": 23, "guid": [24, 175], "instal": 27, "pre": 27, "requisit": 27, "pip": 27, "recommend": 27, "conda": 27, "clone": 27, "github": 27, "repositori": 27, "run": 27, "compil": 27, "why": [27, 174, 177], "python": 27, "3": 27, "api": 28, "A": 28, "unifi": 28, "avail": 28, "arrai": 28, "creation": 28, "manipul": [28, 176], "algebra": [28, 176], "base": [28, 36, 37, 38, 39, 40, 41, 42, 43], "cp_tensor": [28, 58, 59, 60, 61, 62, 63, 64], "form": [28, 179], "tucker_tensor": [28, 166, 167, 168, 169], "tt_tensor": [28, 162, 163, 164, 165], "train": [28, 179], "mp": 28, "tt_matrix": [28, 159, 160, 161], "matric": 28, "tt": 28, "parafac2_tensor": [28, 116, 117, 118, 119, 120], "tenalg": [28, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "measur": 28, "random": [28, 123, 124, 125, 126, 127, 176], "sampl": [28, 176], "contrib": [28, 49, 50, 51, 52, 53, 54, 55, 56], "experiment": [28, 176], "featur": [28, 176], "spars": [28, 50, 51, 52, 53, 54, 55, 56, 177], "ab": 30, "arang": 32, "argmax": 33, "argmin": 34, "backend_context": [35, 139], "fold": [36, 178], "partial_fold": 37, "partial_tensor_to_vec": 38, "partial_unfold": 39, "partial_vec_to_tensor": 40, "tensor_to_vec": 41, "unfold": [42, 178], "vec_to_tensor": 43, "check_random_st": 44, "clip": 45, "concaten": 46, "conj": 47, "tensor_train_cross": 49, "non_negative_parafac": [50, 78], "non_negative_tuck": [51, 80], "partial_tuck": [53, 84], "robust_pca": [54, 87], "symmetric_parafac_power_iter": [55, 89], "copi": 57, "cp_mode_dot": 58, "cp_norm": 59, "cp_normal": 60, "cp_permute_factor": 61, "cp_to_tensor": 62, "cp_to_unfold": 63, "cp_to_vec": 64, "gen_imag": 65, "cppower": 67, "cp_nn_hal": 68, "constrainedcp": 69, "randomizedcp": 71, "symmetriccp": 72, "tensortrain": 74, "tensortrainmatrix": 75, "constrained_parafac": 77, "non_negative_parafac_h": 79, "non_negative_tucker_h": 81, "parafac_power_iter": 83, "power_iter": 85, "randomised_parafac": 86, "sample_khatri_rao": 88, "symmetric_power_iter": 90, "tensor_r": 91, "tensor_train": 92, "tensor_train_matrix": 93, "diag": 94, "dot": 95, "ep": 96, "ey": 97, "finfo": 98, "get_backend": [99, 141], "index_upd": 101, "is_tensor": 102, "kr": 103, "kron": 104, "matmul": 105, "max": 106, "mean": 107, "congruence_coeffici": 108, "mse": 109, "rmse": 110, "min": 111, "moveaxi": 112, "ndim": 113, "norm": 114, "ones": 115, "parafac2_to_slic": [116, 117], "parafac2_to_tensor": 118, "parafac2_to_unfold": 119, "parafac2_to_vec": 120, "prod": 121, "qr": 122, "random_cp": 123, "random_parafac2": 124, "random_tt": 125, "random_tt_matrix": 126, "random_tuck": 127, "cp_regress": 128, "cpregressor": 128, "tucker_regress": 129, "tuckerregressor": 129, "reshap": 130, "set_backend": [131, 152], "shape": 132, "sign": 133, "solv": 134, "sort": 135, "sqrt": 136, "stack": 137, "sum": 138, "batched_out": 140, "higher_order_mo": 142, "inner": 143, "khatri_rao": 144, "kroneck": 145, "mode_dot": 146, "multi_mode_dot": 147, "outer": 148, "proxim": [149, 150, 151], "procrust": 149, "soft_threshold": 150, "svd_threshold": 151, "tensordot": [153, 156], "unfolding_dot_khatri_rao": 154, "to_numpi": 157, "transpos": 158, "tt_matrix_to_tensor": 159, "tt_matrix_to_unfold": 160, "tt_matrix_to_vec": 161, "pad_tt_rank": 162, "tt_to_tensor": 163, "tt_to_unfold": 164, "tt_to_vec": 165, "tucker_mode_dot": 166, "tucker_to_tensor": 167, "tucker_to_unfold": 168, "tucker_to_vec": 169, "where": 170, "zero": 171, "zeros_lik": 172, "do": 174, "i": 174, "chang": 174, "case": 174, "studi": 174, "pytorch": 174, "On": 174, "cpu": 174, "gpu": 174, "user": 175, "quick": 176, "start": 176, "organ": 176, "separ": 177, "algorithm": 177, "usag": 177, "miss": 177, "valu": 177, "candecomp": 179, "matrix": 179, "product": 179, "state": 179, "implement": 179}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "Origin": [[0, "origin"]], "Core developers": [[0, "core-developers"]], "Supporters": [[0, "supporters"]], "Practical applications of tensor methods": [[1, "practical-applications-of-tensor-methods"], [14, "practical-applications-of-tensor-methods"]], "Non-negative PARAFAC Decomposition of IL-2 Response Data": [[2, "non-negative-parafac-decomposition-of-il-2-response-data"]], "COVID-19 Serology Dataset Analysis with CP": [[3, "covid-19-serology-dataset-analysis-with-cp"]], "Introduction": [[3, "introduction"], [8, "introduction"], [9, "introduction"], [10, "introduction"], [12, "introduction"]], "Apply CP decomposition to this dataset with Tensorly": [[3, "apply-cp-decomposition-to-this-dataset-with-tensorly"]], "Inspect the biological insights from CP components": [[3, "inspect-the-biological-insights-from-cp-components"]], "References": [[3, "references"], [8, "references"], [9, "references"], [10, "references"], [11, "references"], [178, "references"], [179, "references"], [180, "references"]], "Image compression via tensor decomposition": [[4, "image-compression-via-tensor-decomposition"]], "Computation times": [[5, "computation-times"], [13, "computation-times"], [19, "computation-times"], [20, "computation-times"]], "Tensor decomposition": [[6, "tensor-decomposition"], [14, "tensor-decomposition"], [176, "tensor-decomposition"], [179, "tensor-decomposition"]], "Using line search with PARAFAC": [[7, "using-line-search-with-parafac"]], "Constrained CP decomposition in Tensorly >=0.7": [[8, "constrained-cp-decomposition-in-tensorly-0-7"]], "Using one constraint for all modes": [[8, "using-one-constraint-for-all-modes"]], "Using one constraint for some modes": [[8, "using-one-constraint-for-some-modes"]], "Using a constraint with the different scalar inputs for each mode": [[8, "using-a-constraint-with-the-different-scalar-inputs-for-each-mode"]], "Using different constraints for each mode": [[8, "using-different-constraints-for-each-mode"]], "Non-negative CP decomposition in Tensorly >=0.6": [[9, "non-negative-cp-decomposition-in-tensorly-0-6"]], "Create synthetic tensor": [[9, "create-synthetic-tensor"], [10, "create-synthetic-tensor"], [11, "create-synthetic-tensor"], [12, "create-synthetic-tensor"]], "Non-negative Parafac": [[9, "non-negative-parafac"]], "Non-negative Parafac with HALS": [[9, "non-negative-parafac-with-hals"]], "Non-negative Parafac with Exact HALS": [[9, "non-negative-parafac-with-exact-hals"]], "Comparison": [[9, "comparison"], [10, "comparison"]], "Non-negative Tucker decomposition in Tensorly >=0.6": [[10, "non-negative-tucker-decomposition-in-tensorly-0-6"]], "Non-negative Tucker": [[10, "non-negative-tucker"]], "Non-negative Tucker with HALS and FISTA": [[10, "non-negative-tucker-with-hals-and-fista"]], "Non-negative Tucker with HALS and Active Set": [[10, "non-negative-tucker-with-hals-and-active-set"]], "Demonstration of PARAFAC2": [[11, "demonstration-of-parafac2"]], "Fit a PARAFAC2 tensor": [[11, "fit-a-parafac2-tensor"]], "Compute performance metrics": [[11, "compute-performance-metrics"]], "Visualize the components": [[11, "visualize-the-components"]], "Inspect the convergence rate": [[11, "inspect-the-convergence-rate"]], "Permuting CP factors": [[12, "permuting-cp-factors"]], "Permute target CPTensors": [[12, "permute-target-cptensors"]], "Gallery of examples": [[14, "gallery-of-examples"]], "Contents": [[14, "contents"]], "General examples": [[14, "general-examples"]], "Tensor regression with tensorly": [[14, "tensor-regression-with-tensorly"], [16, "tensor-regression-with-tensorly"]], "Basic tensor operations": [[15, "basic-tensor-operations"]], "CP tensor regression": [[17, "cp-tensor-regression"]], "Tucker tensor regression": [[18, "tucker-tensor-regression"]], "Backend System": [[21, "backend-system"]], "How the Backend System Works": [[21, "how-the-backend-system-works"]], "The Backend class": [[21, "the-backend-class"]], "Loading a backend": [[21, "loading-a-backend"]], "Backend function\u2019s dispatching": [[21, "backend-function-s-dispatching"]], "Contributing": [[22, "contributing"]], "How-to": [[22, "how-to"]], "Guidelines": [[22, "guidelines"]], "Backend compatibility": [[22, "backend-compatibility"]], "In practice": [[22, "in-practice"]], "Context of a tensor": [[22, "context-of-a-tensor"], [28, "context-of-a-tensor"], [174, "context-of-a-tensor"]], "Index assignment (\u201cNumPy style\u201d)": [[22, "index-assignment-numpy-style"]], "Testing the class interface": [[22, "testing-the-class-interface"]], "How the class wrapper test works": [[22, "how-the-class-wrapper-test-works"]], "Writing documentation": [[23, "writing-documentation"]], "Docstrings": [[23, "docstrings"]], "Refer to functions or modules": [[23, "refer-to-functions-or-modules"]], "Titles": [[23, "titles"]], "Examples": [[23, "examples"]], "Development guide": [[24, "development-guide"]], "Installing tensorly": [[27, "installing-tensorly"]], "Pre-requisite": [[27, "pre-requisite"]], "Installing with pip (recommended)": [[27, "installing-with-pip-recommended"]], "Installing with Conda": [[27, "installing-with-conda"]], "Cloning the github repository": [[27, "cloning-the-github-repository"]], "Running the tests": [[27, "running-the-tests"]], "Compiling the documentation": [[27, "compiling-the-documentation"]], "Why Python 3?": [[27, "why-python-3"]], "API reference": [[28, "api-reference"]], "tensorly: A unified backend interface": [[28, "tensorly-a-unified-backend-interface"]], "Setting the backend": [[28, "setting-the-backend"]], "Index assignement (\u201cNumPy style\u201d)": [[28, "index-assignement-numpy-style"]], "Available backend functions": [[28, "available-backend-functions"]], "Array creation": [[28, "array-creation"]], "Array manipulation": [[28, "array-manipulation"]], "Algebraic operations": [[28, "algebraic-operations"]], "tensorly.base: Core tensor functions": [[28, "module-tensorly.base"]], "tensorly.cp_tensor: Tensors in CP form": [[28, "module-tensorly.cp_tensor"]], "tensorly.tucker_tensor: Tensors in Tucker form": [[28, "module-tensorly.tucker_tensor"]], "tensorly.tt_tensor: Tensors in Tensor-Train (MPS) form": [[28, "module-tensorly.tt_tensor"]], "tensorly.tt_matrix: Matrices in TT form": [[28, "module-tensorly.tt_matrix"]], "tensorly.parafac2_tensor: Tensors in PARAFAC2 form": [[28, "module-tensorly.parafac2_tensor"]], "tensorly.tenalg: Tensor Algebra": [[28, "tensorly-tenalg-tensor-algebra"]], "Available functions": [[28, "available-functions"]], "Tensor Algebra Backend": [[28, "tensor-algebra-backend"]], "tensorly.decomposition: Tensor Decomposition": [[28, "module-tensorly.decomposition"]], "Classes": [[28, "classes"]], "Functions": [[28, "functions"]], "tensorly.regression: Tensor Regression": [[28, "module-tensorly.regression"]], "tensorly.metrics: Performance measures": [[28, "module-tensorly.metrics"]], "tensorly.random: Sampling tensors": [[28, "module-tensorly.random"]], "tensorly.datasets: Datasets": [[28, "module-tensorly.datasets"]], "tensorly.contrib: Experimental features": [[28, "module-tensorly.contrib"]], "Sparse tensors": [[28, "sparse-tensors"]], "tensorly.decomposition.parafac2": [[29, "tensorly-decomposition-parafac2"]], "tensorly.abs": [[30, "tensorly-abs"]], "tensorly.all": [[31, "tensorly-all"]], "tensorly.arange": [[32, "tensorly-arange"]], "tensorly.argmax": [[33, "tensorly-argmax"]], "tensorly.argmin": [[34, "tensorly-argmin"]], "tensorly.backend_context": [[35, "tensorly-backend-context"]], "tensorly.base.fold": [[36, "tensorly-base-fold"]], "tensorly.base.partial_fold": [[37, "tensorly-base-partial-fold"]], "tensorly.base.partial_tensor_to_vec": [[38, "tensorly-base-partial-tensor-to-vec"]], "tensorly.base.partial_unfold": [[39, "tensorly-base-partial-unfold"]], "tensorly.base.partial_vec_to_tensor": [[40, "tensorly-base-partial-vec-to-tensor"]], "tensorly.base.tensor_to_vec": [[41, "tensorly-base-tensor-to-vec"]], "tensorly.base.unfold": [[42, "tensorly-base-unfold"]], "tensorly.base.vec_to_tensor": [[43, "tensorly-base-vec-to-tensor"]], "tensorly.check_random_state": [[44, "tensorly-check-random-state"]], "tensorly.clip": [[45, "tensorly-clip"]], "tensorly.concatenate": [[46, "tensorly-concatenate"]], "tensorly.conj": [[47, "tensorly-conj"]], "tensorly.context": [[48, "tensorly-context"]], "tensorly.contrib.decomposition.tensor_train_cross": [[49, "tensorly-contrib-decomposition-tensor-train-cross"]], "tensorly.contrib.sparse.decomposition.non_negative_parafac": [[50, "tensorly-contrib-sparse-decomposition-non-negative-parafac"]], "tensorly.contrib.sparse.decomposition.non_negative_tucker": [[51, "tensorly-contrib-sparse-decomposition-non-negative-tucker"]], "tensorly.contrib.sparse.decomposition.parafac": [[52, "tensorly-contrib-sparse-decomposition-parafac"]], "tensorly.contrib.sparse.decomposition.partial_tucker": [[53, "tensorly-contrib-sparse-decomposition-partial-tucker"]], "tensorly.contrib.sparse.decomposition.robust_pca": [[54, "tensorly-contrib-sparse-decomposition-robust-pca"]], "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration": [[55, "tensorly-contrib-sparse-decomposition-symmetric-parafac-power-iteration"]], "tensorly.contrib.sparse.decomposition.tucker": [[56, "tensorly-contrib-sparse-decomposition-tucker"]], "tensorly.copy": [[57, "tensorly-copy"]], "tensorly.cp_tensor.cp_mode_dot": [[58, "tensorly-cp-tensor-cp-mode-dot"]], "tensorly.cp_tensor.cp_norm": [[59, "tensorly-cp-tensor-cp-norm"]], "tensorly.cp_tensor.cp_normalize": [[60, "tensorly-cp-tensor-cp-normalize"]], "tensorly.cp_tensor.cp_permute_factors": [[61, "tensorly-cp-tensor-cp-permute-factors"]], "tensorly.cp_tensor.cp_to_tensor": [[62, "tensorly-cp-tensor-cp-to-tensor"]], "tensorly.cp_tensor.cp_to_unfolded": [[63, "tensorly-cp-tensor-cp-to-unfolded"]], "tensorly.cp_tensor.cp_to_vec": [[64, "tensorly-cp-tensor-cp-to-vec"]], "tensorly.datasets.synthetic.gen_image": [[65, "tensorly-datasets-synthetic-gen-image"]], "tensorly.decomposition.CP": [[66, "tensorly-decomposition-cp"]], "tensorly.decomposition.CPPower": [[67, "tensorly-decomposition-cppower"]], "tensorly.decomposition.CP_NN_HALS": [[68, "tensorly-decomposition-cp-nn-hals"]], "tensorly.decomposition.ConstrainedCP": [[69, "tensorly-decomposition-constrainedcp"]], "tensorly.decomposition.Parafac2": [[70, "tensorly-decomposition-parafac2"]], "tensorly.decomposition.RandomizedCP": [[71, "tensorly-decomposition-randomizedcp"]], "tensorly.decomposition.SymmetricCP": [[72, "tensorly-decomposition-symmetriccp"]], "tensorly.decomposition.TensorRing": [[73, "tensorly-decomposition-tensorring"]], "tensorly.decomposition.TensorTrain": [[74, "tensorly-decomposition-tensortrain"]], "tensorly.decomposition.TensorTrainMatrix": [[75, "tensorly-decomposition-tensortrainmatrix"]], "tensorly.decomposition.Tucker": [[76, "tensorly-decomposition-tucker"]], "tensorly.decomposition.constrained_parafac": [[77, "tensorly-decomposition-constrained-parafac"]], "tensorly.decomposition.non_negative_parafac": [[78, "tensorly-decomposition-non-negative-parafac"]], "tensorly.decomposition.non_negative_parafac_hals": [[79, "tensorly-decomposition-non-negative-parafac-hals"]], "tensorly.decomposition.non_negative_tucker": [[80, "tensorly-decomposition-non-negative-tucker"]], "tensorly.decomposition.non_negative_tucker_hals": [[81, "tensorly-decomposition-non-negative-tucker-hals"]], "tensorly.decomposition.parafac": [[82, "tensorly-decomposition-parafac"]], "tensorly.decomposition.parafac_power_iteration": [[83, "tensorly-decomposition-parafac-power-iteration"]], "tensorly.decomposition.partial_tucker": [[84, "tensorly-decomposition-partial-tucker"]], "tensorly.decomposition.power_iteration": [[85, "tensorly-decomposition-power-iteration"]], "tensorly.decomposition.randomised_parafac": [[86, "tensorly-decomposition-randomised-parafac"]], "tensorly.decomposition.robust_pca": [[87, "tensorly-decomposition-robust-pca"]], "tensorly.decomposition.sample_khatri_rao": [[88, "tensorly-decomposition-sample-khatri-rao"]], "tensorly.decomposition.symmetric_parafac_power_iteration": [[89, "tensorly-decomposition-symmetric-parafac-power-iteration"]], "tensorly.decomposition.symmetric_power_iteration": [[90, "tensorly-decomposition-symmetric-power-iteration"]], "tensorly.decomposition.tensor_ring": [[91, "tensorly-decomposition-tensor-ring"]], "tensorly.decomposition.tensor_train": [[92, "tensorly-decomposition-tensor-train"]], "tensorly.decomposition.tensor_train_matrix": [[93, "tensorly-decomposition-tensor-train-matrix"]], "tensorly.diag": [[94, "tensorly-diag"]], "tensorly.dot": [[95, "tensorly-dot"]], "tensorly.eps": [[96, "tensorly-eps"]], "tensorly.eye": [[97, "tensorly-eye"]], "tensorly.finfo": [[98, "tensorly-finfo"]], "tensorly.get_backend": [[99, "tensorly-get-backend"]], "tensorly.index": [[100, "tensorly-index"]], "tensorly.index_update": [[101, "tensorly-index-update"]], "tensorly.is_tensor": [[102, "tensorly-is-tensor"]], "tensorly.kr": [[103, "tensorly-kr"]], "tensorly.kron": [[104, "tensorly-kron"]], "tensorly.matmul": [[105, "tensorly-matmul"]], "tensorly.max": [[106, "tensorly-max"]], "tensorly.mean": [[107, "tensorly-mean"]], "tensorly.metrics.factors.congruence_coefficient": [[108, "tensorly-metrics-factors-congruence-coefficient"]], "tensorly.metrics.regression.MSE": [[109, "tensorly-metrics-regression-mse"]], "tensorly.metrics.regression.RMSE": [[110, "tensorly-metrics-regression-rmse"]], "tensorly.min": [[111, "tensorly-min"]], "tensorly.moveaxis": [[112, "tensorly-moveaxis"]], "tensorly.ndim": [[113, "tensorly-ndim"]], "tensorly.norm": [[114, "tensorly-norm"]], "tensorly.ones": [[115, "tensorly-ones"]], "tensorly.parafac2_tensor.parafac2_to_slice": [[116, "tensorly-parafac2-tensor-parafac2-to-slice"]], "tensorly.parafac2_tensor.parafac2_to_slices": [[117, "tensorly-parafac2-tensor-parafac2-to-slices"]], "tensorly.parafac2_tensor.parafac2_to_tensor": [[118, "tensorly-parafac2-tensor-parafac2-to-tensor"]], "tensorly.parafac2_tensor.parafac2_to_unfolded": [[119, "tensorly-parafac2-tensor-parafac2-to-unfolded"]], "tensorly.parafac2_tensor.parafac2_to_vec": [[120, "tensorly-parafac2-tensor-parafac2-to-vec"]], "tensorly.prod": [[121, "tensorly-prod"]], "tensorly.qr": [[122, "tensorly-qr"]], "tensorly.random.random_cp": [[123, "tensorly-random-random-cp"]], "tensorly.random.random_parafac2": [[124, "tensorly-random-random-parafac2"]], "tensorly.random.random_tt": [[125, "tensorly-random-random-tt"]], "tensorly.random.random_tt_matrix": [[126, "tensorly-random-random-tt-matrix"]], "tensorly.random.random_tucker": [[127, "tensorly-random-random-tucker"]], "tensorly.regression.cp_regression.CPRegressor": [[128, "tensorly-regression-cp-regression-cpregressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[129, "tensorly-regression-tucker-regression-tuckerregressor"]], "tensorly.reshape": [[130, "tensorly-reshape"]], "tensorly.set_backend": [[131, "tensorly-set-backend"]], "tensorly.shape": [[132, "tensorly-shape"]], "tensorly.sign": [[133, "tensorly-sign"]], "tensorly.solve": [[134, "tensorly-solve"]], "tensorly.sort": [[135, "tensorly-sort"]], "tensorly.sqrt": [[136, "tensorly-sqrt"]], "tensorly.stack": [[137, "tensorly-stack"]], "tensorly.sum": [[138, "tensorly-sum"]], "tensorly.tenalg.backend_context": [[139, "tensorly-tenalg-backend-context"]], "tensorly.tenalg.batched_outer": [[140, "tensorly-tenalg-batched-outer"]], "tensorly.tenalg.get_backend": [[141, "tensorly-tenalg-get-backend"]], "tensorly.tenalg.higher_order_moment": [[142, "tensorly-tenalg-higher-order-moment"]], "tensorly.tenalg.inner": [[143, "tensorly-tenalg-inner"]], "tensorly.tenalg.khatri_rao": [[144, "tensorly-tenalg-khatri-rao"]], "tensorly.tenalg.kronecker": [[145, "tensorly-tenalg-kronecker"]], "tensorly.tenalg.mode_dot": [[146, "tensorly-tenalg-mode-dot"]], "tensorly.tenalg.multi_mode_dot": [[147, "tensorly-tenalg-multi-mode-dot"]], "tensorly.tenalg.outer": [[148, "tensorly-tenalg-outer"]], "tensorly.tenalg.proximal.procrustes": [[149, "tensorly-tenalg-proximal-procrustes"]], "tensorly.tenalg.proximal.soft_thresholding": [[150, "tensorly-tenalg-proximal-soft-thresholding"]], "tensorly.tenalg.proximal.svd_thresholding": [[151, "tensorly-tenalg-proximal-svd-thresholding"]], "tensorly.tenalg.set_backend": [[152, "tensorly-tenalg-set-backend"]], "tensorly.tenalg.tensordot": [[153, "tensorly-tenalg-tensordot"]], "tensorly.tenalg.unfolding_dot_khatri_rao": [[154, "tensorly-tenalg-unfolding-dot-khatri-rao"]], "tensorly.tensor": [[155, "tensorly-tensor"]], "tensorly.tensordot": [[156, "tensorly-tensordot"]], "tensorly.to_numpy": [[157, "tensorly-to-numpy"]], "tensorly.transpose": [[158, "tensorly-transpose"]], "tensorly.tt_matrix.tt_matrix_to_tensor": [[159, "tensorly-tt-matrix-tt-matrix-to-tensor"]], "tensorly.tt_matrix.tt_matrix_to_unfolded": [[160, "tensorly-tt-matrix-tt-matrix-to-unfolded"]], "tensorly.tt_matrix.tt_matrix_to_vec": [[161, "tensorly-tt-matrix-tt-matrix-to-vec"]], "tensorly.tt_tensor.pad_tt_rank": [[162, "tensorly-tt-tensor-pad-tt-rank"]], "tensorly.tt_tensor.tt_to_tensor": [[163, "tensorly-tt-tensor-tt-to-tensor"]], "tensorly.tt_tensor.tt_to_unfolded": [[164, "tensorly-tt-tensor-tt-to-unfolded"]], "tensorly.tt_tensor.tt_to_vec": [[165, "tensorly-tt-tensor-tt-to-vec"]], "tensorly.tucker_tensor.tucker_mode_dot": [[166, "tensorly-tucker-tensor-tucker-mode-dot"]], "tensorly.tucker_tensor.tucker_to_tensor": [[167, "tensorly-tucker-tensor-tucker-to-tensor"]], "tensorly.tucker_tensor.tucker_to_unfolded": [[168, "tensorly-tucker-tensor-tucker-to-unfolded"]], "tensorly.tucker_tensor.tucker_to_vec": [[169, "tensorly-tucker-tensor-tucker-to-vec"]], "tensorly.where": [[170, "tensorly-where"]], "tensorly.zeros": [[171, "tensorly-zeros"]], "tensorly.zeros_like": [[172, "tensorly-zeros-like"]], "tensorly.decomposition.tucker": [[173, "tensorly-decomposition-tucker"]], "TensorLy\u2019s backend system": [[174, "tensorly-s-backend-system"]], "Backend?": [[174, "backend"]], "Why backends?": [[174, "why-backends"]], "How do I change the backend?": [[174, "how-do-i-change-the-backend"]], "Basic functions": [[174, "basic-functions"]], "Case study: TensorLy and PyTorch": [[174, "case-study-tensorly-and-pytorch"]], "On CPU": [[174, "on-cpu"]], "On GPU": [[174, "on-gpu"]], "User guide": [[175, "user-guide"]], "Quick-Start": [[176, "quick-start"]], "Organization of TensorLy": [[176, "organization-of-tensorly"]], "TensorLy Backend": [[176, "tensorly-backend"]], "Tensor manipulation": [[176, "tensor-manipulation"]], "Tensor algebra": [[176, "tensor-algebra"]], "Tensor regressions": [[176, "tensor-regressions"]], "Metrics": [[176, "metrics"]], "Sampling random tensors": [[176, "sampling-random-tensors"]], "Experimental features": [[176, "experimental-features"]], "Datasets": [[176, "datasets"]], "Sparse Backend": [[177, "sparse-backend"]], "Why a separate sparse backend?": [[177, "why-a-separate-sparse-backend"]], "Algorithms": [[177, "algorithms"]], "Usage": [[177, "usage"]], "Missing Values": [[177, "missing-values"]], "Example": [[177, "example"]], "Tensor basics": [[178, "tensor-basics"]], "Creating a tensor": [[178, "creating-a-tensor"]], "Unfolding": [[178, "unfolding"]], "Folding": [[178, "folding"]], "CP form of a tensor": [[179, "cp-form-of-a-tensor"]], "CANDECOMP-PARAFAC decomposition": [[179, "candecomp-parafac-decomposition"]], "Tucker form of a tensor": [[179, "tucker-form-of-a-tensor"]], "Tucker decomposition": [[179, "tucker-decomposition"]], "Matrix-Product-State / Tensor-Train Decomposition": [[179, "matrix-product-state-tensor-train-decomposition"]], "Implementations": [[179, "implementations"]], "Tensor regression": [[180, "tensor-regression"]], "Setting": [[180, "setting"]]}, "indexentries": {"module": [[28, "module-tensorly"], [28, "module-tensorly.base"], [28, "module-tensorly.contrib"], [28, "module-tensorly.contrib.sparse"], [28, "module-tensorly.cp_tensor"], [28, "module-tensorly.datasets"], [28, "module-tensorly.decomposition"], [28, "module-tensorly.metrics"], [28, "module-tensorly.parafac2_tensor"], [28, "module-tensorly.random"], [28, "module-tensorly.regression"], [28, "module-tensorly.tenalg"], [28, "module-tensorly.tt_matrix"], [28, "module-tensorly.tt_tensor"], [28, "module-tensorly.tucker_tensor"]], "tensorly": [[28, "module-tensorly"]], "tensorly.base": [[28, "module-tensorly.base"]], "tensorly.contrib": [[28, "module-tensorly.contrib"]], "tensorly.contrib.sparse": [[28, "module-tensorly.contrib.sparse"]], "tensorly.cp_tensor": [[28, "module-tensorly.cp_tensor"]], "tensorly.datasets": [[28, "module-tensorly.datasets"]], "tensorly.decomposition": [[28, "module-tensorly.decomposition"]], "tensorly.metrics": [[28, "module-tensorly.metrics"]], "tensorly.parafac2_tensor": [[28, "module-tensorly.parafac2_tensor"]], "tensorly.random": [[28, "module-tensorly.random"]], "tensorly.regression": [[28, "module-tensorly.regression"]], "tensorly.tenalg": [[28, "module-tensorly.tenalg"]], "tensorly.tt_matrix": [[28, "module-tensorly.tt_matrix"]], "tensorly.tt_tensor": [[28, "module-tensorly.tt_tensor"]], "tensorly.tucker_tensor": [[28, "module-tensorly.tucker_tensor"]], "parafac2() (in module tensorly.decomposition)": [[29, "tensorly.decomposition.parafac2"]], "abs() (in module tensorly)": [[30, "tensorly.abs"]], "all() (in module tensorly)": [[31, "tensorly.all"]], "arange() (in module tensorly)": [[32, "tensorly.arange"]], "argmax() (in module tensorly)": [[33, "tensorly.argmax"]], "argmin() (in module tensorly)": [[34, "tensorly.argmin"]], "backend_context() (in module tensorly)": [[35, "tensorly.backend_context"]], "fold() (in module tensorly.base)": [[36, "tensorly.base.fold"]], "partial_fold() (in module tensorly.base)": [[37, "tensorly.base.partial_fold"]], "partial_tensor_to_vec() (in module tensorly.base)": [[38, "tensorly.base.partial_tensor_to_vec"]], "partial_unfold() (in module tensorly.base)": [[39, "tensorly.base.partial_unfold"]], "partial_vec_to_tensor() (in module tensorly.base)": [[40, "tensorly.base.partial_vec_to_tensor"]], "tensor_to_vec() (in module tensorly.base)": [[41, "tensorly.base.tensor_to_vec"]], "unfold() (in module tensorly.base)": [[42, "tensorly.base.unfold"]], "vec_to_tensor() (in module tensorly.base)": [[43, "tensorly.base.vec_to_tensor"]], "check_random_state() (in module tensorly)": [[44, "tensorly.check_random_state"]], "clip() (in module tensorly)": [[45, "tensorly.clip"]], "concatenate() (in module tensorly)": [[46, "tensorly.concatenate"]], "conj() (in module tensorly)": [[47, "tensorly.conj"]], "context() (in module tensorly)": [[48, "tensorly.context"]], "tensor_train_cross() (in module tensorly.contrib.decomposition)": [[49, "tensorly.contrib.decomposition.tensor_train_cross"]], "non_negative_parafac() (in module tensorly.contrib.sparse.decomposition)": [[50, "tensorly.contrib.sparse.decomposition.non_negative_parafac"]], "non_negative_tucker() (in module tensorly.contrib.sparse.decomposition)": [[51, "tensorly.contrib.sparse.decomposition.non_negative_tucker"]], "parafac() (in module tensorly.contrib.sparse.decomposition)": [[52, "tensorly.contrib.sparse.decomposition.parafac"]], "partial_tucker() (in module tensorly.contrib.sparse.decomposition)": [[53, "tensorly.contrib.sparse.decomposition.partial_tucker"]], "robust_pca() (in module tensorly.contrib.sparse.decomposition)": [[54, "tensorly.contrib.sparse.decomposition.robust_pca"]], "symmetric_parafac_power_iteration() (in module tensorly.contrib.sparse.decomposition)": [[55, "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration"]], "tucker() (in module tensorly.contrib.sparse.decomposition)": [[56, "tensorly.contrib.sparse.decomposition.tucker"]], "copy() (in module tensorly)": [[57, "tensorly.copy"]], "cp_mode_dot() (in module tensorly.cp_tensor)": [[58, "tensorly.cp_tensor.cp_mode_dot"]], "cp_norm() (in module tensorly.cp_tensor)": [[59, "tensorly.cp_tensor.cp_norm"]], "cp_normalize() (in module tensorly.cp_tensor)": [[60, "tensorly.cp_tensor.cp_normalize"]], "cp_permute_factors() (in module tensorly.cp_tensor)": [[61, "tensorly.cp_tensor.cp_permute_factors"]], "cp_to_tensor() (in module tensorly.cp_tensor)": [[62, "tensorly.cp_tensor.cp_to_tensor"]], "cp_to_unfolded() (in module tensorly.cp_tensor)": [[63, "tensorly.cp_tensor.cp_to_unfolded"]], "cp_to_vec() (in module tensorly.cp_tensor)": [[64, "tensorly.cp_tensor.cp_to_vec"]], "gen_image() (in module tensorly.datasets.synthetic)": [[65, "tensorly.datasets.synthetic.gen_image"]], "cp (class in tensorly.decomposition)": [[66, "tensorly.decomposition.CP"]], "fit_transform() (cp method)": [[66, "tensorly.decomposition.CP.fit_transform"]], "cppower (class in tensorly.decomposition)": [[67, "tensorly.decomposition.CPPower"]], "fit_transform() (cppower method)": [[67, "tensorly.decomposition.CPPower.fit_transform"]], "cp_nn_hals (class in tensorly.decomposition)": [[68, "tensorly.decomposition.CP_NN_HALS"]], "fit_transform() (cp_nn_hals method)": [[68, "tensorly.decomposition.CP_NN_HALS.fit_transform"]], "constrainedcp (class in tensorly.decomposition)": [[69, "tensorly.decomposition.ConstrainedCP"]], "fit_transform() (constrainedcp method)": [[69, "tensorly.decomposition.ConstrainedCP.fit_transform"]], "parafac2 (class in tensorly.decomposition)": [[70, "tensorly.decomposition.Parafac2"]], "fit_transform() (parafac2 method)": [[70, "tensorly.decomposition.Parafac2.fit_transform"]], "randomizedcp (class in tensorly.decomposition)": [[71, "tensorly.decomposition.RandomizedCP"]], "symmetriccp (class in tensorly.decomposition)": [[72, "tensorly.decomposition.SymmetricCP"]], "tensorring (class in tensorly.decomposition)": [[73, "tensorly.decomposition.TensorRing"]], "tensortrain (class in tensorly.decomposition)": [[74, "tensorly.decomposition.TensorTrain"]], "tensortrainmatrix (class in tensorly.decomposition)": [[75, "tensorly.decomposition.TensorTrainMatrix"]], "tucker (class in tensorly.decomposition)": [[76, "tensorly.decomposition.Tucker"]], "constrained_parafac() (in module tensorly.decomposition)": [[77, "tensorly.decomposition.constrained_parafac"]], "non_negative_parafac() (in module tensorly.decomposition)": [[78, "tensorly.decomposition.non_negative_parafac"]], "non_negative_parafac_hals() (in module tensorly.decomposition)": [[79, "tensorly.decomposition.non_negative_parafac_hals"]], "non_negative_tucker() (in module tensorly.decomposition)": [[80, "tensorly.decomposition.non_negative_tucker"]], "non_negative_tucker_hals() (in module tensorly.decomposition)": [[81, "tensorly.decomposition.non_negative_tucker_hals"]], "parafac() (in module tensorly.decomposition)": [[82, "tensorly.decomposition.parafac"]], "parafac_power_iteration() (in module tensorly.decomposition)": [[83, "tensorly.decomposition.parafac_power_iteration"]], "partial_tucker() (in module tensorly.decomposition)": [[84, "tensorly.decomposition.partial_tucker"]], "power_iteration() (in module tensorly.decomposition)": [[85, "tensorly.decomposition.power_iteration"]], "randomised_parafac() (in module tensorly.decomposition)": [[86, "tensorly.decomposition.randomised_parafac"]], "robust_pca() (in module tensorly.decomposition)": [[87, "tensorly.decomposition.robust_pca"]], "sample_khatri_rao() (in module tensorly.decomposition)": [[88, "tensorly.decomposition.sample_khatri_rao"]], "symmetric_parafac_power_iteration() (in module tensorly.decomposition)": [[89, "tensorly.decomposition.symmetric_parafac_power_iteration"]], "symmetric_power_iteration() (in module tensorly.decomposition)": [[90, "tensorly.decomposition.symmetric_power_iteration"]], "tensor_ring() (in module tensorly.decomposition)": [[91, "tensorly.decomposition.tensor_ring"]], "tensor_train() (in module tensorly.decomposition)": [[92, "tensorly.decomposition.tensor_train"]], "tensor_train_matrix() (in module tensorly.decomposition)": [[93, "tensorly.decomposition.tensor_train_matrix"]], "diag() (in module tensorly)": [[94, "tensorly.diag"]], "dot() (in module tensorly)": [[95, "tensorly.dot"]], "eps() (in module tensorly)": [[96, "tensorly.eps"]], "eye() (in module tensorly)": [[97, "tensorly.eye"]], "finfo() (in module tensorly)": [[98, "tensorly.finfo"]], "get_backend() (in module tensorly)": [[99, "tensorly.get_backend"]], "index() (in module tensorly)": [[100, "tensorly.index"]], "index_update() (in module tensorly)": [[101, "tensorly.index_update"]], "is_tensor() (in module tensorly)": [[102, "tensorly.is_tensor"]], "kr() (in module tensorly)": [[103, "tensorly.kr"]], "kron() (in module tensorly)": [[104, "tensorly.kron"]], "pep 465": [[105, "index-0"]], "python enhancement proposals": [[105, "index-0"]], "matmul() (in module tensorly)": [[105, "tensorly.matmul"]], "max() (in module tensorly)": [[106, "tensorly.max"]], "mean() (in module tensorly)": [[107, "tensorly.mean"]], "congruence_coefficient() (in module tensorly.metrics.factors)": [[108, "tensorly.metrics.factors.congruence_coefficient"]], "mse() (in module tensorly.metrics.regression)": [[109, "tensorly.metrics.regression.MSE"]], "rmse() (in module tensorly.metrics.regression)": [[110, "tensorly.metrics.regression.RMSE"]], "min() (in module tensorly)": [[111, "tensorly.min"]], "moveaxis() (in module tensorly)": [[112, "tensorly.moveaxis"]], "ndim() (in module tensorly)": [[113, "tensorly.ndim"]], "norm() (in module tensorly)": [[114, "tensorly.norm"]], "ones() (in module tensorly)": [[115, "tensorly.ones"]], "parafac2_to_slice() (in module tensorly.parafac2_tensor)": [[116, "tensorly.parafac2_tensor.parafac2_to_slice"]], "parafac2_to_slices() (in module tensorly.parafac2_tensor)": [[117, "tensorly.parafac2_tensor.parafac2_to_slices"]], "parafac2_to_tensor() (in module tensorly.parafac2_tensor)": [[118, "tensorly.parafac2_tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (in module tensorly.parafac2_tensor)": [[119, "tensorly.parafac2_tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (in module tensorly.parafac2_tensor)": [[120, "tensorly.parafac2_tensor.parafac2_to_vec"]], "prod() (in module tensorly)": [[121, "tensorly.prod"]], "qr() (in module tensorly)": [[122, "tensorly.qr"]], "random_cp() (in module tensorly.random)": [[123, "tensorly.random.random_cp"]], "random_parafac2() (in module tensorly.random)": [[124, "tensorly.random.random_parafac2"]], "random_tt() (in module tensorly.random)": [[125, "tensorly.random.random_tt"]], "random_tt_matrix() (in module tensorly.random)": [[126, "tensorly.random.random_tt_matrix"]], "random_tucker() (in module tensorly.random)": [[127, "tensorly.random.random_tucker"]], "cpregressor (class in tensorly.regression.cp_regression)": [[128, "tensorly.regression.cp_regression.CPRegressor"]], "fit() (cpregressor method)": [[128, "tensorly.regression.cp_regression.CPRegressor.fit"]], "get_params() (cpregressor method)": [[128, "tensorly.regression.cp_regression.CPRegressor.get_params"]], "predict() (cpregressor method)": [[128, "tensorly.regression.cp_regression.CPRegressor.predict"]], "set_params() (cpregressor method)": [[128, "tensorly.regression.cp_regression.CPRegressor.set_params"]], "tuckerregressor (class in tensorly.regression.tucker_regression)": [[129, "tensorly.regression.tucker_regression.TuckerRegressor"]], "fit() (tuckerregressor method)": [[129, "tensorly.regression.tucker_regression.TuckerRegressor.fit"]], "get_params() (tuckerregressor method)": [[129, "tensorly.regression.tucker_regression.TuckerRegressor.get_params"]], "predict() (tuckerregressor method)": [[129, "tensorly.regression.tucker_regression.TuckerRegressor.predict"]], "set_params() (tuckerregressor method)": [[129, "tensorly.regression.tucker_regression.TuckerRegressor.set_params"]], "reshape() (in module tensorly)": [[130, "tensorly.reshape"]], "set_backend() (in module tensorly)": [[131, "tensorly.set_backend"]], "shape() (in module tensorly)": [[132, "tensorly.shape"]], "sign() (in module tensorly)": [[133, "tensorly.sign"]], "solve() (in module tensorly)": [[134, "tensorly.solve"]], "sort() (in module tensorly)": [[135, "tensorly.sort"]], "sqrt() (in module tensorly)": [[136, "tensorly.sqrt"]], "stack() (in module tensorly)": [[137, "tensorly.stack"]], "sum() (in module tensorly)": [[138, "tensorly.sum"]], "backend_context() (in module tensorly.tenalg)": [[139, "tensorly.tenalg.backend_context"]], "batched_outer() (in module tensorly.tenalg)": [[140, "tensorly.tenalg.batched_outer"]], "get_backend() (in module tensorly.tenalg)": [[141, "tensorly.tenalg.get_backend"]], "higher_order_moment() (in module tensorly.tenalg)": [[142, "tensorly.tenalg.higher_order_moment"]], "inner() (in module tensorly.tenalg)": [[143, "tensorly.tenalg.inner"]], "khatri_rao() (in module tensorly.tenalg)": [[144, "tensorly.tenalg.khatri_rao"]], "kronecker() (in module tensorly.tenalg)": [[145, "tensorly.tenalg.kronecker"]], "mode_dot() (in module tensorly.tenalg)": [[146, "tensorly.tenalg.mode_dot"]], "multi_mode_dot() (in module tensorly.tenalg)": [[147, "tensorly.tenalg.multi_mode_dot"]], "outer() (in module tensorly.tenalg)": [[148, "tensorly.tenalg.outer"]], "procrustes() (in module tensorly.tenalg.proximal)": [[149, "tensorly.tenalg.proximal.procrustes"]], "soft_thresholding() (in module tensorly.tenalg.proximal)": [[150, "tensorly.tenalg.proximal.soft_thresholding"]], "svd_thresholding() (in module tensorly.tenalg.proximal)": [[151, "tensorly.tenalg.proximal.svd_thresholding"]], "set_backend() (in module tensorly.tenalg)": [[152, "tensorly.tenalg.set_backend"]], "tensordot() (in module tensorly.tenalg)": [[153, "tensorly.tenalg.tensordot"]], "unfolding_dot_khatri_rao() (in module tensorly.tenalg)": [[154, "tensorly.tenalg.unfolding_dot_khatri_rao"]], "tensor() (in module tensorly)": [[155, "tensorly.tensor"]], "tensordot() (in module tensorly)": [[156, "tensorly.tensordot"]], "to_numpy() (in module tensorly)": [[157, "tensorly.to_numpy"]], "transpose() (in module tensorly)": [[158, "tensorly.transpose"]], "tt_matrix_to_tensor() (in module tensorly.tt_matrix)": [[159, "tensorly.tt_matrix.tt_matrix_to_tensor"]], "tt_matrix_to_unfolded() (in module tensorly.tt_matrix)": [[160, "tensorly.tt_matrix.tt_matrix_to_unfolded"]], "tt_matrix_to_vec() (in module tensorly.tt_matrix)": [[161, "tensorly.tt_matrix.tt_matrix_to_vec"]], "pad_tt_rank() (in module tensorly.tt_tensor)": [[162, "tensorly.tt_tensor.pad_tt_rank"]], "tt_to_tensor() (in module tensorly.tt_tensor)": [[163, "tensorly.tt_tensor.tt_to_tensor"]], "tt_to_unfolded() (in module tensorly.tt_tensor)": [[164, "tensorly.tt_tensor.tt_to_unfolded"]], "tt_to_vec() (in module tensorly.tt_tensor)": [[165, "tensorly.tt_tensor.tt_to_vec"]], "tucker_mode_dot() (in module tensorly.tucker_tensor)": [[166, "tensorly.tucker_tensor.tucker_mode_dot"]], "tucker_to_tensor() (in module tensorly.tucker_tensor)": [[167, "tensorly.tucker_tensor.tucker_to_tensor"]], "tucker_to_unfolded() (in module tensorly.tucker_tensor)": [[168, "tensorly.tucker_tensor.tucker_to_unfolded"]], "tucker_to_vec() (in module tensorly.tucker_tensor)": [[169, "tensorly.tucker_tensor.tucker_to_vec"]], "where() (in module tensorly)": [[170, "tensorly.where"]], "zeros() (in module tensorly)": [[171, "tensorly.zeros"]], "zeros_like() (in module tensorly)": [[172, "tensorly.zeros_like"]], "tucker() (in module tensorly.decomposition)": [[173, "tensorly.decomposition.tucker"]]}})