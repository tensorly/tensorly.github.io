Search.setIndex({"docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_IL2", "auto_examples/applications/plot_covid", "auto_examples/applications/plot_image_compression", "auto_examples/applications/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_cp_line_search", "auto_examples/decomposition/plot_guide_for_constrained_cp", "auto_examples/decomposition/plot_nn_cp_hals", "auto_examples/decomposition/plot_nn_tucker", "auto_examples/decomposition/plot_parafac2", "auto_examples/decomposition/plot_permute_factors", "auto_examples/decomposition/sg_execution_times", "auto_examples/index", "auto_examples/plot_tensor", "auto_examples/regression/index", "auto_examples/regression/plot_cp_regression", "auto_examples/regression/plot_tucker_regression", "auto_examples/regression/sg_execution_times", "auto_examples/sg_execution_times", "development_guide/backend_system", "development_guide/contributing", "development_guide/documentation", "development_guide/index", "home", "index", "installation", "modules/api", "modules/generated/parafac2-function", "modules/generated/tensorly.abs", "modules/generated/tensorly.all", "modules/generated/tensorly.arange", "modules/generated/tensorly.argmax", "modules/generated/tensorly.argmin", "modules/generated/tensorly.backend_context", "modules/generated/tensorly.base.fold", "modules/generated/tensorly.base.partial_fold", "modules/generated/tensorly.base.partial_tensor_to_vec", "modules/generated/tensorly.base.partial_unfold", "modules/generated/tensorly.base.partial_vec_to_tensor", "modules/generated/tensorly.base.tensor_to_vec", "modules/generated/tensorly.base.unfold", "modules/generated/tensorly.base.vec_to_tensor", "modules/generated/tensorly.check_random_state", "modules/generated/tensorly.clip", "modules/generated/tensorly.concatenate", "modules/generated/tensorly.conj", "modules/generated/tensorly.context", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.parafac", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.contrib.sparse.decomposition.tucker", "modules/generated/tensorly.copy", "modules/generated/tensorly.cp_tensor.cp_mode_dot", "modules/generated/tensorly.cp_tensor.cp_norm", "modules/generated/tensorly.cp_tensor.cp_normalize", "modules/generated/tensorly.cp_tensor.cp_permute_factors", "modules/generated/tensorly.cp_tensor.cp_to_tensor", "modules/generated/tensorly.cp_tensor.cp_to_unfolded", "modules/generated/tensorly.cp_tensor.cp_to_vec", "modules/generated/tensorly.datasets.fetch_indian_pines", "modules/generated/tensorly.datasets.fetch_kinetic", "modules/generated/tensorly.datasets.load_IL2data", "modules/generated/tensorly.datasets.load_covid19_serology", "modules/generated/tensorly.datasets.synthetic.gen_image", "modules/generated/tensorly.decomposition.CP", "modules/generated/tensorly.decomposition.CPPower", "modules/generated/tensorly.decomposition.CP_NN_HALS", "modules/generated/tensorly.decomposition.ConstrainedCP", "modules/generated/tensorly.decomposition.Parafac2", "modules/generated/tensorly.decomposition.RandomizedCP", "modules/generated/tensorly.decomposition.SymmetricCP", "modules/generated/tensorly.decomposition.TensorRing", "modules/generated/tensorly.decomposition.TensorTrain", "modules/generated/tensorly.decomposition.TensorTrainMatrix", "modules/generated/tensorly.decomposition.Tucker", "modules/generated/tensorly.decomposition.constrained_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac_hals", "modules/generated/tensorly.decomposition.non_negative_tucker", "modules/generated/tensorly.decomposition.non_negative_tucker_hals", "modules/generated/tensorly.decomposition.parafac", "modules/generated/tensorly.decomposition.parafac_power_iteration", "modules/generated/tensorly.decomposition.partial_tucker", "modules/generated/tensorly.decomposition.power_iteration", "modules/generated/tensorly.decomposition.randomised_parafac", "modules/generated/tensorly.decomposition.robust_pca", "modules/generated/tensorly.decomposition.sample_khatri_rao", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.decomposition.symmetric_power_iteration", "modules/generated/tensorly.decomposition.tensor_ring", "modules/generated/tensorly.decomposition.tensor_train", "modules/generated/tensorly.decomposition.tensor_train_matrix", "modules/generated/tensorly.diag", "modules/generated/tensorly.dot", "modules/generated/tensorly.eps", "modules/generated/tensorly.eye", "modules/generated/tensorly.finfo", "modules/generated/tensorly.get_backend", "modules/generated/tensorly.index", "modules/generated/tensorly.index_update", "modules/generated/tensorly.is_tensor", "modules/generated/tensorly.kr", "modules/generated/tensorly.kron", "modules/generated/tensorly.matmul", "modules/generated/tensorly.max", "modules/generated/tensorly.mean", "modules/generated/tensorly.metrics.correlation_index", "modules/generated/tensorly.metrics.factors.congruence_coefficient", "modules/generated/tensorly.metrics.regression.MSE", "modules/generated/tensorly.metrics.regression.RMSE", "modules/generated/tensorly.min", "modules/generated/tensorly.moveaxis", "modules/generated/tensorly.ndim", "modules/generated/tensorly.norm", "modules/generated/tensorly.ones", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec", "modules/generated/tensorly.plugins.use_cuquantum", "modules/generated/tensorly.plugins.use_default_einsum", "modules/generated/tensorly.plugins.use_opt_einsum", "modules/generated/tensorly.prod", "modules/generated/tensorly.qr", "modules/generated/tensorly.random.random_cp", "modules/generated/tensorly.random.random_parafac2", "modules/generated/tensorly.random.random_tt", "modules/generated/tensorly.random.random_tt_matrix", "modules/generated/tensorly.random.random_tucker", "modules/generated/tensorly.regression.CP_PLSR", "modules/generated/tensorly.regression.cp_regression.CPRegressor", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor", "modules/generated/tensorly.reshape", "modules/generated/tensorly.set_backend", "modules/generated/tensorly.shape", "modules/generated/tensorly.sign", "modules/generated/tensorly.solve", "modules/generated/tensorly.sort", "modules/generated/tensorly.sqrt", "modules/generated/tensorly.stack", "modules/generated/tensorly.sum", "modules/generated/tensorly.tenalg.backend_context", "modules/generated/tensorly.tenalg.batched_outer", "modules/generated/tensorly.tenalg.get_backend", "modules/generated/tensorly.tenalg.higher_order_moment", "modules/generated/tensorly.tenalg.inner", "modules/generated/tensorly.tenalg.khatri_rao", "modules/generated/tensorly.tenalg.kronecker", "modules/generated/tensorly.tenalg.mode_dot", "modules/generated/tensorly.tenalg.multi_mode_dot", "modules/generated/tensorly.tenalg.outer", "modules/generated/tensorly.tenalg.proximal.procrustes", "modules/generated/tensorly.tenalg.proximal.soft_thresholding", "modules/generated/tensorly.tenalg.proximal.svd_thresholding", "modules/generated/tensorly.tenalg.set_backend", "modules/generated/tensorly.tenalg.svd_interface", "modules/generated/tensorly.tenalg.tensordot", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao", "modules/generated/tensorly.tensor", "modules/generated/tensorly.tensordot", "modules/generated/tensorly.to_numpy", "modules/generated/tensorly.transpose", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec", "modules/generated/tensorly.tt_tensor.pad_tt_rank", "modules/generated/tensorly.tt_tensor.tt_to_tensor", "modules/generated/tensorly.tt_tensor.tt_to_unfolded", "modules/generated/tensorly.tt_tensor.tt_to_vec", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded", "modules/generated/tensorly.tucker_tensor.tucker_to_vec", "modules/generated/tensorly.where", "modules/generated/tensorly.zeros", "modules/generated/tensorly.zeros_like", "modules/generated/tucker-function", "user_guide/backend", "user_guide/index", "user_guide/quickstart", "user_guide/sparse_backend", "user_guide/tensor_basics", "user_guide/tensor_decomposition", "user_guide/tensor_regression"], "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_IL2.rst", "auto_examples/applications/plot_covid.rst", "auto_examples/applications/plot_image_compression.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_cp_line_search.rst", "auto_examples/decomposition/plot_guide_for_constrained_cp.rst", "auto_examples/decomposition/plot_nn_cp_hals.rst", "auto_examples/decomposition/plot_nn_tucker.rst", "auto_examples/decomposition/plot_parafac2.rst", "auto_examples/decomposition/plot_permute_factors.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_tensor.rst", "auto_examples/regression/index.rst", "auto_examples/regression/plot_cp_regression.rst", "auto_examples/regression/plot_tucker_regression.rst", "auto_examples/regression/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "development_guide/backend_system.rst", "development_guide/contributing.rst", "development_guide/documentation.rst", "development_guide/index.rst", "home.rst", "index.rst", "installation.rst", "modules/api.rst", "modules/generated/parafac2-function.rst", "modules/generated/tensorly.abs.rst", "modules/generated/tensorly.all.rst", "modules/generated/tensorly.arange.rst", "modules/generated/tensorly.argmax.rst", "modules/generated/tensorly.argmin.rst", "modules/generated/tensorly.backend_context.rst", "modules/generated/tensorly.base.fold.rst", "modules/generated/tensorly.base.partial_fold.rst", "modules/generated/tensorly.base.partial_tensor_to_vec.rst", "modules/generated/tensorly.base.partial_unfold.rst", "modules/generated/tensorly.base.partial_vec_to_tensor.rst", "modules/generated/tensorly.base.tensor_to_vec.rst", "modules/generated/tensorly.base.unfold.rst", "modules/generated/tensorly.base.vec_to_tensor.rst", "modules/generated/tensorly.check_random_state.rst", "modules/generated/tensorly.clip.rst", "modules/generated/tensorly.concatenate.rst", "modules/generated/tensorly.conj.rst", "modules/generated/tensorly.context.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca.rst", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.contrib.sparse.decomposition.tucker.rst", "modules/generated/tensorly.copy.rst", "modules/generated/tensorly.cp_tensor.cp_mode_dot.rst", "modules/generated/tensorly.cp_tensor.cp_norm.rst", "modules/generated/tensorly.cp_tensor.cp_normalize.rst", "modules/generated/tensorly.cp_tensor.cp_permute_factors.rst", "modules/generated/tensorly.cp_tensor.cp_to_tensor.rst", "modules/generated/tensorly.cp_tensor.cp_to_unfolded.rst", "modules/generated/tensorly.cp_tensor.cp_to_vec.rst", "modules/generated/tensorly.datasets.fetch_indian_pines.rst", "modules/generated/tensorly.datasets.fetch_kinetic.rst", "modules/generated/tensorly.datasets.load_IL2data.rst", "modules/generated/tensorly.datasets.load_covid19_serology.rst", "modules/generated/tensorly.datasets.synthetic.gen_image.rst", "modules/generated/tensorly.decomposition.CP.rst", "modules/generated/tensorly.decomposition.CPPower.rst", "modules/generated/tensorly.decomposition.CP_NN_HALS.rst", "modules/generated/tensorly.decomposition.ConstrainedCP.rst", "modules/generated/tensorly.decomposition.Parafac2.rst", "modules/generated/tensorly.decomposition.RandomizedCP.rst", "modules/generated/tensorly.decomposition.SymmetricCP.rst", "modules/generated/tensorly.decomposition.TensorRing.rst", "modules/generated/tensorly.decomposition.TensorTrain.rst", "modules/generated/tensorly.decomposition.TensorTrainMatrix.rst", "modules/generated/tensorly.decomposition.Tucker.rst", "modules/generated/tensorly.decomposition.constrained_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac_hals.rst", "modules/generated/tensorly.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.decomposition.non_negative_tucker_hals.rst", "modules/generated/tensorly.decomposition.parafac.rst", "modules/generated/tensorly.decomposition.parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.partial_tucker.rst", "modules/generated/tensorly.decomposition.power_iteration.rst", "modules/generated/tensorly.decomposition.randomised_parafac.rst", "modules/generated/tensorly.decomposition.robust_pca.rst", "modules/generated/tensorly.decomposition.sample_khatri_rao.rst", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.symmetric_power_iteration.rst", "modules/generated/tensorly.decomposition.tensor_ring.rst", "modules/generated/tensorly.decomposition.tensor_train.rst", "modules/generated/tensorly.decomposition.tensor_train_matrix.rst", "modules/generated/tensorly.diag.rst", "modules/generated/tensorly.dot.rst", "modules/generated/tensorly.eps.rst", "modules/generated/tensorly.eye.rst", "modules/generated/tensorly.finfo.rst", "modules/generated/tensorly.get_backend.rst", "modules/generated/tensorly.index.rst", "modules/generated/tensorly.index_update.rst", "modules/generated/tensorly.is_tensor.rst", "modules/generated/tensorly.kr.rst", "modules/generated/tensorly.kron.rst", "modules/generated/tensorly.matmul.rst", "modules/generated/tensorly.max.rst", "modules/generated/tensorly.mean.rst", "modules/generated/tensorly.metrics.correlation_index.rst", "modules/generated/tensorly.metrics.factors.congruence_coefficient.rst", "modules/generated/tensorly.metrics.regression.MSE.rst", "modules/generated/tensorly.metrics.regression.RMSE.rst", "modules/generated/tensorly.min.rst", "modules/generated/tensorly.moveaxis.rst", "modules/generated/tensorly.ndim.rst", "modules/generated/tensorly.norm.rst", "modules/generated/tensorly.ones.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec.rst", "modules/generated/tensorly.plugins.use_cuquantum.rst", "modules/generated/tensorly.plugins.use_default_einsum.rst", "modules/generated/tensorly.plugins.use_opt_einsum.rst", "modules/generated/tensorly.prod.rst", "modules/generated/tensorly.qr.rst", "modules/generated/tensorly.random.random_cp.rst", "modules/generated/tensorly.random.random_parafac2.rst", "modules/generated/tensorly.random.random_tt.rst", "modules/generated/tensorly.random.random_tt_matrix.rst", "modules/generated/tensorly.random.random_tucker.rst", "modules/generated/tensorly.regression.CP_PLSR.rst", "modules/generated/tensorly.regression.cp_regression.CPRegressor.rst", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor.rst", "modules/generated/tensorly.reshape.rst", "modules/generated/tensorly.set_backend.rst", "modules/generated/tensorly.shape.rst", "modules/generated/tensorly.sign.rst", "modules/generated/tensorly.solve.rst", "modules/generated/tensorly.sort.rst", "modules/generated/tensorly.sqrt.rst", "modules/generated/tensorly.stack.rst", "modules/generated/tensorly.sum.rst", "modules/generated/tensorly.tenalg.backend_context.rst", "modules/generated/tensorly.tenalg.batched_outer.rst", "modules/generated/tensorly.tenalg.get_backend.rst", "modules/generated/tensorly.tenalg.higher_order_moment.rst", "modules/generated/tensorly.tenalg.inner.rst", "modules/generated/tensorly.tenalg.khatri_rao.rst", "modules/generated/tensorly.tenalg.kronecker.rst", "modules/generated/tensorly.tenalg.mode_dot.rst", "modules/generated/tensorly.tenalg.multi_mode_dot.rst", "modules/generated/tensorly.tenalg.outer.rst", "modules/generated/tensorly.tenalg.proximal.procrustes.rst", "modules/generated/tensorly.tenalg.proximal.soft_thresholding.rst", "modules/generated/tensorly.tenalg.proximal.svd_thresholding.rst", "modules/generated/tensorly.tenalg.set_backend.rst", "modules/generated/tensorly.tenalg.svd_interface.rst", "modules/generated/tensorly.tenalg.tensordot.rst", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao.rst", "modules/generated/tensorly.tensor.rst", "modules/generated/tensorly.tensordot.rst", "modules/generated/tensorly.to_numpy.rst", "modules/generated/tensorly.transpose.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec.rst", "modules/generated/tensorly.tt_tensor.pad_tt_rank.rst", "modules/generated/tensorly.tt_tensor.tt_to_tensor.rst", "modules/generated/tensorly.tt_tensor.tt_to_unfolded.rst", "modules/generated/tensorly.tt_tensor.tt_to_vec.rst", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_vec.rst", "modules/generated/tensorly.where.rst", "modules/generated/tensorly.zeros.rst", "modules/generated/tensorly.zeros_like.rst", "modules/generated/tucker-function.rst", "user_guide/backend.rst", "user_guide/index.rst", "user_guide/quickstart.rst", "user_guide/sparse_backend.rst", "user_guide/tensor_basics.rst", "user_guide/tensor_decomposition.rst", "user_guide/tensor_regression.rst"], "titles": ["About us", "Practical applications of tensor methods", "Non-negative PARAFAC Decomposition of IL-2 Response Data", "COVID-19 Serology Dataset Analysis with CP", "Image compression via tensor decomposition", "Computation times", "Tensor decomposition", "Using line search with PARAFAC", "Constrained CP decomposition in Tensorly &gt;=0.7", "Non-negative CP decomposition in Tensorly &gt;=0.6", "Non-negative Tucker decomposition in Tensorly &gt;=0.6", "Demonstration of PARAFAC2", "Permuting CP factors", "Computation times", "Gallery of examples", "Basic tensor operations", "Tensor regression with tensorly", "CP tensor regression", "Tucker tensor regression", "Computation times", "Computation times", "Backend System", "Contributing", "Writing documentation", "Development guide", "&lt;no title&gt;", "TensorLy: Tensor Learning in Python", "Installing tensorly", "API reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.abs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.all", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.arange", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmax", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.clip", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.concatenate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.conj", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_OI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_cross", "tensorly.contrib.sparse.decomposition.non_negative_parafac", "tensorly.contrib.sparse.decomposition.non_negative_tucker", "tensorly.contrib.sparse.decomposition.parafac", "tensorly.contrib.sparse.decomposition.partial_tucker", "tensorly.contrib.sparse.decomposition.robust_pca", "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "tensorly.contrib.sparse.decomposition.tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.copy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_permute_factors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.fetch_indian_pines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.fetch_kinetic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_IL2data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_covid19_serology", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets.synthetic</span></code>.gen_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CPPower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP_NN_HALS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.ConstrainedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.RandomizedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.SymmetricCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorRing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrainMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.constrained_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.partial_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.randomised_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.robust_pca", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.sample_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_ring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.diag", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eps", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eye", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.finfo", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index_update", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.is_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.matmul", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.max", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics</span></code>.correlation_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.factors</span></code>.congruence_coefficient", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.MSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.RMSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.moveaxis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ndim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ones", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slice", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_cuquantum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_default_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_opt_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.prod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.qr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_cp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression</span></code>.CP_PLSR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.cp_regression</span></code>.CPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.tucker_regression</span></code>.TuckerRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.reshape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.shape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sign", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.solve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sort", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sqrt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.stack", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.batched_outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.higher_order_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.inner", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.kronecker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.multi_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.procrustes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.soft_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.svd_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.svd_interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.unfolding_dot_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.to_numpy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.transpose", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.pad_tt_rank", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.where", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros_like", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tucker", "<span class=\"section-number\">2. </span>TensorLy\u2019s backend system", "User guide", "<span class=\"section-number\">1. </span>Quick-Start", "<span class=\"section-number\">6. </span>Sparse Backend", "<span class=\"section-number\">3. </span>Tensor basics", "<span class=\"section-number\">4. </span>Tensor decomposition", "<span class=\"section-number\">5. </span>Tensor regression"], "terms": {"tensorli": [0, 1, 2, 4, 6, 7, 11, 12, 13, 15, 17, 18, 21, 22, 23, 26, 186, 188, 189, 190, 191], "wa": [0, 27, 29, 75, 100, 131, 140, 145, 146, 170, 174, 188], "creat": [0, 17, 18, 22, 23, 28, 29, 30, 47, 58, 75, 79, 93, 98, 99, 122, 123, 124, 125, 126, 132, 134, 135, 136, 143, 145, 146, 183, 185, 186, 187, 188, 190], "2015": 0, "jean": [0, 26], "kossaifi": [0, 26], "make": [0, 2, 9, 11, 22, 26, 27, 28, 50, 140, 145, 163, 185, 188, 190], "tensor": [0, 2, 3, 5, 7, 8, 19, 20, 21, 23, 24, 26, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 113, 114, 119, 120, 122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 136, 137, 138, 139, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 188], "method": [0, 3, 8, 9, 10, 12, 21, 22, 26, 28, 31, 58, 62, 66, 74, 82, 100, 111, 112, 113, 117, 130, 140, 142, 145, 148, 163, 169, 185, 187, 190, 191], "access": [0, 185, 187], "easi": [0, 15, 26, 185], "It": [0, 3, 8, 11, 12, 21, 22, 27, 31, 33, 34, 63, 100, 110, 130, 140, 145, 148, 185, 188], "first": [0, 2, 3, 8, 9, 10, 11, 22, 27, 28, 29, 31, 33, 34, 38, 39, 46, 50, 63, 75, 78, 79, 96, 98, 100, 109, 110, 111, 113, 117, 122, 123, 130, 131, 137, 140, 145, 147, 148, 153, 167, 185, 189, 190, 191], "present": [0, 2, 27, 111, 117, 190], "neurip": 0, "workshop": 0, "learn": [0, 17, 18, 26, 44, 51, 83, 137, 138, 139, 185, 187, 191], "why": [0, 186, 187], "now": [0, 2, 3, 9, 11, 12, 27, 110, 127, 129, 145, 185, 187, 188, 190], "how": [0, 1, 2, 3, 4, 7, 8, 11, 12, 14, 15, 17, 18, 24, 32, 169, 173, 186, 188, 190], "later": [0, 22], "publish": 0, "jmlr": [0, 26], "paper": [0, 26], "titl": [0, 8, 9, 10, 11, 24, 26], "python": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 23, 26, 32, 58, 110, 111, 117, 129, 148, 189], "yanni": [0, 26], "panagaki": [0, 26], "anima": [0, 26], "anandkumar": [0, 26], "maja": [0, 26], "pantic": [0, 26], "built": [0, 23, 32], "top": [0, 11], "numpi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 15, 21, 23, 24, 26, 31, 32, 35, 44, 93, 99, 100, 102, 110, 111, 112, 117, 121, 130, 131, 144, 145, 148, 149, 182, 185, 187, 188, 189, 190], "scipi": [0, 4, 11, 12, 62, 131, 144, 188], "onli": [0, 2, 8, 9, 10, 11, 12, 21, 22, 23, 27, 28, 30, 33, 34, 35, 47, 49, 50, 53, 55, 57, 71, 73, 81, 87, 92, 93, 110, 111, 117, 131, 140, 143, 146, 148, 149, 154, 173, 181, 184, 187, 188], "In": [0, 2, 3, 8, 9, 10, 23, 24, 26, 27, 28, 32, 33, 34, 36, 46, 51, 61, 74, 82, 83, 86, 100, 102, 109, 112, 113, 121, 130, 131, 140, 145, 148, 165, 182, 185, 187, 188, 189, 190], "order": [0, 2, 8, 9, 12, 29, 30, 47, 49, 50, 54, 56, 57, 58, 62, 74, 75, 78, 80, 81, 82, 86, 89, 94, 95, 96, 97, 102, 110, 118, 120, 121, 129, 140, 143, 145, 146, 152, 153, 154, 155, 167, 169, 182, 183, 184, 190], "combin": [0, 22, 28, 185, 187, 190], "deep": [0, 26, 185, 187], "run": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 185, 187], "them": [0, 3, 21, 23, 137, 185, 188], "multipl": [0, 2, 9, 10, 21, 31, 33, 34, 46, 51, 52, 53, 71, 73, 81, 83, 85, 87, 100, 110, 111, 112, 117, 145, 147, 187], "devic": [0, 28, 185], "cpu": [0, 28, 186], "gpu": [0, 26, 28, 186, 187], "flexibl": [0, 8, 26, 74, 82, 100], "backend": [0, 24, 26, 35, 104, 127, 128, 129, 141, 149, 151, 160, 162, 186], "system": [0, 2, 3, 8, 22, 24, 26, 53, 69, 71, 73, 74, 82, 87, 127, 129, 144, 186, 187], "ad": [0, 22, 131, 145, 148, 169], "thi": [0, 2, 8, 9, 10, 11, 12, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 46, 47, 50, 53, 54, 58, 60, 63, 66, 71, 73, 74, 75, 78, 80, 82, 86, 87, 89, 96, 97, 99, 100, 102, 110, 111, 112, 113, 117, 118, 121, 122, 123, 124, 125, 126, 130, 131, 137, 140, 143, 145, 146, 147, 148, 149, 154, 165, 169, 171, 175, 181, 182, 185, 187, 188, 189, 190, 191], "allow": [0, 2, 3, 21, 28, 29, 32, 50, 53, 71, 73, 76, 78, 80, 87, 91, 96, 97, 102, 110, 111, 117, 121, 182, 185, 187, 191], "algorithm": [0, 8, 9, 10, 11, 22, 28, 29, 50, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 145, 163, 184, 186], "written": [0, 188], "ran": 0, "ani": [0, 8, 22, 26, 28, 29, 31, 32, 75, 111, 112, 117, 130, 145, 146, 148, 154, 157, 178, 179, 180, 185], "major": [0, 102, 121, 182], "framework": [0, 8, 26, 74, 82, 187], "pytorch": [0, 21, 22, 26, 28, 35, 127, 129, 149, 186, 187, 188], "mxnet": [0, 22, 26, 28, 35, 149, 185, 187], "tensorflow": [0, 21, 22, 26, 28, 35, 149, 185, 187, 188], "cupi": [0, 22, 26, 28, 35, 149, 185, 187], "jax": [0, 22, 26, 28, 185, 187], "i": [0, 2, 3, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 167, 169, 170, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191], "formost": 0, "commun": [0, 190], "aim": [0, 3], "With": [0, 26, 31, 33, 34, 111, 112, 117, 130, 148, 188], "robust": [0, 55, 56, 72, 77, 88, 90, 92, 94, 95, 188], "activ": [0, 2, 3, 26, 29, 53, 71, 73, 74, 75, 82, 86, 87], "group": 0, "contributor": 0, "we": [0, 2, 3, 9, 10, 11, 12, 21, 22, 23, 28, 29, 50, 53, 55, 58, 64, 71, 73, 75, 86, 87, 92, 114, 122, 123, 124, 125, 126, 130, 131, 185, 187, 188, 189, 190, 191], "would": [0, 39, 46, 100, 147, 169, 188], "like": [0, 3, 8, 9, 10, 21, 22, 23, 32, 55, 92, 102, 110, 121, 129, 131, 137, 140, 182, 185, 187, 191], "thank": 0, "all": [0, 10, 14, 22, 23, 26, 27, 28, 29, 35, 50, 52, 53, 54, 57, 58, 61, 63, 64, 65, 70, 71, 73, 74, 75, 78, 80, 81, 82, 84, 85, 86, 87, 89, 91, 96, 97, 102, 111, 112, 113, 114, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 131, 141, 144, 145, 146, 148, 149, 154, 162, 181, 184, 185, 187, 188], "those": [0, 2], "who": 0, "have": [0, 2, 8, 9, 10, 11, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 46, 47, 53, 58, 70, 71, 73, 74, 75, 82, 87, 100, 110, 112, 123, 130, 140, 143, 145, 146, 147, 148, 157, 178, 179, 180, 185, 187, 188, 190], "contribut": [0, 24, 26], "includ": [0, 2, 3, 8, 10, 12, 22, 23, 28, 31, 32, 37, 40, 68, 112, 130, 148, 187], "alphabet": 0, "jeremi": 0, "cohen": 0, "julia": 0, "gusak": 0, "meraj": 0, "hashemizadeh": 0, "aaron": 0, "meurer": 0, "yngve": 0, "mardal": 0, "moe": 0, "meyer": [0, 3], "taylor": [0, 3], "lee": 0, "patti": 0, "mari": 0, "roald": 0, "caglayan": 0, "tuna": 0, "For": [0, 2, 3, 11, 21, 22, 23, 28, 30, 32, 39, 47, 50, 100, 110, 112, 131, 140, 143, 145, 146, 147, 148, 155, 156, 157, 169, 185, 187, 188, 189, 190, 191], "full": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 37, 40, 49, 63, 93, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 136, 144, 165, 170, 171, 174, 175, 178, 182, 185, 187, 189, 190], "list": [0, 8, 11, 12, 27, 29, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 113, 114, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 139, 145, 147, 154, 155, 157, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 184, 188, 190], "check": [0, 11, 22, 28, 31, 144], "github": [0, 22, 26], "page": [0, 8, 12, 22, 26], "The": [0, 8, 9, 10, 11, 12, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 46, 47, 50, 51, 53, 55, 58, 62, 67, 71, 73, 74, 75, 82, 83, 84, 86, 87, 92, 93, 99, 109, 110, 111, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 130, 131, 133, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 153, 165, 167, 169, 173, 181, 182, 183, 185, 187, 188, 189, 190], "project": [0, 11, 22, 23, 29, 74, 75, 82, 122, 123, 124, 125, 126, 165, 188, 190], "ha": [0, 2, 8, 9, 10, 11, 21, 33, 34, 52, 63, 64, 84, 85, 86, 109, 112, 130, 145, 146, 147, 148, 159, 160, 161, 188, 190], "been": [0, 2, 21, 35, 145, 149, 159, 160, 161, 188], "variou": [0, 2, 10, 21, 145, 163, 187], "organ": [0, 109, 186], "univers": [0, 26, 53, 71, 73, 87], "inria": 0, "fund": 0, "time": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 27, 29, 52, 53, 57, 68, 71, 73, 75, 81, 84, 85, 86, 87, 122, 123, 124, 125, 126, 154, 155, 157, 165, 184, 188, 189, 190], "engin": [0, 2], "work": [0, 2, 3, 24, 53, 63, 71, 73, 84, 87, 131, 145, 185, 188], "see": [1, 2, 3, 9, 14, 26, 29, 30, 31, 32, 47, 51, 52, 53, 60, 71, 73, 74, 75, 82, 83, 84, 85, 86, 87, 99, 100, 110, 111, 112, 117, 123, 130, 131, 143, 144, 146, 148, 154, 155, 169, 190], "you": [1, 8, 11, 12, 14, 21, 22, 23, 26, 27, 28, 60, 99, 111, 127, 129, 130, 131, 140, 148, 180, 185, 187, 188, 189, 190, 191], "can": [1, 2, 3, 8, 9, 10, 11, 12, 14, 21, 22, 23, 27, 28, 30, 31, 32, 58, 60, 61, 65, 109, 110, 111, 112, 127, 129, 130, 131, 140, 145, 148, 154, 165, 167, 180, 181, 185, 187, 188, 189, 190, 191], "us": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 27, 28, 29, 30, 32, 35, 44, 46, 51, 52, 53, 54, 57, 58, 60, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 96, 97, 98, 99, 100, 104, 105, 106, 110, 111, 112, 117, 122, 123, 124, 125, 126, 127, 129, 130, 131, 136, 140, 143, 144, 145, 148, 149, 151, 156, 157, 163, 165, 167, 169, 173, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191], "dataset": [1, 2, 5, 11, 14, 17, 18, 186], "imag": [1, 5, 14, 17, 18, 70, 143, 185, 191], "compress": [1, 5, 14], "via": [1, 5, 14, 21, 29, 30, 32, 47, 49, 50, 53, 54, 55, 56, 57, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 87, 88, 89, 91, 92, 94, 96, 97, 102, 121, 131, 143, 146, 182, 184, 188], "decomposit": [1, 5, 7, 11, 13, 22, 26, 66, 68, 113, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 154, 155, 170, 174, 179, 180, 185, 186, 188, 189, 191], "non": [1, 5, 6, 8, 13, 14, 27, 29, 31, 32, 51, 52, 53, 66, 68, 71, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 111, 112, 117, 130, 140, 145, 146, 148, 163, 167, 188, 190], "neg": [1, 3, 5, 6, 8, 13, 14, 29, 31, 51, 52, 66, 68, 73, 74, 75, 81, 82, 83, 84, 85, 86, 102, 130, 146, 148, 163, 167, 190], "parafac": [1, 3, 4, 5, 6, 8, 13, 14, 22, 28, 29, 67, 71, 73, 74, 75, 82, 186, 187, 188], "il": [1, 5, 14, 68], "2": [1, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 17, 18, 22, 23, 27, 29, 30, 32, 33, 34, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 60, 63, 68, 71, 72, 73, 74, 75, 77, 79, 82, 83, 85, 86, 87, 88, 92, 94, 98, 99, 100, 102, 109, 110, 111, 112, 117, 118, 120, 121, 130, 131, 137, 140, 142, 144, 145, 146, 147, 148, 160, 163, 167, 169, 171, 175, 181, 182, 183, 185, 187, 188, 189, 190, 191], "respons": [1, 3, 5, 14, 68, 137], "data": [1, 3, 5, 9, 10, 11, 14, 17, 18, 28, 29, 32, 46, 49, 55, 58, 66, 67, 75, 92, 102, 103, 111, 112, 117, 121, 130, 131, 137, 138, 139, 140, 145, 147, 166, 182, 183, 187, 188, 191], "covid": [1, 5, 14, 69], "19": [1, 5, 8, 14, 15, 58, 69, 74, 82, 112, 188, 189], "serologi": [1, 5, 14, 69], "analysi": [1, 5, 14, 53, 71, 73, 87], "cp": [1, 4, 5, 6, 7, 11, 13, 14, 16, 19, 22, 29, 51, 52, 53, 56, 59, 60, 62, 68, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 91, 94, 132, 137, 138, 186, 187, 191], "click": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "here": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 23, 27, 29, 32, 75, 113, 127, 129, 143, 185, 188, 190], "download": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "exampl": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 24, 26, 30, 31, 32, 33, 34, 35, 46, 47, 50, 58, 69, 99, 100, 102, 105, 109, 110, 111, 112, 117, 118, 121, 127, 129, 130, 131, 140, 142, 143, 144, 145, 146, 147, 148, 149, 160, 167, 169, 181, 182, 183, 186, 189], "code": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 23, 26, 28, 50, 165, 185, 187], "provid": [2, 3, 8, 9, 21, 26, 28, 30, 33, 34, 46, 47, 54, 57, 81, 89, 110, 112, 120, 131, 137, 138, 139, 143, 146, 147, 148, 157, 169, 178, 179, 180, 181, 184, 185, 187], "an": [2, 3, 8, 9, 10, 11, 12, 22, 26, 27, 29, 30, 31, 32, 33, 34, 46, 47, 55, 58, 63, 64, 69, 70, 71, 72, 73, 74, 75, 82, 84, 86, 92, 99, 100, 102, 105, 110, 111, 112, 117, 118, 121, 122, 123, 124, 125, 126, 127, 130, 131, 140, 142, 143, 145, 146, 147, 148, 167, 169, 179, 181, 182, 183, 185, 188, 189], "reduc": [2, 31, 33, 34, 111, 112, 117, 130, 131, 148], "dimension": [2, 3, 28, 33, 34, 121, 130, 131, 182, 185, 189, 190], "experiment": [2, 186], "insight": 2, "about": [2, 10, 22, 26, 103, 188], "underli": [2, 3, 23, 140, 173], "structur": [2, 3, 8, 11, 23, 109, 145, 187, 188], "To": [2, 3, 8, 10, 11, 22, 27, 28, 29, 58, 75, 111, 117, 122, 123, 124, 125, 126, 169, 185, 187], "do": [2, 3, 22, 23, 186], "measur": [2, 3, 185, 187], "cell": [2, 3, 68], "signal": [2, 3, 8, 68, 74, 82], "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 30, 35, 58, 110, 127, 129, 149, 160, 185, 187, 188, 189, 190], "np": [2, 3, 4, 7, 8, 9, 10, 11, 15, 21, 22, 29, 30, 31, 32, 33, 34, 44, 46, 47, 50, 51, 52, 53, 54, 57, 58, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 87, 89, 91, 99, 100, 102, 109, 110, 111, 112, 117, 118, 121, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 154, 167, 169, 181, 182, 183, 184, 185, 188, 189, 190], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "plt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 30], "from": [2, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 26, 27, 28, 29, 31, 32, 33, 34, 46, 49, 50, 61, 66, 67, 75, 93, 102, 109, 110, 113, 122, 123, 124, 125, 126, 127, 129, 130, 137, 140, 143, 146, 147, 148, 160, 171, 175, 181, 185, 187, 188, 189, 190, 191], "load_il2data": 2, "non_negative_parafac": [2, 9, 188], "cp_tensor": [2, 9, 12, 165, 185, 187, 188], "cp_normal": 2, "load": [2, 24, 28, 66, 67, 68, 69, 113, 141, 162, 187], "cellular": 2, "stimul": 2, "natur": 2, "occur": [2, 12, 32, 46, 62, 147, 148], "immun": [2, 3], "molecul": 2, "which": [2, 8, 9, 11, 12, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 46, 47, 50, 51, 53, 54, 57, 58, 59, 70, 71, 73, 74, 75, 81, 82, 83, 84, 87, 89, 101, 102, 103, 106, 110, 111, 112, 113, 117, 121, 130, 131, 132, 134, 135, 143, 145, 146, 147, 148, 156, 159, 160, 161, 164, 165, 169, 170, 174, 177, 181, 182, 184, 185, 187, 188, 190, 191], "pharmaceut": 2, "compani": [2, 26], "drug": 2, "design": 2, "attempt": [2, 100, 112, 188], "act": [2, 8], "effect": [2, 53, 71, 73, 87], "immunotherapi": 2, "therapi": 2, "alter": [2, 3], "": [2, 3, 22, 23, 24, 26, 27, 31, 44, 52, 85, 111, 117, 121, 127, 129, 140, 148, 153, 163, 167, 182, 186, 187, 188, 189, 190], "increas": [2, 8, 55, 92, 173], "decreas": [2, 8, 29, 74, 75, 76, 82, 91], "its": [2, 8, 12, 22, 28, 30, 31, 47, 50, 99, 100, 110, 113, 140, 143, 146, 169, 171, 172, 173, 175, 176, 187, 189, 190], "interact": [2, 3, 21], "particular": [2, 9, 11, 21, 22, 23, 27, 100], "type": [2, 3, 21, 23, 29, 31, 32, 53, 68, 71, 73, 74, 75, 82, 87, 100, 102, 103, 111, 112, 117, 121, 130, 131, 145, 148, 182, 183, 187, 191], "through": [2, 28, 31, 58, 111, 112, 117, 130, 148, 185, 187, 191], "jak": 2, "stat": 2, "pathwai": 2, "transmit": 2, "phosphoryl": 2, "stat5": 2, "pstat5": 2, "when": [2, 9, 10, 21, 22, 28, 29, 32, 46, 51, 53, 54, 57, 58, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 100, 110, 111, 114, 117, 130, 131, 140, 145, 146, 148, 167, 169, 181, 184, 185, 188], "caus": [2, 3, 112, 148, 188], "prolifer": 2, "depend": [2, 8, 26, 99, 110, 112, 131, 144, 145, 148, 181, 185, 187, 188], "whether": [2, 26, 31, 52, 53, 57, 71, 81, 84, 85, 86, 87, 99, 102, 114, 121, 131, 137, 145, 163, 182, 184, 185, 187, 188], "regulatori": 2, "t": [2, 3, 10, 11, 12, 22, 29, 35, 46, 50, 53, 60, 71, 73, 74, 75, 81, 82, 86, 87, 109, 111, 114, 117, 122, 123, 124, 125, 126, 131, 140, 149, 154, 155, 160, 165, 169, 185, 187, 188, 189, 190], "treg": 2, "effector": 2, "helper": 2, "killer": 2, "cytotox": 2, "thelper": 2, "nk": 2, "cd8": 2, "respond": 2, "result": [2, 3, 9, 10, 12, 22, 23, 27, 30, 31, 32, 33, 34, 46, 47, 70, 84, 86, 99, 102, 110, 111, 112, 117, 118, 121, 130, 131, 140, 143, 146, 147, 148, 153, 163, 165, 167, 180, 182, 183, 188], "immunosuppress": 2, "immunostimul": 2, "respect": [2, 84, 86, 110, 153, 185], "thu": [2, 8, 188], "meant": 2, "repress": 2, "potenti": 2, "treatment": [2, 68], "autoimmun": 2, "diseas": 2, "primarili": 2, "enact": 2, "desir": [2, 53, 64, 71, 73, 87, 112, 121, 140, 182, 185], "convers": [2, 112], "cancer": 2, "achiev": [2, 118, 169], "either": [2, 8, 22, 29, 74, 82, 100, 110, 131, 144, 185, 187], "bia": 2, "variant": [2, 165, 188], "affin": [2, 68], "receptor": [2, 3, 68, 69], "il2r\u03b1": 2, "il2r\u03b2": 2, "furthermor": 2, "bind": [2, 3], "domain": 2, "multival": 2, "mai": [2, 8, 10, 11, 21, 28, 29, 31, 32, 46, 50, 58, 75, 112, 130, 131, 147, 148, 188], "more": [2, 3, 22, 29, 31, 32, 46, 75, 99, 111, 112, 117, 131, 143, 147, 148, 154, 155, 165, 167, 185, 187, 188, 189, 190], "therapeut": 2, "understand": 2, "mutat": 2, "affect": [2, 32, 35, 149], "mutant": [2, 68], "perform": [2, 4, 9, 15, 17, 18, 22, 29, 31, 49, 50, 53, 54, 71, 75, 87, 89, 100, 112, 127, 130, 137, 145, 148, 185, 187, 188, 189, 190, 191], "our": [2, 9, 10, 22, 28, 185, 187, 188, 190], "contain": [2, 28, 29, 30, 49, 51, 53, 56, 58, 68, 71, 72, 73, 75, 77, 83, 84, 87, 88, 93, 94, 112, 122, 123, 124, 125, 126, 131, 145, 146, 163, 167, 169, 187, 188], "8": [2, 8, 11, 15, 29, 32, 52, 74, 75, 82, 84, 85, 86, 99, 130, 131, 144, 145, 167, 181, 188, 189], "differ": [2, 3, 9, 10, 11, 28, 29, 58, 68, 75, 110, 111, 143, 145, 146, 185, 189], "13": [2, 8, 11, 15, 29, 33, 34, 68, 75, 100, 110, 112, 188, 189], "4": [2, 8, 9, 10, 11, 12, 15, 17, 18, 31, 32, 33, 34, 46, 50, 58, 79, 98, 99, 100, 105, 109, 110, 111, 112, 117, 118, 130, 140, 142, 143, 145, 146, 147, 160, 167, 169, 181, 183, 187, 188, 189], "timepoint": 2, "12": [2, 8, 9, 10, 15, 33, 34, 68, 100, 112, 130, 145, 181, 188, 189, 190], "standard": [2, 169], "concentr": [2, 68], "therefor": [2, 8, 9, 10, 22, 28, 37, 39, 42, 100, 189, 190], "shape": [2, 11, 12, 15, 17, 18, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 109, 110, 111, 112, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 154, 155, 156, 158, 159, 160, 163, 165, 167, 169, 170, 177, 178, 181, 182, 183, 184, 185, 187, 188, 189, 190], "x": [2, 11, 17, 18, 27, 29, 30, 33, 34, 39, 47, 55, 58, 60, 75, 79, 92, 98, 99, 118, 122, 123, 124, 125, 126, 130, 131, 137, 138, 139, 142, 143, 144, 146, 181, 182, 183, 188, 189, 191], "dimens": [2, 31, 32, 33, 34, 37, 38, 39, 40, 46, 50, 70, 100, 109, 110, 111, 112, 113, 117, 118, 130, 131, 136, 137, 139, 140, 142, 147, 148, 167, 169, 173, 183, 189, 190, 191], "repres": [2, 3, 10, 21, 133, 170, 173, 174, 185, 188, 190], "dose": [2, 68], "each": [2, 3, 9, 10, 11, 12, 22, 28, 29, 30, 39, 49, 50, 51, 52, 53, 55, 56, 57, 61, 62, 68, 71, 72, 73, 74, 75, 77, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 113, 118, 133, 136, 137, 138, 139, 146, 147, 148, 154, 157, 165, 184, 190, 191], "quantiti": 2, "amount": [2, 3, 8], "phosphorly": 2, "given": [2, 8, 11, 21, 22, 29, 31, 32, 33, 34, 50, 58, 74, 75, 82, 93, 100, 101, 111, 114, 117, 121, 122, 123, 124, 125, 126, 130, 137, 140, 146, 148, 154, 167, 169, 170, 171, 174, 175, 182, 183, 185, 189, 191], "popul": [2, 32], "follow": [2, 8, 9, 10, 11, 23, 28, 29, 75, 86, 110, 131, 145, 167, 188], "specifi": [2, 8, 22, 29, 31, 32, 33, 34, 36, 38, 39, 46, 59, 70, 75, 84, 99, 102, 105, 106, 112, 130, 141, 145, 147, 148, 156, 157, 162, 163, 164, 167, 169, 177, 185], "response_data": 2, "il2mut": 2, "tick": [2, 3], "0": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 29, 31, 32, 33, 34, 37, 38, 39, 40, 42, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 65, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 96, 99, 100, 102, 109, 110, 111, 112, 113, 117, 118, 121, 130, 131, 134, 135, 140, 142, 143, 144, 145, 146, 147, 148, 154, 155, 157, 160, 163, 165, 167, 169, 173, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190], "3": [2, 3, 4, 7, 8, 9, 11, 12, 15, 17, 18, 21, 22, 32, 33, 34, 46, 50, 53, 57, 58, 71, 73, 74, 76, 78, 79, 80, 81, 82, 86, 87, 91, 96, 97, 98, 99, 100, 102, 105, 106, 109, 110, 111, 112, 117, 118, 121, 129, 130, 131, 140, 142, 144, 145, 146, 147, 154, 155, 160, 167, 169, 181, 182, 183, 184, 187, 188, 189, 190], "print": [2, 8, 9, 10, 11, 12, 15, 18, 23, 32, 50, 84, 86, 188, 190], "dim": [2, 3], "ligand": [2, 68], "compon": [2, 12, 29, 51, 53, 55, 56, 62, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 87, 88, 90, 91, 92, 94, 95, 132, 136, 165, 167], "normal": [2, 3, 8, 17, 18, 22, 29, 53, 61, 71, 73, 74, 75, 82, 87, 131, 187], "aid": 2, "futur": [2, 22, 27, 28], "comparison": [2, 7, 111, 117], "correl": 2, "across": [2, 146], "must": [2, 9, 10, 22, 23, 30, 31, 32, 46, 47, 49, 56, 62, 94, 95, 100, 110, 111, 112, 117, 118, 130, 131, 133, 134, 135, 143, 144, 146, 147, 148, 167, 169], "preprocess": 2, "readi": [2, 27], "factor": [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 29, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 96, 97, 113, 122, 123, 124, 125, 126, 131, 132, 134, 135, 136, 154, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190], "few": [2, 8, 9], "miss": [2, 53, 54, 55, 57, 71, 73, 87, 89, 92, 160, 163, 184, 186], "valu": [2, 8, 9, 10, 21, 22, 28, 29, 30, 31, 32, 33, 34, 47, 51, 53, 54, 55, 57, 58, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 96, 97, 98, 102, 105, 106, 110, 111, 112, 114, 115, 116, 117, 121, 130, 131, 137, 138, 139, 140, 143, 144, 145, 146, 148, 160, 161, 163, 181, 182, 183, 184, 185, 186, 190], "so": [2, 10, 11, 22, 28, 29, 62, 75, 113, 131, 146, 167, 173, 188, 190], "gener": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 22, 23, 27, 32, 50, 70, 93, 122, 123, 131, 132, 133, 134, 135, 136, 145, 148, 150, 158, 187, 188], "mask": [2, 46, 51, 53, 54, 55, 57, 63, 71, 73, 81, 83, 87, 89, 92, 108, 154, 160, 163, 184, 188], "mark": 2, "where": [2, 10, 11, 28, 29, 30, 31, 32, 35, 46, 47, 53, 54, 55, 57, 61, 63, 64, 65, 71, 73, 74, 75, 82, 87, 89, 92, 100, 102, 109, 111, 112, 117, 122, 123, 124, 125, 126, 130, 131, 133, 137, 143, 145, 146, 148, 149, 154, 155, 163, 169, 184, 188], "tensor_mask": 2, "isfinit": [2, 3], "ve": 2, "finit": [2, 8], "regener": 2, "without": [2, 7, 29, 66, 67, 75, 84, 86, 90, 95, 100, 140, 173, 187, 188], "response_data_fin": 2, "nan_to_num": [2, 3], "decompos": [2, 9, 10, 11, 50, 54, 55, 56, 57, 71, 72, 73, 74, 75, 78, 79, 80, 81, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 132, 133, 134, 135, 136, 184, 185, 187, 188, 190], "three": [2, 11, 17, 18, 23, 69, 167, 181], "also": [2, 3, 9, 10, 12, 21, 22, 27, 28, 32, 39, 53, 54, 57, 71, 73, 80, 87, 89, 93, 97, 118, 130, 148, 173, 184, 185, 187, 188, 189, 190, 191], "easier": 2, "made": [2, 26, 29, 75, 109, 131], "between": [2, 3, 9, 10, 21, 32, 84, 86, 113, 114, 115, 116, 137, 153, 164], "mean": [2, 9, 10, 11, 22, 29, 58, 75, 114, 115, 116, 130, 140, 148, 183, 185, 187, 190], "magnitud": 2, "sig_tensor_fact": 2, "init": [2, 4, 9, 29, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 184, 185, 188], "random": [2, 4, 7, 8, 9, 10, 11, 12, 17, 18, 22, 29, 44, 50, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 131, 145, 147, 184, 185, 186, 188], "rank": [2, 3, 4, 7, 8, 9, 10, 12, 17, 18, 22, 29, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 96, 97, 98, 113, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 144, 154, 165, 173, 184, 185, 187, 188, 190, 191], "n_iter_max": [2, 3, 7, 10, 11, 17, 18, 29, 50, 51, 52, 53, 54, 55, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 137, 138, 139, 184], "5000": 2, "tol": [2, 3, 4, 7, 10, 11, 17, 18, 29, 50, 51, 52, 53, 54, 55, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 113, 137, 138, 139, 184], "1e": [2, 3, 10, 11, 29, 51, 53, 55, 71, 73, 74, 75, 76, 82, 83, 84, 86, 87, 91, 92, 137, 138, 139], "9": [2, 3, 7, 8, 11, 15, 79, 98, 99, 110, 112, 131, 145, 146, 160, 167, 181, 188, 189], "random_st": [2, 4, 7, 11, 29, 50, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 132, 133, 134, 135, 136, 137, 138, 139, 184], "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 94, 96, 97, 98, 99, 100, 102, 105, 109, 110, 111, 112, 113, 117, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 155, 156, 160, 163, 165, 167, 169, 170, 172, 173, 176, 177, 178, 181, 182, 183, 184, 187, 188, 189, 190, 191], "name": [2, 21, 23, 35, 104, 114, 141, 145, 149, 151, 162, 187], "thei": [2, 9, 28, 110, 145, 167, 185, 190], "ar": [2, 3, 8, 9, 10, 11, 12, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 39, 46, 53, 54, 55, 57, 58, 61, 62, 63, 70, 71, 73, 74, 75, 82, 86, 87, 89, 92, 99, 100, 102, 109, 110, 111, 112, 113, 117, 121, 122, 123, 124, 125, 126, 130, 131, 144, 145, 146, 147, 148, 157, 160, 163, 167, 169, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190], "origin": [2, 4, 9, 10, 11, 15, 17, 18, 30, 36, 37, 40, 47, 113, 118, 127, 128, 129, 140, 143, 146, 159, 169, 188, 190], "refer": [2, 12, 24, 29, 31, 32, 49, 50, 51, 52, 53, 57, 58, 62, 71, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 91, 96, 97, 102, 112, 121, 129, 130, 137, 140, 144, 145, 146, 148, 154, 155, 182, 184, 185, 186, 187], "specif": [2, 3, 9, 10, 21, 22, 28, 100, 130, 187], "amino": 2, "acid": 2, "sequenc": [2, 9, 10, 46, 50, 78, 80, 96, 97, 118, 121, 147, 167, 183], "well": [2, 3, 11, 21, 22, 67, 111, 117, 130, 144, 187], "valenc": 2, "format": [2, 9, 10, 15, 17, 18, 22, 23, 28, 68, 69, 79, 98, 135, 170, 171, 172, 174, 175, 176, 187], "monoval": 2, "bival": [2, 68], "final": [2, 11, 22, 63, 189], "label": [2, 3, 7, 11, 17, 18, 137, 138, 139, 191], "plot": [2, 3, 4, 8, 9, 10, 11, 12, 17, 18, 30], "analyz": 2, "f": [2, 3, 9, 10, 11, 12, 29, 58, 75, 102, 121, 140, 165, 182, 183, 190], "ax": [2, 3, 4, 7, 11, 12, 17, 18, 31, 33, 34, 100, 110, 111, 112, 117, 118, 130, 131, 144, 148, 167, 169], "subplot": [2, 3, 11, 12], "figsiz": [2, 3, 11], "5": [2, 3, 4, 8, 10, 11, 12, 15, 17, 18, 29, 31, 32, 33, 46, 50, 53, 54, 55, 71, 75, 80, 87, 89, 92, 97, 99, 100, 105, 106, 109, 110, 111, 112, 117, 118, 121, 130, 140, 142, 143, 144, 147, 148, 160, 163, 167, 169, 181, 182, 183, 185, 187, 188, 189], "width": 2, "25": [2, 4, 8, 9, 17, 18, 50], "lig_fac": 2, "x_lig": 2, "arang": [2, 3, 9, 15, 33, 34, 46, 50, 99, 100, 109, 110, 111, 117, 140, 167, 181, 183, 188, 189], "len": [2, 3, 11, 17, 18, 49, 52, 54, 57, 81, 85, 86, 89, 93, 111, 117, 134, 135, 142, 154, 184, 190], "lig_rects_comp1": 2, "bar": 2, "lig_rects_comp2": 2, "lig_rects_comp3": 2, "set": [2, 9, 11, 21, 30, 31, 33, 34, 35, 39, 47, 58, 84, 86, 93, 111, 112, 117, 121, 130, 137, 138, 139, 141, 143, 146, 148, 149, 162, 182, 183, 185, 186, 187, 188], "xlabel": [2, 3], "ylabel": [2, 3], "weight": [2, 3, 4, 9, 11, 12, 17, 18, 29, 51, 53, 56, 61, 63, 64, 65, 71, 72, 73, 74, 75, 77, 82, 83, 84, 87, 88, 94, 108, 112, 122, 123, 124, 125, 126, 137, 138, 139, 154, 191], "ylim": 2, "set_xtick": [2, 3, 11], "set_xticklabel": [2, 3], "get_xticklabel": 2, "rotat": 2, "60": [2, 167, 181], "right": [2, 10, 11, 29, 50, 75, 100, 154, 155, 163, 189], "fontsiz": [2, 11], "legend": [2, 7, 8, 9, 10, 11], "cell_fac": 2, "x_cell": 2, "cell_rects_comp1": 2, "cell_rects_comp2": 2, "cell_rects_comp3": 2, "45": 2, "tight_layout": [2, 4, 11], "show": [2, 4, 7, 8, 9, 11, 12, 17, 18, 22, 26, 30], "observ": [2, 12, 49, 191], "both": [2, 3, 7, 8, 9, 10, 22, 26, 29, 68, 75, 100, 110, 131, 140, 145, 167, 181, 188, 190, 191], "interepret": 2, "look": [2, 3, 9, 10, 11, 23, 27], "pattern": [2, 3, 17, 18, 52, 85], "among": [2, 12, 29, 75, 113], "higher": [2, 10, 54, 57, 81, 86, 89, 112, 113, 148, 152, 184], "two": [2, 3, 10, 11, 12, 21, 32, 86, 100, 109, 110, 111, 113, 114, 115, 116, 117, 118, 130, 150, 158, 164, 167, 188, 190], "infer": [2, 32, 140], "than": [2, 9, 10, 29, 32, 50, 51, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 111, 117, 130, 131, 143, 145, 147, 148, 167, 184, 188, 189, 190], "relationship": 2, "strengthen": 2, "avail": [2, 9, 10, 22, 66, 131, 145, 190, 191], "one": [2, 3, 11, 12, 22, 23, 28, 29, 31, 33, 34, 40, 46, 49, 56, 59, 72, 75, 77, 84, 88, 93, 94, 102, 111, 112, 117, 130, 141, 143, 147, 148, 154, 156, 157, 160, 162, 167, 177, 182, 185, 187, 188, 189, 190], "subunit": 2, "just": [2, 11, 26, 127, 129, 131, 157], "By": [2, 33, 34, 111, 112, 117, 130, 187], "could": [2, 8, 9, 10, 28, 66, 165], "addition": [2, 9, 21, 55, 92, 191], "dynam": [2, 21], "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "968": [2, 5], "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 28, 29, 75, 100, 109, 110, 111, 113, 117, 123, 133, 145, 167, 190], "sourc": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 26, 29, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 113, 114, 115, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184], "plot_il2": [2, 5], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 23], "jupyt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "notebook": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18], "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18], "galleri": [2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 23], "sphinx": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 23], "sphinx_gallery_thumbnail_numb": 3, "extrem": 3, "reduct": [3, 31, 137], "u": [3, 9, 22, 26, 27, 61, 63, 64, 65, 84, 86, 163, 185], "develop": [3, 22, 26, 27], "model": [3, 9, 11, 22, 29, 53, 71, 73, 75, 87, 133, 137, 138, 139, 191], "compact": 3, "while": [3, 8, 9, 10, 23, 27, 28, 32, 38, 39, 50, 61, 65, 84, 130, 145, 148, 185, 190], "retain": [3, 30, 47, 143, 145, 146], "crucial": 3, "subject": [3, 55, 92], "biomed": 3, "research": [3, 26], "new": [3, 9, 21, 22, 27, 28, 31, 32, 33, 34, 46, 58, 102, 110, 111, 112, 117, 118, 121, 130, 131, 137, 138, 139, 140, 144, 145, 147, 148, 169, 182, 183, 185, 187, 188], "technologi": 3, "examin": 3, "antibodi": 3, "patient": 3, "serum": 3, "comprehens": 3, "profil": 3, "fc": 3, "alongsid": [3, 163], "other": [3, 8, 12, 21, 22, 28, 29, 30, 32, 36, 47, 62, 63, 84, 110, 113, 118, 130, 131, 143, 145, 146, 148, 185, 187, 188, 190], "immunolog": 3, "demograph": 3, "438": 3, "sampl": [3, 17, 18, 39, 50, 69, 76, 91, 93, 137, 138, 139, 186, 191], "collect": [3, 68], "were": [3, 46, 68, 110, 131, 147, 188], "systemat": 3, "behavior": [3, 110, 111, 117], "sar": 3, "cov": 3, "viru": 3, "antigen": [3, 69], "statu": 3, "detail": [3, 23, 31, 99, 111, 112, 117, 130, 144, 145, 148, 154, 155, 190, 191], "depth": [3, 46], "implic": 3, "found": [3, 11, 53, 71, 73, 74, 82, 87], "hiv": 3, "predict": [3, 115, 116, 137, 138, 139, 187, 191], "panel": 3, "tl": [3, 4, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 35, 49, 50, 56, 57, 59, 60, 72, 77, 79, 88, 90, 94, 95, 98, 120, 127, 129, 149, 160, 164, 165, 177, 178, 179, 180, 184, 185, 187, 189, 190], "data_import": 3, "load_covid19_serologi": 3, "cm": [3, 17, 18], "scalarmapp": 3, "comp": 3, "7": [3, 6, 11, 13, 14, 15, 17, 18, 21, 31, 32, 99, 109, 110, 111, 112, 117, 130, 145, 148, 167, 181, 188, 189, 190], "cmtffac": 3, "cc": 3, "10": [3, 7, 8, 9, 10, 11, 13, 15, 22, 27, 30, 33, 34, 52, 56, 58, 72, 74, 77, 82, 85, 88, 90, 94, 95, 109, 110, 111, 112, 113, 117, 130, 140, 147, 148, 181, 185, 187, 188, 189, 190], "1000": [3, 10, 17, 18, 29, 75, 188], "linesearch": [3, 7, 53, 71, 87], "true": [3, 7, 8, 9, 10, 11, 12, 29, 30, 31, 33, 34, 35, 39, 46, 47, 49, 51, 52, 53, 54, 55, 57, 58, 71, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 109, 110, 111, 112, 114, 117, 122, 123, 130, 131, 132, 133, 134, 135, 136, 143, 144, 146, 148, 149, 154, 155, 156, 157, 163, 165, 167, 173, 178, 179, 180, 181, 183, 184, 187, 188], "orthogonalis": [3, 53, 71, 87], "evalu": [3, 11, 31, 50, 167], "explain": [3, 11], "varianc": 3, "percent": 3, "reconstruct": [3, 4, 9, 11, 29, 49, 51, 52, 53, 54, 55, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 173, 184, 185, 190], "r2x": 3, "rang": [3, 8, 11, 12, 15, 32, 37, 39, 42, 147, 154, 165, 167, 169], "def": [3, 4, 9, 10, 22, 23, 180, 185], "reconstructed_vari": 3, "tfac": 3, "tin": 3, "none": [3, 11, 29, 30, 31, 32, 33, 34, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 63, 70, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 100, 102, 105, 108, 110, 111, 112, 115, 116, 117, 120, 121, 130, 132, 133, 134, 135, 136, 137, 138, 139, 143, 145, 146, 147, 148, 153, 154, 155, 157, 163, 165, 166, 169, 178, 179, 180, 182, 183, 184], "function": [3, 4, 8, 9, 10, 11, 12, 22, 24, 26, 29, 30, 32, 44, 46, 51, 53, 54, 57, 58, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 99, 102, 109, 110, 111, 117, 123, 131, 143, 144, 146, 148, 163, 181, 184, 186, 187, 188, 189, 190], "calcul": [3, 7, 9, 10, 11, 30, 86, 130, 146], "captur": 3, "tmask": 3, "vtop": 3, "sum": [3, 8, 11, 12, 29, 53, 55, 62, 63, 71, 73, 75, 87, 92, 99, 100, 110, 112, 167, 190], "squar": [3, 8, 9, 10, 29, 50, 53, 67, 71, 73, 74, 75, 82, 84, 86, 87, 115, 116, 131, 137, 144, 146], "cp_to_tensor": [3, 4, 7, 9, 53, 60, 71, 73, 87, 188, 190], "vbottom": 3, "return": [3, 4, 10, 12, 23, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190], "fig1": 3, "figur": [3, 4, 7, 8, 9, 10, 11, 17, 18], "cmtfr2x": 3, "arrai": [3, 10, 11, 12, 15, 29, 30, 31, 32, 33, 34, 41, 43, 46, 47, 50, 53, 54, 55, 57, 58, 59, 70, 71, 73, 74, 75, 82, 84, 86, 87, 89, 92, 99, 100, 102, 105, 109, 110, 111, 112, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 156, 160, 163, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189], "bo": 3, "number": [3, 10, 11, 12, 26, 29, 30, 31, 32, 37, 38, 39, 40, 47, 49, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 102, 109, 112, 131, 137, 138, 139, 143, 145, 146, 148, 154, 163, 169, 183, 184, 185, 188, 190, 191], "gca": 3, "set_xlim": [3, 11], "amax": [3, 33, 34, 111, 117], "set_ylim": 3, "eventu": 3, "wish": [3, 11, 21, 99], "bring": 3, "case": [3, 9, 10, 28, 31, 32, 33, 34, 46, 61, 102, 109, 121, 130, 131, 140, 145, 148, 157, 167, 178, 179, 180, 181, 182, 186, 187, 188, 190], "reveal": 3, "trend": 3, "level": [3, 21, 29, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 138, 139, 184], "ensur": [3, 21, 22, 32, 58, 102, 121, 182], "most": [3, 8, 9, 10, 22, 110, 113, 140], "direct": [3, 8, 9, 10, 11, 29, 74, 75, 82], "fig2": 3, "16": [3, 8, 11, 15, 110, 113, 130, 188, 189, 190], "6": [3, 4, 6, 8, 11, 13, 14, 15, 26, 29, 32, 33, 34, 46, 49, 53, 71, 73, 74, 75, 82, 87, 99, 100, 109, 111, 117, 131, 140, 142, 147, 148, 167, 181, 183, 188, 189], "ii": [3, 7], "fac": [3, 7], "scale": [3, 17, 18, 109, 113, 131, 145], "linalg": [3, 11, 100, 110, 131, 144, 188], "norm": [3, 7, 8, 11, 21, 29, 51, 52, 53, 60, 71, 73, 74, 75, 82, 83, 84, 85, 86, 87, 185], "ord": [3, 165], "inf": [3, 11, 146], "axi": [3, 11, 31, 33, 34, 46, 100, 110, 111, 112, 115, 116, 117, 120, 130, 140, 145, 147, 148, 165, 167, 169, 189], "imshow": [3, 4, 17, 18, 30], "cmap": [3, 17, 18, 30], "piyg": 3, "vmin": 3, "vmax": 3, "set_ytick": 3, "set_yticklabel": 3, "els": [3, 53, 54, 55, 57, 71, 73, 87, 89, 92, 143, 163, 165, 181, 184], "set_titl": [3, 4, 11, 12, 17, 18], "set_aspect": 3, "auto": [3, 127, 129], "colorbar": 3, "object": [3, 11, 21, 22, 31, 32, 46, 58, 102, 121, 131, 140, 167, 182, 187, 188, 191], "0x7f0cbc2c51f0": 3, "separ": [3, 11, 186], "distinct": [3, 188], "clear": [3, 58], "acut": 3, "igg3": 3, "igm": 3, "iga": 3, "long": [3, 167], "term": [3, 8], "igg1": 3, "symptom": 3, "distinguish": 3, "indic": [3, 22, 28, 33, 34, 50, 52, 57, 62, 81, 84, 85, 86, 93, 105, 106, 111, 113, 117, 143, 169, 184], "great": 3, "tool": 3, "find": [3, 8, 11, 12, 50, 114, 127, 145, 191], "signific": [3, 148], "tan": 3, "z": [3, 31, 58], "c": [3, 9, 10, 11, 27, 29, 58, 66, 75, 100, 102, 109, 110, 121, 122, 123, 124, 125, 126, 140, 167, 181, 182, 183], "murphi": 3, "m": [3, 29, 58, 75, 86, 93, 100, 102, 110, 112, 131, 144, 154, 155, 189], "alpai": 3, "h": [3, 29, 75, 131], "d": [3, 8, 46, 55, 56, 72, 74, 77, 82, 88, 92, 94, 99, 100, 102, 109, 110, 140, 142, 148, 163, 167, 169, 171, 172, 175, 176, 181, 190], "A": [3, 4, 8, 10, 11, 15, 21, 26, 28, 29, 30, 31, 47, 49, 50, 51, 53, 55, 58, 60, 71, 73, 74, 75, 76, 82, 83, 84, 86, 87, 90, 91, 92, 95, 110, 113, 122, 123, 124, 125, 126, 129, 131, 133, 140, 143, 145, 146, 154, 163, 167, 169, 183, 185, 187, 188, 189, 190], "2021": 3, "improv": [3, 27, 148], "molecular": 3, "biologi": 3, "17": [3, 8, 9, 15, 111, 117, 130, 145, 148, 183, 188, 189, 190], "e10243": 3, "http": [3, 9, 10, 26, 27, 66, 113, 131], "www": [3, 66], "embopress": 3, "org": [3, 26, 113, 131], "doi": [3, 113], "15252": 3, "msb": 3, "202110243": 3, "zohar": 3, "loo": 3, "fisching": 3, "atyeo": 3, "wang": [3, 49], "slein": 3, "g": [3, 10, 21, 22, 28, 31, 53, 57, 63, 71, 73, 74, 76, 79, 81, 82, 86, 87, 91, 98, 105, 121, 129, 144, 154, 155, 169, 182, 184, 185, 187, 189, 190], "2020": 3, "compromis": 3, "humor": 3, "evolut": [3, 12], "track": 3, "mortal": 3, "183": 3, "1508": 3, "1519": 3, "sciencedirect": 3, "com": [3, 27], "scienc": 3, "articl": [3, 9, 10, 26], "pii": 3, "s0092867420314598": 3, "825": [3, 5], "plot_covid": [3, 5], "tucker": [4, 6, 11, 13, 14, 16, 19, 52, 54, 85, 86, 89, 114, 136, 139, 177, 178, 179, 180, 185, 186, 187, 191], "misc": 4, "face": 4, "ndimag": 4, "zoom": 4, "math": [4, 148], "ceil": [4, 32], "12345": 4, "dtype": [4, 9, 10, 28, 30, 31, 32, 33, 34, 46, 47, 58, 100, 101, 102, 103, 110, 111, 112, 117, 121, 130, 142, 143, 145, 146, 147, 148, 166, 167, 182, 183, 185, 188], "float64": [4, 21, 28, 112, 121, 148, 182, 188], "to_imag": 4, "conveni": [4, 21, 22, 28, 105, 127, 129], "convert": [4, 23, 28, 31, 33, 34, 65, 163, 169, 178, 179, 180], "float": [4, 10, 29, 31, 32, 50, 51, 53, 54, 55, 57, 70, 71, 73, 74, 75, 76, 79, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 95, 98, 101, 102, 103, 111, 112, 113, 114, 115, 116, 117, 120, 131, 137, 138, 139, 145, 148, 153, 160, 161, 182, 183, 184, 188], "back": [4, 21, 43, 140, 189], "uint8": [4, 130], "im": 4, "to_numpi": [4, 17, 18], "min": [4, 22, 34, 113, 131, 185], "max": [4, 33, 113, 117, 160, 185, 187], "255": 4, "astyp": 4, "cp_rank": 4, "tucker_rank": 4, "100": [4, 10, 17, 18, 29, 50, 51, 53, 54, 55, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 92, 109, 137, 138, 139, 184, 188], "10e": [4, 17, 18, 55, 92, 190], "cp_reconstruct": 4, "core": [4, 10, 21, 26, 50, 52, 54, 57, 59, 60, 81, 85, 86, 89, 127, 129, 136, 139, 170, 174, 177, 178, 179, 180, 184, 187, 190], "tucker_factor": 4, "tucker_reconstruct": 4, "tucker_to_tensor": [4, 10, 190], "fig": [4, 7, 8, 9, 10, 11, 12, 17, 18], "add_subplot": [4, 7, 17, 18], "set_axis_off": [4, 17, 18], "619": [4, 5], "plot_image_compress": [4, 5], "00": [5, 8, 13, 19, 20, 190], "14": [5, 8, 15, 33, 34, 102, 112, 188, 189], "412": 5, "execut": [5, 13, 19, 20, 21, 23, 26, 28, 68, 185, 187], "auto_examples_appl": 5, "file": [5, 13, 19, 20, 23], "07": [5, 8, 13, 73, 84], "mb": [5, 13, 19, 20], "03": [5, 8], "02": [5, 8, 13], "permut": [6, 11, 13, 14, 62, 113, 114, 118, 169], "line": [6, 13, 14, 23, 53, 71, 87], "search": [6, 13, 14, 53, 71, 87], "constrain": [6, 13, 14, 29, 66, 74, 75, 82], "demonstr": [6, 13, 14, 68, 190], "parafac2": [6, 13, 14, 122, 123, 124, 125, 126, 133], "acceler": [7, 9, 10], "converg": [7, 9, 10, 29, 50, 55, 75, 92, 137, 138, 139], "random_cp": [7, 12, 187], "logspac": 7, "err": [7, 11], "empty_lik": [7, 183], "err_l": 7, "tt": [7, 49, 50, 79, 80, 97, 98, 134, 135, 170, 171, 172, 174, 175, 176, 187, 190], "tt_l": 7, "1234": 7, "get": [7, 11, 22, 26, 101, 103, 185, 187], "high": [7, 10, 49, 50, 84, 86, 190], "accuraci": [7, 50], "2000000": 7, "0e": 7, "15": [7, 8, 11, 12, 15, 33, 34, 111, 112, 117, 130, 145, 148, 188, 189], "err_min": 7, "toll": 7, "enumer": [7, 17, 18, 165], "start": [7, 11, 26, 27, 30, 32, 37, 39, 42, 130, 148, 186, 189], "fals": [7, 29, 30, 31, 35, 39, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 111, 112, 117, 130, 132, 133, 134, 135, 136, 137, 141, 143, 146, 148, 149, 154, 155, 156, 157, 162, 163, 173, 177, 178, 179, 180, 181, 184, 188], "fit_transform": [7, 71, 72, 73, 74, 75, 137, 185], "fac_l": 7, "error": [7, 9, 10, 11, 28, 29, 49, 50, 51, 52, 53, 54, 55, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 110, 115, 116, 130, 140, 148, 184, 185, 187], "loglog": 7, "No": [7, 131], "r": [7, 11, 29, 49, 53, 61, 63, 64, 65, 71, 73, 75, 87, 122, 123, 124, 125, 126, 131, 145, 154, 165, 189, 190, 191], "set_ylabel": [7, 11], "set_xlabel": [7, 11], "298": [7, 13], "plot_cp_line_search": [7, 13], "On": [8, 12, 50, 145, 186], "sinc": [8, 9, 10, 11, 22, 29, 50, 75, 123], "version": [8, 9, 10, 11, 27, 29, 31, 32, 33, 34, 46, 58, 63, 75, 99, 102, 110, 111, 112, 117, 118, 121, 130, 131, 144, 145, 146, 147, 148, 182, 183, 187, 188, 190], "penal": [8, 74, 82], "chosen": [8, 145, 181], "user": [8, 9, 10, 22, 26, 28, 74, 82, 102, 145, 185], "propos": [8, 10, 53, 71, 87], "implement": [8, 10, 21, 28, 29, 31, 32, 63, 110, 111, 112, 113, 117, 130, 145, 148, 154, 185, 186, 187, 188, 191], "altern": [8, 9, 10, 29, 31, 50, 53, 63, 71, 73, 74, 75, 82, 84, 87, 110, 111, 112, 117, 122, 123, 124, 125, 126, 130, 143, 148, 185], "optim": [8, 11, 26, 28, 49, 74, 82, 100, 110, 114, 127, 129], "multipli": [8, 59, 74, 82, 100, 110, 130, 131, 156, 165, 177], "ao": [8, 74, 82], "admm": [8, 74, 82], "solv": [8, 10, 55, 74, 82, 86, 92, 131, 188], "convex": 8, "problem": [8, 10, 55, 86, 92, 131, 190], "primal": 8, "dual": 8, "auxilliari": [8, 74, 82], "introduc": [8, 28, 74, 82, 110], "regular": [8, 74, 82, 187], "oper": [8, 14, 20, 21, 26, 100, 110, 111, 117, 127, 129, 159, 160, 161, 187], "call": [8, 9, 10, 12, 21, 22, 23, 28, 32, 33, 34, 59, 74, 82, 110, 113, 131, 140, 156, 177, 181, 185, 187, 189, 190], "proxim": 8, "chang": [8, 22, 28, 29, 47, 58, 75, 140, 141, 145, 162, 173, 186, 187], "accord": [8, 9, 10, 74, 82, 145], "select": [8, 111, 113, 117, 130, 145, 187, 188], "sever": [8, 9, 10, 23, 26, 28, 59, 156, 157, 177, 185, 187], "correspond": [8, 21, 33, 34, 46, 56, 72, 77, 88, 94, 111, 117, 142, 154, 167, 169, 170, 174, 187, 191], "appli": [8, 22, 33, 34, 63, 74, 82, 116, 137, 144, 159, 160, 161, 163, 167, 188, 190], "non_neg": [8, 9, 74, 81, 82, 163], "signatur": [8, 21, 30, 47, 110, 143, 146], "prevent": 8, "l1": [8, 74, 82], "l1_reg": [8, 74, 82], "add": [8, 11, 22, 28, 148], "cost": [8, 84, 86], "promot": [8, 110], "sparsiti": [8, 53, 71, 73, 84, 86, 87], "choos": [8, 9, 11, 50, 145, 181, 188], "l2": [8, 60, 74, 82], "l2_reg": [8, 53, 71, 74, 82, 87], "l2_square_reg": [8, 74, 82], "unimod": [8, 74, 82], "columnwis": [8, 86], "impos": [8, 29, 74, 75, 82, 84, 86, 191], "column": [8, 12, 46, 50, 56, 61, 62, 63, 64, 65, 72, 74, 77, 82, 84, 88, 93, 94, 102, 113, 114, 121, 131, 144, 154, 169, 182], "local": [8, 11, 21, 74, 82], "maximum": [8, 29, 33, 50, 51, 52, 53, 54, 55, 57, 71, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 96, 97, 111, 117, 137, 138, 139, 184], "gaussian": 8, "simplex": [8, 74, 82], "live": 8, "defin": [8, 21, 29, 32, 74, 75, 82, 86, 102, 121, 145, 172, 176, 182, 183, 189], "radiu": 8, "entri": [8, 9, 10, 29, 50, 75, 122, 123, 124, 125, 126, 190], "nonneg": [8, 9, 10], "posit": [8, 31, 32, 51, 52, 76, 83, 84, 85, 86, 91, 102, 118, 146, 169], "parametlargest": 8, "absolut": [8, 29, 30, 74, 75, 82, 114], "elementwis": 8, "normalized_spars": [8, 74, 82], "k": [8, 11, 29, 30, 47, 50, 58, 59, 64, 75, 78, 80, 96, 97, 99, 100, 102, 109, 110, 122, 123, 124, 125, 126, 131, 143, 144, 146, 154, 155, 156, 165, 167, 170, 177, 183, 189], "spars": [8, 71, 73, 87, 89, 92, 184, 186, 187], "nonzero": [8, 29, 75, 122, 123, 124, 125, 126, 181], "per": [8, 9, 10, 76, 91, 157, 160], "soft": [8, 160], "soft_spars": [8, 74, 82], "bound": [8, 74, 82], "threshold": [8, 10, 50, 74, 82, 113, 159, 160, 161], "smooth": [8, 74, 82], "favor": 8, "fact": [8, 9, 22, 60, 64], "band": [8, 74, 82], "monoton": [8, 74, 82], "alwai": [8, 22, 131, 140, 148, 187, 189], "base": [8, 9, 17, 18, 21, 22, 23, 50, 58, 183, 189, 190], "isoton": 8, "regress": [8, 9, 10, 19, 26, 67, 70, 186], "hard": [8, 66, 67, 74, 82], "hard_spars": [8, 74, 82], "requir": [8, 9, 21, 22, 146, 185, 188], "boolean": [8, 31, 52, 53, 54, 55, 57, 71, 73, 78, 79, 80, 81, 84, 85, 86, 87, 89, 92, 96, 97, 98, 163, 184, 188], "enough": [8, 110, 145], "11": [8, 15, 33, 34, 112, 118, 181, 188, 189], "support": [8, 11, 21, 22, 26, 28, 32, 55, 92, 102, 121, 182, 185, 187, 188], "constrained_parafac": 8, "set_printopt": 8, "precis": [8, 29, 32, 75, 84, 86, 112, 113, 130, 148], "rand": 8, "itself": [8, 188], "tenalg": [8, 23, 54, 89, 127, 129, 187], "validate_constraint": 8, "process": [8, 9, 10, 74, 82, 191], "If": [8, 11, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 46, 47, 53, 58, 71, 73, 74, 75, 82, 84, 86, 87, 93, 99, 100, 102, 109, 110, 111, 112, 117, 120, 121, 130, 131, 140, 141, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 160, 162, 163, 167, 169, 181, 182, 183, 185], "want": [8, 22, 23, 27, 28, 140, 185, 187, 191], "same": [8, 9, 10, 11, 29, 31, 33, 34, 46, 47, 50, 52, 53, 54, 55, 57, 58, 61, 63, 64, 65, 71, 73, 75, 78, 79, 80, 81, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 117, 118, 122, 123, 124, 125, 126, 130, 131, 136, 140, 145, 146, 147, 148, 154, 159, 163, 165, 167, 169, 180, 183, 184, 185, 187, 188, 190], "bool": [8, 29, 31, 33, 34, 35, 39, 49, 53, 55, 56, 58, 71, 72, 73, 74, 75, 77, 81, 82, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 114, 117, 130, 132, 133, 134, 135, 136, 137, 141, 148, 149, 154, 155, 156, 157, 162, 163, 173, 178, 179, 180, 181, 183], "should": [8, 10, 12, 21, 22, 23, 28, 32, 33, 34, 52, 53, 54, 55, 57, 63, 71, 73, 79, 81, 84, 85, 86, 87, 89, 92, 98, 102, 106, 118, 131, 140, 157, 163, 167, 173, 178, 179, 180, 181, 184, 185, 187, 188], "assum": [8, 109, 157, 185], "doe": [8, 11, 31, 32, 110, 111, 112, 117, 130, 131, 145, 148, 169, 188], "write": [8, 24, 26, 27, 28, 64, 99, 140, 185, 187], "_": [8, 11, 29, 55, 75, 92, 147, 189], "loc": [8, 9, 10, 11, 17, 18], "upper": [8, 9, 10, 11, 99, 102, 131], "left": [8, 9, 11, 29, 31, 33, 34, 50, 75, 111, 112, 117, 130, 148, 154, 155, 163, 189], "similarli": [8, 23, 28, 185], "05": [8, 19], "coeffici": [8, 9, 11, 84, 86, 114, 144, 190], "induc": 8, "larg": [8, 32, 148, 188], "histogram": 8, "hist": 8, "flatten": [8, 33, 34, 39, 46, 99, 111, 112, 117, 145], "As": [8, 9, 10, 12, 22, 190], "option": [8, 9, 10, 23, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 47, 49, 51, 52, 53, 54, 55, 57, 58, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 96, 97, 98, 99, 100, 102, 110, 111, 112, 113, 117, 121, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 154, 155, 157, 162, 163, 169, 178, 179, 180, 182, 183, 184], "dictionari": [8, 21, 74, 82, 137, 138, 139, 185], "n": [8, 9, 10, 11, 15, 18, 28, 29, 32, 33, 34, 36, 53, 55, 57, 59, 67, 71, 73, 74, 75, 81, 82, 86, 87, 92, 100, 102, 109, 110, 131, 137, 138, 139, 142, 145, 154, 155, 156, 157, 165, 167, 169, 177, 184, 187, 189, 190, 191], "46e": 8, "81e": 8, "73e": 8, "01": [8, 19], "87e": 8, "00e": 8, "27e": 8, "55e": 8, "34e": 8, "47e": 8, "21e": 8, "31e": 8, "83e": 8, "24e": 8, "90e": 8, "05e": 8, "74e": 8, "33": [8, 80, 97], "26": [8, 26, 129], "66": 8, "69": 8, "37": 8, "41": [8, 145], "38": [8, 9, 145], "21": [8, 15, 188, 189, 191], "68": [8, 49], "36": 8, "23": [8, 15, 188, 189], "24": [8, 9, 10, 15, 33, 34, 50, 109, 130, 147, 167, 188, 189], "32": [8, 9, 130], "53": [8, 13], "35": 8, "47": 8, "last": [8, 10, 31, 32, 38, 49, 51, 53, 71, 73, 74, 79, 82, 83, 87, 98, 100, 110, 122, 123, 130, 140, 145, 147, 148, 153, 167, 185, 189], "One": [8, 9, 10, 23, 140, 190], "prefer": [8, 32, 58, 100, 181], "possibl": [8, 22, 30, 47, 58, 63, 100, 110, 113, 131, 140, 143, 146, 148, 169, 183, 185], "kei": [8, 21, 145], "31": 8, "82": 8, "95": 8, "61": 8, "77": 8, "76": 8, "73": 8, "84": [8, 9], "67": 8, "52": 8, "06": [8, 13, 19, 51, 55, 74, 82, 83, 92, 138, 139], "49": [8, 50], "04": [8, 9, 13], "34": [8, 9], "39": 8, "28": [8, 9], "48": 8, "09": [8, 137], "08": [8, 29, 53, 71, 74, 75, 76, 82, 86, 87, 91], "l_1": 8, "l_2": 8, "huang": [8, 74, 82], "kejun": [8, 74, 82], "nichola": [8, 74, 82], "sidiropoulo": [8, 74, 82], "athanasio": [8, 74, 82], "p": [8, 74, 82, 122, 123, 131, 169], "liava": [8, 74, 82], "effici": [8, 74, 82], "matrix": [8, 9, 10, 11, 28, 29, 40, 50, 53, 59, 63, 71, 73, 74, 75, 79, 82, 87, 93, 98, 100, 110, 113, 122, 123, 124, 125, 126, 131, 133, 135, 137, 144, 152, 154, 155, 156, 157, 159, 161, 163, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 186, 187, 189], "ieee": [8, 49, 52, 74, 82, 85, 191], "transact": [8, 49, 74, 82, 191], "64": [8, 74, 82], "2016": [8, 74, 78, 82, 96], "5052": [8, 74, 82], "5065": [8, 74, 82], "onlin": [8, 11], "815": [8, 13], "plot_guide_for_constrained_cp": [8, 13], "comput": [9, 10, 22, 28, 29, 51, 52, 53, 54, 57, 63, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 96, 97, 98, 109, 111, 112, 113, 114, 117, 120, 122, 123, 124, 125, 126, 131, 144, 152, 163, 167, 171, 175, 184, 185, 190], "ncp": 9, "updat": [9, 10, 22, 27, 50, 51, 52, 63, 74, 81, 82, 83, 84, 85, 86, 105, 106], "mu": [9, 10, 55, 92], "alreadi": [9, 10, 21, 22, 26, 35, 145, 149, 185], "least": [9, 10, 29, 50, 53, 67, 71, 73, 75, 84, 86, 87, 111, 113, 117, 131, 137, 144, 185], "al": [9, 10, 11, 29, 53, 71, 73, 75, 76, 78, 84, 87, 91, 96, 113], "hierarch": [9, 10, 84], "constraint": [9, 10, 11, 29, 74, 75, 82, 84, 122, 123, 124, 125, 126], "handl": [9, 10, 11, 32, 110, 146, 185, 187, 188], "expect": [9, 10, 11, 12, 22, 23, 31, 46, 111, 112, 117, 130, 148], "after": [9, 10, 11, 12, 23, 74, 82, 110, 190], "obtain": [9, 10, 21, 47, 90, 95, 113, 180, 189, 190, 191], "non_negative_parafac_h": 9, "_cp": 9, "initialize_cp": 9, "cptensor": [9, 29, 53, 59, 60, 61, 63, 64, 65, 71, 72, 73, 74, 75, 82, 87], "copi": [9, 59, 99, 140, 145, 177], "deepcopi": [9, 58], "There": [9, 10, 12, 28, 63, 143, 185, 187], "wai": [9, 10, 21, 22, 28, 53, 67, 71, 73, 87, 110, 167, 185, 187, 189, 190], "chose": [9, 10], "integ": [9, 10, 29, 32, 75, 84, 86, 112, 130, 140, 145, 148], "24000": 9, "reshap": [9, 11, 15, 33, 34, 50, 79, 98, 99, 100, 109, 110, 111, 117, 167, 183, 185, 188, 189], "30": [9, 10, 11, 12], "40": [9, 10, 11, 12, 32], "20": [9, 11, 15, 23, 26, 31, 32, 46, 70, 76, 91, 102, 109, 112, 121, 140, 182, 188, 189], "float32": [9, 28, 112, 148, 185], "goal": [9, 185], "produc": [9, 32], "approxim": [9, 10, 49, 50, 53, 71, 73, 84, 86, 87, 187, 190], "abov": [9, 12, 23, 29, 75, 99, 112, 122, 123, 124, 125, 126, 130, 131, 146, 188], "low": [9, 10, 55, 92, 113, 137, 138, 139, 187], "befor": [9, 12, 22, 23, 31, 36, 46, 111, 112, 114, 117, 130, 145, 148, 188, 190], "good": 9, "initi": [9, 11, 29, 50, 51, 53, 54, 55, 56, 71, 72, 73, 74, 75, 77, 82, 83, 87, 88, 89, 90, 92, 94, 95, 111, 117, 130, 140, 148, 185], "guess": 9, "compar": [9, 10, 12, 62, 111, 113, 117, 145], "fair": 9, "idea": [9, 165, 190], "transform": [9, 137], "instanc": [9, 11, 22, 23, 28, 32, 39, 44, 103, 185, 187, 188, 189, 191], "class": [9, 23, 24, 26, 31, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 102, 105, 111, 112, 117, 130, 137, 138, 139, 141, 148, 162, 183], "weights_init": 9, "factors_init": 9, "cp_init": 9, "let": [9, 22, 26, 131, 140, 185, 187, 189, 190], "tic": [9, 10], "tensor_mu": [9, 10], "errors_mu": 9, "return_error": [9, 10, 11, 22, 29, 49, 51, 52, 53, 55, 57, 71, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 91, 92, 184], "cp_reconstruction_mu": 9, "time_mu": [9, 10], "output": [9, 10, 11, 12, 30, 31, 32, 47, 49, 100, 102, 111, 112, 113, 117, 130, 140, 143, 146, 148, 167], "input": [9, 10, 12, 22, 29, 30, 31, 32, 33, 34, 46, 47, 55, 56, 58, 71, 72, 73, 74, 75, 79, 82, 88, 90, 92, 94, 95, 98, 99, 110, 111, 112, 117, 118, 121, 130, 131, 142, 143, 146, 147, 148, 167, 169, 182, 183, 185, 188], "inde": 9, "quit": 9, "coars": 9, "8246": 9, "74": [9, 50], "8255": 9, "87": 9, "8329": 9, "55": 9, "8209": 9, "97": 9, "9120": 9, "9126": 9, "9214": 9, "9157": 9, "8210": 9, "8211": 9, "8230": 9, "8231": 9, "9010": 9, "9011": 9, "9030": 9, "9031": 9, "tensor_h": 9, "errors_h": 9, "cp_reconstruction_h": 9, "time_h": 9, "again": 9, "8200": 9, "8190": 9, "8219": 9, "8207": 9, "9001": 9, "8993": 9, "9020": 9, "9009": 9, "huge": 9, "gap": 9, "solut": [9, 10, 84, 86, 144], "subproblem": 9, "rather": [9, 32, 50], "faster": [9, 10, 50, 111, 117, 145, 165], "note": [9, 12, 21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 44, 46, 47, 50, 53, 54, 55, 57, 58, 60, 63, 64, 71, 73, 75, 79, 86, 87, 89, 92, 98, 109, 110, 111, 112, 117, 130, 131, 140, 143, 144, 145, 146, 148, 149, 154, 155, 157, 165, 167, 169, 178, 179, 180, 181, 184, 187, 188, 190], "overal": 9, "still": [9, 27, 145, 187], "need": [9, 10, 21, 22, 27, 28, 50, 84, 145, 181, 185, 187, 188], "longer": [9, 10, 23, 188], "reach": 9, "subroutin": [9, 86], "simpli": [9, 15, 27, 28, 131, 169, 185, 187], "tensorhals_exact": 9, "errors_exact": 9, "cp_reconstruction_exact_h": 9, "time_exact_h": 9, "str": [9, 10, 29, 46, 51, 53, 54, 57, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 104, 113, 141, 145, 147, 151, 162, 163, 184], "2f": [9, 10], "22": [9, 15, 33, 34, 144, 188, 189], "410": 9, "take": [9, 22, 114, 140, 153, 165, 167, 185, 187, 188, 189, 191], "much": [9, 10, 32, 86, 173, 180, 188], "gain": 9, "often": [9, 11, 32, 148], "void": 9, "recommend": [9, 10, 23], "avoid": [9, 11, 188], "unless": [9, 31, 130, 148], "applic": [9, 28, 50, 51, 53, 57, 66, 71, 73, 74, 81, 82, 83, 86, 87, 144, 154, 155, 184, 189, 190], "appear": [9, 10, 23], "similar": [9, 10, 11, 58, 113, 114, 131, 144], "runtim": [9, 50], "howev": [9, 10, 11, 28, 31, 111, 112, 117, 130, 131, 148, 185, 188, 189], "closer": 9, "suggest": 9, "behav": [9, 181], "tell": 9, "stori": 9, "better": [9, 10, 22, 28, 32, 127, 129, 145, 148, 188, 189], "root": [9, 10, 116, 146], "rmse": [9, 10], "metric": [9, 10, 186], "217": 9, "04411": 9, "570892": 9, "92515916": 9, "lower": [9, 10, 99, 102, 113, 148], "appreci": [9, 10], "speed": [9, 10, 145, 148], "iter": [9, 10, 11, 29, 49, 50, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 111, 117, 137, 138, 139, 184], "each_iter": [9, 10], "b": [9, 10, 11, 29, 30, 33, 34, 46, 53, 57, 58, 60, 71, 73, 74, 75, 81, 82, 86, 87, 100, 109, 110, 111, 117, 122, 123, 124, 125, 126, 131, 140, 144, 147, 154, 155, 167, 184, 189, 190], "set_size_inch": [9, 10, 12], "get_figheight": [9, 10, 12], "forward": [9, 10, 12, 22, 145], "conclus": [9, 10], "quick": [9, 10, 186], "test": [9, 10, 15, 17, 18, 24, 26, 28, 31, 70, 187, 188, 191], "give": [9, 10, 22, 84, 86, 140, 142, 188], "default": [9, 10, 21, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 42, 44, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 111, 112, 113, 117, 121, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 162, 163, 167, 169, 173, 178, 179, 180, 182, 183, 184, 185, 187], "resort": [9, 10], "encount": [9, 10], "expert": [9, 10], "gilli": [9, 10], "glineur": [9, 10], "2012": [9, 10, 191], "neural": [9, 10], "1085": [9, 10], "1105": [9, 10], "link": [9, 10], "mit": [9, 10], "edu": [9, 10], "neco": [9, 10], "7755": [9, 10], "51": [9, 13, 53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "642": [9, 13], "plot_nn_cp_hal": [9, 13], "e": [10, 21, 22, 27, 28, 31, 55, 61, 63, 65, 74, 79, 82, 90, 92, 93, 95, 98, 105, 113, 121, 144, 153, 154, 169, 179, 182, 185, 187, 188], "min_": [10, 55, 86, 92], "geq": 10, "t_": 10, "g_": 10, "_f": [10, 11], "ith": 10, "mode": [10, 11, 15, 27, 28, 29, 36, 37, 39, 42, 51, 52, 53, 54, 57, 59, 63, 64, 65, 69, 71, 73, 74, 75, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 96, 122, 123, 125, 131, 136, 137, 139, 153, 156, 157, 164, 165, 171, 175, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190], "unfold": [10, 15, 23, 36, 37, 39, 63, 64, 65, 125, 165, 171, 175, 179, 185, 186, 187, 188], "vector": [10, 11, 59, 63, 65, 100, 110, 114, 126, 137, 156, 157, 163, 169, 172, 176, 177, 178, 179, 180, 187, 188, 190, 191], "AS": 10, "fast": [10, 26, 50, 148], "shrinkag": [10, 160], "gradient": [10, 86], "unconstrain": 10, "wide": 10, "lawson": 10, "hanson": 10, "1974": 10, "non_negative_tuck": [10, 187, 190], "non_negative_tucker_h": 10, "randint": 10, "size": [10, 11, 17, 18, 31, 32, 33, 34, 46, 52, 54, 56, 57, 72, 77, 79, 81, 85, 86, 88, 89, 94, 95, 98, 100, 110, 111, 112, 117, 123, 130, 131, 145, 147, 148, 152, 154, 155, 167, 184, 187, 189, 190], "error_mu": 10, "tucker_reconstruction_mu": 10, "ticnew": 10, "tensor_hals_fista": 10, "error_fista": 10, "tucker_reconstruction_fista": 10, "time_fista": 10, "tensor_hals_a": 10, "error_a": 10, "active_set": [10, 86], "tucker_reconstruction_a": 10, "time_a": 10, "nntucker": 10, "94": [10, 11], "56": 10, "glanc": 10, "complex": [10, 30, 47, 100, 110, 131, 143, 145, 146, 156, 157], "283": 10, "0274118309114": 10, "279": 10, "59660700151534": 10, "277": [10, 26], "3740392556893": 10, "besid": [10, 50], "experi": [10, 17, 18, 27], "veri": [10, 28, 58, 185], "703": [10, 13], "plot_nn_tuck": [10, 13], "la": 11, "linear_sum_assign": 11, "inx": 11, "kier": [11, 29, 75], "et": [11, 78, 96, 113], "1999": [11, 29, 75], "mathcal": 11, "mathbb": [11, 189], "j": [11, 17, 18, 29, 47, 59, 75, 80, 86, 97, 100, 109, 113, 146, 154, 156, 167, 177, 189], "shift": 11, "form": [11, 29, 75, 122, 123, 124, 125, 126, 186, 187], "ijk": [11, 29, 75, 122, 123, 124, 125, 126], "sum_": [11, 29, 55, 75, 92, 122, 123, 124, 125, 126, 189, 190], "a_": [11, 29, 55, 75, 92, 122, 123, 124, 125, 126], "ir": [11, 29, 75, 122, 123, 124, 125, 126], "b_": [11, 29, 75, 122, 123, 124, 125, 126], "sigma_i": 11, "c_": [11, 29, 75, 122, 123, 124, 125, 126], "kr": [11, 21, 29, 75, 122, 123, 124, 125, 126], "cyclic": 11, "element": [11, 23, 29, 30, 31, 32, 33, 34, 47, 51, 52, 53, 57, 58, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 91, 102, 109, 110, 111, 112, 117, 122, 123, 124, 125, 126, 130, 133, 140, 142, 143, 145, 146, 148, 160, 167, 181, 184, 189], "true_rank": 11, "noise_r": 11, "seed": [11, 44, 93], "matric": [11, 29, 61, 63, 64, 65, 75, 93, 108, 110, 113, 114, 122, 123, 124, 125, 126, 131, 154, 155, 157, 165, 178, 179, 180, 188, 190], "a_factor_matrix": 11, "uniform": [11, 28, 185], "b_factor_matrix": 11, "c_factor_matrix": 11, "normalis": [11, 61], "a_normalis": 11, "b_normalis": 11, "c_normalis": 11, "b_factor_matric": 11, "roll": 11, "bs_normalis": 11, "construct": [11, 99, 124, 125, 126, 188], "einsum": [11, 28, 100, 110, 127, 128, 129, 154, 165, 167, 187], "ijr": [11, 29, 75, 122, 123, 124, 125, 126], "nois": [11, 29, 75], "standard_norm": 11, "minima": [11, 117], "initialis": 11, "lowest": 11, "best_err": 11, "train": [11, 28, 49, 50, 80, 97, 137, 173, 175, 186, 187], "trial_decomposit": 11, "trial_err": 11, "500": [11, 53, 57, 71, 73, 74, 81, 82, 86, 87, 109, 154, 155, 184, 189, 190], "best": [11, 90, 95, 131, 144, 145, 148], "09204720575424472": 11, "09204726856012718": 11, "09269711804187236": 11, "392": 11, "09204692795621944": 11, "415": 11, "09204692959223094": 11, "09291065541285953": 11, "364": 11, "09204692769766268": 11, "424": 11, "09204692883956121": 11, "481": 11, "0920469312544748": 11, "09205635789758464": 11, "wrapper": [11, 24, 28, 185], "variabl": [11, 12, 21, 22, 23, 86, 137, 144, 188], "somewhat": 11, "b_i": [11, 29, 75, 122, 123, 124, 125, 126], "p_i": [11, 29, 75, 122, 123, 124, 125, 126], "cannot": [11, 22, 29, 46, 51, 53, 71, 73, 74, 75, 82, 83, 87, 147], "store": [11, 12, 30, 47, 66, 67, 102, 110, 121, 143, 146, 182], "instead": [11, 22, 28, 31, 46, 100, 110, 111, 112, 117, 123, 130, 145, 148, 187, 188, 189], "along": [11, 31, 33, 34, 46, 54, 89, 99, 111, 112, 117, 122, 123, 130, 131, 145, 147, 148, 163, 167, 171, 175, 189], "blueprint": 11, "third": [11, 21, 29, 46, 70, 75, 167, 190], "tupl": [11, 30, 31, 33, 34, 36, 37, 40, 43, 47, 49, 79, 93, 98, 109, 111, 112, 117, 120, 130, 132, 133, 134, 135, 136, 137, 140, 142, 143, 146, 148, 164, 165, 169, 182], "extract": [11, 99], "inform": [11, 28, 32, 49, 103, 131, 187, 190], "parafac2_tensor": [11, 187], "apply_projection_matric": 11, "anoth": [11, 12, 22, 28, 32, 62, 114, 188], "frontal": [11, 29, 75, 122, 123, 124, 125, 126, 189], "slice": [11, 29, 75, 111, 117, 122, 123, 124, 125, 126, 165, 189], "likewis": 11, "parafac2_to_tensor": [11, 123], "consist": [11, 23, 31, 145, 146, 167, 189], "uneven": [11, 124, 125, 126], "length": [11, 30, 32, 47, 56, 61, 72, 77, 84, 88, 93, 94, 111, 117, 140, 142, 143, 146, 154, 157, 167, 179, 180], "parafac2_to_slic": 11, "est_tensor": 11, "est_weight": 11, "est_a": 11, "est_b": 11, "est_c": 11, "apply_parafac2_project": 11, "reconstruction_error": 11, "recovery_r": 11, "recov": [11, 190], "congruenc": [11, 114], "est_projected_b": 11, "sign": [11, 47, 130, 148, 160, 163], "ab": [11, 29, 75, 160], "newaxi": [11, 30, 169], "est_a_normalis": 11, "est_bs_normalis": 11, "est_c_normalis": 11, "b_corr": 11, "a_corr": 11, "c_corr": 11, "corr": 11, "old": [11, 131], "maximis": 11, "v1": 11, "pass": [11, 21, 22, 23, 31, 32, 35, 53, 58, 87, 102, 110, 111, 112, 117, 121, 130, 131, 148, 149, 163, 182, 188], "maxim": [11, 33, 55, 92, 137], "congruence_coeffici": 11, "averag": [11, 112, 145, 148], "91": 11, "994704651242361": 11, "estim": [11, 17, 18, 90, 95, 115, 116, 191], "argmax": [11, 34, 111], "what": [11, 21, 27, 46, 99, 131, 147], "flip": 11, "a_sign": 11, "correct": [11, 21, 22, 32, 46, 115, 116, 144, 147, 185], "entir": [11, 35, 149], "get_legend_handles_label": 11, "center": 11, "ncol": 11, "0x7f0cbc140c40": 11, "interest": 11, "loss": [11, 32], "sure": [11, 22], "stationari": 11, "point": [11, 21, 32, 68, 101, 103, 112, 131, 148], "skip": [11, 37, 40, 93, 154, 155, 157, 165, 178, 179, 180], "domin": 11, "rest": [11, 181, 185], "difficult": 11, "loss_fig": 11, "loss_ax": 11, "rel": [11, 29, 53, 71, 73, 74, 75, 82, 87, 145], "mathematical_expression_of_loss": 11, "frac": [11, 114], "hat": [11, 29, 75], "xtick": 11, "get_xtick": 11, "ten": [11, 29, 75], "berg": [11, 29, 75], "jm": 11, "bro": [11, 29, 53, 71, 73, 75, 87, 137], "part": [11, 23, 27, 29, 47, 55, 75, 92, 145], "journal": [11, 26, 129], "chemometr": [11, 29, 53, 71, 73, 75, 87, 137], "societi": 11, "275": [11, 29, 75], "43": [11, 13], "436": [11, 13], "plot_parafac2": [11, 13], "cp_permute_factor": 12, "match": [12, 46, 58, 62, 110, 147, 167, 183], "minim": [12, 26, 62, 185], "cosin": [12, 62, 114], "distanc": [12, 32, 62], "linear": [12, 50, 62, 144, 190], "assign": [12, 24, 62, 140], "simultan": 12, "manual": [12, 28], "50": [12, 50, 109, 111, 117, 181, 188], "cp_tensor_1": 12, "cp_tensor_2": 12, "cp_copi": 12, "cp_tensor_3": 12, "col_order_1": 12, "col_order_2": 12, "manipul": [12, 186], "limit": [12, 21, 103, 145, 148], "won": 12, "equal": [12, 29, 30, 31, 46, 47, 62, 75, 102, 122, 123, 124, 125, 126, 131, 143, 145, 146, 147], "predefin": 12, "subplots_adjust": 12, "hspace": 12, "text": [12, 23, 29, 55, 75, 92, 154, 155, 156, 157, 189], "199": [12, 13], "plot_permute_factor": [12, 13], "094": 13, "auto_examples_decomposit": 13, "usag": [14, 21, 26, 105, 186], "basic": [14, 20, 160, 186, 187], "auto_examples_python": 14, "zip": [14, 181], "auto_examples_jupyt": 14, "assert_array_equ": 15, "18": [15, 26, 145, 188, 189], "ndim": [15, 37, 39, 42, 52, 54, 57, 79, 81, 85, 86, 89, 98, 109, 111, 117, 153, 157, 165, 169, 178, 179, 180, 184], "re": [15, 33, 34, 37, 46, 165, 170, 174], "fold": [15, 21, 37, 43, 186, 187], "007": [15, 20], "plot_tensor": [15, 20], "cp_regress": 17, "cpregressor": 17, "tensor_to_vec": [17, 18, 180], "partial_tensor_to_vec": [17, 18], "synthet": [17, 18, 28], "gen_imag": [17, 18], "image_height": [17, 18, 70], "image_width": [17, 18, 70], "rectangl": [17, 18, 70], "swiss": [17, 18, 70, 190], "circl": [17, 18], "rng": [17, 18], "check_random_st": [17, 18], "deduc": [17, 18], "n_row": [17, 18, 154, 155], "n_column": [17, 18, 154, 155], "weight_img": [17, 18], "region": [17, 18, 70], "y": [17, 18, 47, 49, 58, 110, 131, 137, 138, 139, 142, 143, 146, 181, 182, 183, 191], "dot": [17, 18, 64, 110, 131, 144, 165, 167, 180, 187], "skip_begin": [17, 18, 37, 38, 39, 40], "orrd": [17, 18], "interpol": [17, 18], "nearest": [17, 18], "nweight": [17, 18], "regressor": [17, 18], "weight_rank": [17, 18, 138, 139], "reg_w": [17, 18, 138, 139], "verbos": [17, 18, 29, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 137, 138, 139, 184], "fit": [17, 18, 22, 29, 75, 76, 91, 137, 138, 139, 185, 187, 191], "weight_tensor_": [17, 18], "nrank": [17, 18], "suptitl": [17, 18], "461": [17, 19], "plot_cp_regress": [17, 19], "tucker_regress": 18, "tuckerregressor": 18, "358": [18, 19], "plot_tucker_regress": [18, 19], "818": 19, "auto_examples_regress": 19, "auto_exampl": 20, "switch": [21, 28, 145, 187], "thread": [21, 35, 141, 149, 162], "current": [21, 28, 53, 71, 73, 74, 82, 84, 87, 104, 128, 131, 145, 151, 185, 187, 188], "being": [21, 32, 145, 188], "get_backend": [21, 22], "global": [21, 35, 44, 53, 71, 73, 87, 149], "set_backend": [21, 28, 35, 127, 129, 149, 185, 187], "enabl": [21, 26, 28], "parti": 21, "packag": [21, 27, 129, 188], "dask": 21, "parallel": 21, "over": [21, 28, 29, 30, 31, 47, 63, 75, 100, 110, 111, 112, 117, 130, 131, 143, 146, 148, 157, 167, 190], "inherit": 21, "spawn": 21, "typic": [21, 23], "main": [21, 50, 99, 102, 185], "context": [21, 24, 35, 132, 133, 134, 135, 136, 149, 186], "manag": [21, 28, 35, 149], "backend_context": [21, 28], "whcih": 21, "safe": [21, 46, 147, 188], "approach": [21, 113, 148], "librari": [21, 23, 28, 100, 110, 185], "matter": 21, "transpos": [21, 118, 131, 140, 156, 157, 165, 178, 179, 180, 187], "clip": [21, 74, 82], "etc": [21, 22, 28, 145, 185, 187], "staticmethod": 21, "common": [21, 109, 131, 143, 146, 167, 187], "api": [21, 26, 145, 185, 187], "some": [21, 23, 28, 29, 32, 75, 131, 181, 188, 190], "kron": 21, "subclass": [21, 131, 181], "logic": [21, 31], "__init__": [21, 185], "cach": [21, 28, 127, 129], "maintain": [21, 26, 131], "_loaded_backend": 21, "actual": [21, 32, 79, 98, 127, 145, 188], "modul": [21, 24, 28, 46, 185, 187, 191], "_backend": 21, "importlib": 21, "register_backend": 21, "onc": [21, 26, 185], "grab": 21, "intern": [21, 32, 51, 83], "_state": 21, "storag": [21, 190], "farm": 21, "out": [21, 22, 30, 31, 32, 33, 34, 46, 47, 99, 100, 109, 110, 111, 112, 117, 121, 130, 131, 143, 146, 147, 148, 181, 182, 183], "mechan": 21, "wrap": [21, 22], "docstr": [21, 22, 24], "minutia": 21, "themselv": 21, "certain": 21, "properti": [21, 131, 145, 163, 185], "descriptor": 21, "int32": [21, 32, 148], "tf": 21, "compat": [21, 24, 27, 32, 102, 121, 131, 140, 145, 182], "varaibl": 21, "override_module_dispatch": 21, "done": [21, 27, 165, 185, 189], "_getattr__": 21, "__dir__": 21, "pep": [21, 110], "562": 21, "overwrit": 21, "sy": 21, "module_nam": 21, "__class__": 21, "custom": [21, 182], "moduletyp": 21, "overrridden": 21, "__getitem__": 21, "welcom": 22, "cool": 22, "spot": 22, "bug": 22, "even": [22, 28, 130, 145, 188], "typo": 22, "mistak": 22, "document": [22, 24, 26, 99, 144, 181], "pleas": [22, 26, 111, 117, 191], "report": 22, "open": [22, 26, 32, 129], "pull": 22, "request": 22, "relev": 22, "issu": [22, 26, 32, 112], "talk": 22, "gitter": 22, "fix": [22, 28, 51, 53, 57, 61, 63, 64, 65, 71, 73, 74, 81, 82, 83, 84, 87, 184, 189], "repositori": 22, "help": 22, "unit": [22, 61], "especi": [22, 112, 148, 185], "refactor": 22, "exis": 22, "broken": 22, "submit": 22, "your": [22, 23, 26, 27, 28, 79, 98, 127, 129, 185, 187], "adher": 22, "guid": [22, 26], "easiest": 22, "black": 22, "pip": 22, "instal": [22, 26, 185], "exist": [22, 46, 145, 147], "don": [22, 111, 117], "hesit": 22, "contact": 22, "unsur": 22, "transpar": [22, 28, 127, 129, 185, 187], "never": 22, "directli": [22, 27, 28, 50, 53, 87, 93, 148, 154, 181], "torch": [22, 26, 187], "tensordot": [22, 100, 110], "doesn": [22, 50], "try": [22, 183], "ones": [22, 29, 53, 71, 73, 75, 87, 102, 109, 110, 148, 169, 182, 183, 187, 188, 190], "otherwis": [22, 29, 33, 34, 49, 53, 58, 71, 73, 75, 79, 81, 87, 98, 100, 112, 132, 133, 134, 135, 136, 137, 140, 153, 181, 183], "statement": 22, "min_valu": [22, 185], "NOT": 22, "reason": 22, "restrict": 22, "might": [22, 32, 123, 185, 187], "ndarrai": [22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 65, 70, 71, 73, 74, 76, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 99, 100, 102, 109, 110, 111, 112, 117, 118, 121, 122, 123, 124, 125, 126, 130, 131, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 155, 156, 157, 159, 160, 161, 167, 169, 170, 174, 177, 181, 182, 183, 184, 185], "fail": [22, 131, 146], "aspect": 22, "new_tensor": [22, 185], "express": [22, 29, 75, 122, 123, 124, 125, 126, 129, 165, 189, 190], "unfortun": 22, "index_upd": [22, 28, 105], "previou": [22, 53, 71, 73, 74, 82, 84, 87, 131, 145], "becom": [22, 35, 63, 86, 148, 149], "becaus": [22, 29, 31, 32, 131, 187, 188], "orient": 22, "automat": [22, 23, 28, 127, 129, 145, 188], "util": [22, 26, 28, 187], "assert_class_wrapper_correctly_passes_argu": 22, "keyword": [22, 30, 47, 110, 112, 140, 143, 145, 146, 169], "argument": [22, 30, 32, 46, 47, 58, 100, 102, 110, 111, 112, 117, 121, 143, 145, 146, 147, 163, 167, 169, 181, 182, 185], "test_cp": 22, "monkeypatch": 22, "ignore_arg": 22, "except": [22, 31, 32, 46, 70, 100, 102, 111, 112, 117, 130, 131, 145, 148, 190], "notic": [22, 23, 111, 117], "pytest": [22, 27], "know": 22, "plan": 22, "purpos": [22, 28], "essenti": 22, "behind": 22, "scene": 22, "inspect": 22, "down": 22, "Then": [22, 27, 86, 113, 154, 155], "mock": 22, "word": [22, 32, 36, 113, 185], "temporarili": 22, "replac": 22, "assert": 22, "everi": [22, 148, 154, 155], "placehold": 22, "send": [22, 185], "reset": 22, "behaviour": [22, 32, 145], "crutial": 23, "cover": [23, 145, 181], "syntax": 23, "restructuredtext": 23, "rst": 23, "come": [23, 27, 145], "style": [23, 24, 102, 121, 182], "arg": 23, "descript": [23, 187], "possibli": 23, "space": [23, 32, 145], "colon": 23, "explan": [23, 131, 191], "singl": [23, 29, 31, 75, 90, 95, 111, 112, 117, 122, 130, 145, 148, 167], "backtick": 23, "doubl": [23, 131, 167], "inlin": 23, "block": [23, 28, 46, 109, 147], "leav": [23, 37, 38, 39, 40], "white": 23, "indent": 23, "said": [23, 189], "mod": 23, "algebra": [23, 26, 127, 129, 144, 186], "func": 23, "hierarchi": 23, "determin": [23, 111, 117, 131, 144, 145], "tabl": 23, "content": 23, "rubric": 23, "locat": [23, 30, 47, 110, 143, 146, 187], "everytim": 23, "short": [23, 27, 185, 187], "plot_xyz": 23, "remaind": 23, "comment": 23, "below": [23, 29, 32, 99, 112, 113], "displai": 23, "myvari": 23, "my": 23, "section": [23, 32], "header": 23, "render": 23, "begin": [23, 37, 38, 39, 40, 55, 92, 189], "underlin": 23, "emb": 23, "symbol": 23, "splitter": 23, "79": [23, 50], "guidelin": 24, "practic": [24, 50, 76, 91, 131, 185], "index": [24, 33, 34, 37, 39, 42, 78, 93, 96, 102, 106, 110, 140, 147, 154, 155, 157, 165, 178, 179, 180, 189], "interfac": [24, 131, 185, 188], "dispatch": [24, 28, 127, 129, 163, 187], "simpl": 26, "bsd": 26, "licens": 26, "pure": 26, "apach": 26, "thorough": 26, "discov": 26, "easili": [26, 28, 127, 129, 185, 187, 190], "advanc": [26, 28, 187], "anywher": 26, "multi": [26, 28, 53, 67, 71, 73, 87, 121, 182, 185, 189], "machin": [26, 29, 51, 75, 83, 101, 103, 187], "speedup": 26, "extens": 26, "Its": [26, 57, 81, 144, 184], "suitabl": 26, "industri": [26, 53, 71, 73, 87], "academia": 26, "lab": 26, "around": 26, "world": 26, "instruct": [26, 185], "friendli": 26, "meet": 26, "team": 26, "consid": [26, 29, 53, 71, 73, 74, 75, 82, 87, 137], "cite": 26, "year": [26, 27], "2019": 26, "volum": [26, 50], "v20": 26, "html": [26, 27], "emsp": 26, "author": 26, "bibtex": 26, "python3": 27, "python2": 27, "probabl": 27, "upgrad": 27, "pain": 27, "free": [27, 29, 75], "anaconda": 27, "distribiut": 27, "ship": 27, "termin": [27, 53, 71, 73, 74, 82, 84, 87], "channel": 27, "And": 27, "cd": 27, "git": 27, "edit": 27, "equival": [27, 31, 32, 58, 63, 100, 102, 106, 130, 140, 142, 143, 144, 148, 165, 167, 169, 180, 181, 190], "uni": 27, "vital": 27, "slimit": 27, "minifi": 27, "rcssmin": 27, "build": [27, 113], "doc": [27, 30, 47, 110, 143, 146], "_build": 27, "answer": [27, 131], "2018": [27, 129], "releas": 27, "ago": 27, "break": [27, 145], "lot": 27, "thing": 27, "quot": 27, "wiki": [27, 131], "legaci": 27, "languag": 27, "strengh": 28, "weak": 28, "loos": 28, "popular": 28, "complet": [28, 131, 187], "thin": 28, "known": [28, 80, 97, 170, 188, 190], "product": [28, 29, 59, 63, 64, 65, 75, 93, 100, 109, 110, 114, 122, 123, 124, 125, 126, 130, 150, 153, 154, 155, 156, 157, 158, 165, 167, 174, 177, 186, 187], "state": [28, 174, 186], "whose": [28, 29, 75, 102, 112, 118, 122, 123, 124, 125, 126, 146, 170, 174], "evolv": [28, 29, 75, 122, 123, 124, 125, 126], "khatri": [28, 60, 63, 64, 65, 93, 154, 165], "rao": [28, 60, 93, 154, 165], "kroneck": [28, 109, 154, 165, 180, 187], "svd": [28, 29, 49, 50, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 96, 97, 98, 159, 160, 163, 184, 188, 190], "own": 28, "candecomp": [28, 53, 71, 73, 74, 82, 87, 186], "contract": [28, 127, 129, 164, 167], "path": [28, 127, 129], "quickli": [28, 187], "necessarili": 28, "tensor_slic": [29, 75], "2000": [29, 75], "truncated_svd": [29, 51, 53, 54, 57, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 163, 184, 185], "normalize_factor": [29, 51, 52, 53, 71, 73, 75, 83, 84, 85, 86, 87], "absolute_tol": [29, 75], "nn_mode": [29, 73, 75, 84], "n_iter_parafac": [29, 75], "th": [29, 57, 66, 75, 81, 99, 102, 122, 123, 124, 125, 126, 154, 169, 184], "x_i": [29, 75, 122, 123, 124, 125, 126, 191], "diag": [29, 75, 102, 122, 123, 124, 125, 126], "a_i": [29, 75, 122, 123, 124, 125, 126], "diagon": [29, 75, 99, 102, 122, 123, 124, 125, 126, 190], "row": [29, 46, 75, 93, 102, 121, 122, 123, 124, 125, 126, 144, 154, 182], "j_i": [29, 55, 75, 92, 122, 123, 124, 125, 126], "cross": [29, 50, 75, 122, 123, 124, 125, 126, 187, 190], "i_1": [29, 41, 43, 59, 75, 122, 123, 124, 125, 126, 156, 177, 189, 190], "constant": [29, 61, 75, 122, 123, 124, 125, 126, 133], "reformul": [29, 75, 122, 123, 124, 125, 126], "orthogon": [29, 49, 54, 57, 75, 81, 89, 122, 123, 124, 125, 126, 131, 132, 136, 184], "formul": [29, 75, 122, 123, 124, 125, 126], "x_": [29, 75, 122, 123, 124, 125, 126, 189], "hold": [29, 61, 75, 122, 123, 124, 125, 126], "int": [29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 111, 112, 117, 118, 120, 121, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 147, 148, 152, 153, 154, 155, 156, 157, 163, 164, 165, 167, 169, 171, 173, 175, 177, 178, 179, 180, 182, 183, 184], "previous": [29, 58, 75, 189, 190], "parafac2tensor": [29, 75, 122, 123, 124, 125, 126], "initialize_factor": [29, 53, 71, 73, 74, 75, 82, 87], "accept": [29, 51, 53, 54, 57, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 163, 184], "svd_fun": [29, 51, 53, 54, 57, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 96, 97, 98, 163, 184], "aggreg": [29, 51, 52, 53, 71, 73, 75, 83, 84, 85, 86, 87], "1d": [29, 41, 43, 51, 53, 59, 71, 73, 74, 75, 82, 83, 84, 87, 122, 123, 124, 125, 126, 138, 154, 156, 177, 180], "inaccuraci": [29, 75], "toler": [29, 51, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 184], "epsilon": [29, 75, 101], "That": [29, 75, 127, 129, 130, 190], "less": [29, 50, 51, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 130, 145, 148, 184], "stop": [29, 30, 32, 51, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 184], "condit": [29, 30, 47, 49, 75, 79, 98, 100, 134, 135, 143, 146, 181], "tolearnc": [29, 75], "epsilon_": [29, 75], "necessari": [29, 75, 109, 112, 130, 131, 148, 185, 188], "warn": [29, 32, 75], "shown": [29, 75], "info": [29, 75], "randomst": [29, 44, 50, 51, 52, 53, 54, 57, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 87, 89, 91, 93, 132, 133, 134, 135, 136, 137, 138, 139, 184], "projection_matric": [29, 75, 122, 123, 124, 125, 126], "slightli": [29, 75], "li": [29, 75], "wherea": [29, 75], "nd": [29, 53, 71, 73, 75, 87, 132, 134, 135, 136, 147, 152], "reorder": [29, 75, 118], "consequ": [29, 145], "unlik": [29, 111, 117], "l": [29, 49, 75, 120], "294": [29, 75], "cast": [30, 32, 46, 47, 110, 112, 130, 143, 146, 147, 148], "same_kind": [30, 46, 47, 110, 143, 146, 147], "subok": [30, 47, 58, 110, 143, 146, 183], "extobj": [30, 47, 110, 143, 146], "wise": [30, 46, 47, 84, 111, 113, 117, 143, 146, 154], "shorthand": [30, 110, 181], "array_lik": [30, 31, 32, 33, 34, 46, 47, 58, 99, 100, 102, 109, 110, 111, 112, 117, 121, 130, 131, 140, 142, 143, 144, 145, 146, 147, 148, 167, 169, 181, 182, 183], "broadcast": [30, 31, 33, 34, 47, 63, 110, 111, 112, 117, 130, 143, 144, 146, 148, 181], "freshli": [30, 47, 110, 143, 146], "alloc": [30, 47, 110, 143, 146], "At": [30, 47, 143, 146], "ufunc": [30, 31, 47, 110, 111, 112, 117, 130, 143, 146, 148], "elsewher": [30, 47, 102, 143, 146, 181], "uniniti": [30, 47, 121, 143, 146, 182], "within": [30, 32, 47, 58, 143, 146], "remain": [30, 47, 118, 140, 143, 146], "kwarg": [30, 47, 110, 137, 138, 139, 143, 146, 163, 166], "ib": 30, "sqrt": [30, 143], "scalar": [30, 47, 100, 110, 111, 117, 130, 143, 144, 146, 148, 167], "1j": [30, 47], "5620499351813308": 30, "linspac": [30, 32], "num": 30, "101": 30, "plane": [30, 146], "xx": 30, "extent": 30, "grai": [30, 129], "keepdim": [31, 33, 34, 111, 112, 117, 130, 148], "AND": 31, "count": [31, 130, 148], "place": [31, 46, 111, 112, 117, 130, 140, 145, 147, 148], "preserv": [31, 46, 131], "correctli": [31, 33, 34, 111, 112, 117, 130, 148, 181], "against": [31, 33, 34, 111, 112, 117, 130, 137, 148, 188], "sub": [31, 46, 58, 111, 112, 117, 130, 147, 148, 183, 188, 190], "rais": [31, 100, 110, 111, 112, 117, 130, 131, 140, 144, 148, 188], "Not": 31, "nan": [31, 111, 117, 130, 143, 145, 146, 148], "infin": 31, "zero": [31, 53, 55, 70, 71, 73, 76, 87, 91, 92, 102, 112, 118, 121, 124, 125, 126, 140, 148, 154, 167, 183, 189, 190], "o": [31, 50, 145], "id": [31, 190], "28293632": 31, "vari": [31, 32, 61, 63, 65, 112, 123, 130, 145, 148], "step": [32, 76, 91, 148], "evenli": 32, "interv": [32, 146], "half": 32, "exclud": 32, "roughli": 32, "real": [32, 131, 143, 145, 146, 190], "end": [32, 37, 38, 39, 40, 50, 55, 92, 145, 185, 189], "round": [32, 148, 190], "off": 32, "adjac": 32, "creation": [32, 102, 121, 182, 185], "__array_function__": [32, 102, 121, 182], "protocol": [32, 102, 121, 182], "overflow": [32, 130, 148], "rule": [32, 110, 144, 148], "greater": [32, 131], "numer": [32, 148, 185, 190], "stabl": [32, 145], "stabil": 32, "due": [32, 51, 53, 71, 73, 74, 82, 83, 87, 190], "larger": 32, "lead": [32, 58, 148], "unexpect": 32, "arbitrari": [32, 100, 110], "int64": 32, "incorrect": 32, "power": [32, 56, 72, 77, 88, 90, 94, 95, 190], "modulo": 32, "10000": 32, "x1": [32, 110, 144], "x2": [32, 110], "7776": 32, "8801": 32, "6176": 32, "625": 32, "6576": 32, "4001": 32, "7185": 32, "5969": 32, "4816": 32, "3361": 32, "care": [32, 188], "endpoint": 32, "ogrid": [32, 181], "mgrid": 32, "grid": 32, "partit": [32, 145], "insert": [33, 34, 140], "appropri": [33, 34, 188], "index_arrai": [33, 34], "remov": [33, 34, 53, 71, 73, 87, 110, 130, 148], "argmin": [33, 117], "unravel_index": [33, 34], "flat": [33, 34], "take_along_axi": [33, 34], "expand_dim": [33, 34], "occurr": [33, 34], "ind": [33, 34], "squeez": [33, 34], "minimum": [34, 53, 71, 73, 74, 82, 87, 111, 117], "amin": [34, 111, 117], "local_threadsaf": [35, 141, 149, 162], "hasn": [35, 149], "explicitli": [35, 109, 149], "session": [35, 149], "unfolded_tensor": [36, 42], "refold": [36, 40, 63, 187], "folded_tensor": 36, "skip_end": [37, 38, 39, 40], "partial": [37, 38, 39, 40, 50, 54, 67, 89, 137, 145, 148], "untouch": [37, 38, 39, 40], "vectoris": [38, 40, 41, 43, 65, 180], "ignor": [38, 39, 81, 111, 117, 160], "ravel_tensor": 39, "n_sampl": [39, 55, 76, 91, 92, 93, 115, 116, 137, 138, 139, 150, 152], "n_1": 39, "n_2": 39, "n_i": [39, 93, 154], "i_n": [41, 43, 59, 156, 177, 189], "i_2": [41, 43, 189, 190], "vec": [43, 157], "ful": 43, "valid": [44, 57, 81, 122, 123, 184], "inspir": 44, "scikit": [44, 187, 188, 191], "eponym": 44, "a_min": 45, "a_max": 45, "a1": 46, "a2": 46, "join": [46, 147, 165], "destin": [46, 118, 147], "togeth": [46, 110, 147, 181], "equiv": [46, 147], "unsaf": [46, 147], "control": [46, 58, 147], "kind": [46, 100, 103, 140, 145, 147], "ma": 46, "array_split": 46, "split": [46, 147, 190], "hsplit": 46, "horizont": 46, "vsplit": 46, "vertic": [46, 113], "dsplit": 46, "3rd": 46, "stack": [46, 110, 113, 131, 165], "assembl": [46, 147, 170, 174], "hstack": 46, "vstack": 46, "dstack": 46, "column_stack": 46, "maskedarrai": 46, "masked_arrai": 46, "fill_valu": [46, 188], "999999": 46, "conjug": [47, 100, 110, 156, 157], "imaginari": [47, 145], "alia": [47, 131], "2j": [47, 100, 110, 143], "ey": [47, 109, 142], "data_tensor": 49, "n_iter": [49, 56, 72, 77, 88, 90, 94, 95], "trajectori": 49, "ttoi": 49, "verifi": [49, 134, 135], "boundari": [49, 79, 98, 134, 135, 173], "full_tensor": 49, "zhou": 49, "zhang": 49, "zheng": 49, "2022": [49, 113], "theori": 49, "3991": 49, "4019": 49, "input_tensor": [50, 78, 80, 96, 97], "0001": [50, 52, 54, 55, 57, 81, 85, 89, 92, 184], "ttcross": 50, "whole": [50, 160], "fiber": 50, "skeleton": 50, "sweep": 50, "submatrix": 50, "advantag": [50, 167, 188, 190], "tensor_shap": [50, 64], "tensor_ord": 50, "feasibl": 50, "disadvantag": 50, "accur": [50, 112], "underestim": 50, "contrast": [50, 148], "theoret": 50, "guarante": [50, 140, 190], "kth": [50, 78, 80, 96, 97], "outer": [50, 63, 74, 82, 109, 150, 190], "loop": [50, 74, 82], "pseudo": 50, "qr": 50, "maxvol": 50, "acknowledg": 50, "bodi": 50, "modifi": [50, 51, 53, 58, 68, 71, 73, 74, 82, 83, 87, 140], "tensortoolbox": 50, "daniel": [50, 129], "bigoni": 50, "ivan": [50, 80, 97], "oseledet": [50, 80, 97], "eugen": 50, "tyrtyshnikov": 50, "multidimension": [50, 181], "linearalgebra": 50, "432": 50, "70": [50, 109, 181], "88": 50, "2010": 50, "sergei": 50, "dolgov": 50, "robert": 50, "scheichl": 50, "hybrid": 50, "parametricpd": 50, "arxiv": [50, 78, 96], "preprint": [50, 78, 96], "1707": 50, "04562": 50, "2017": 50, "29": 50, "54": 50, "99": 50, "75": [50, 53, 71, 73, 87], "124": 50, "104": 50, "cvg_criterion": [51, 53, 71, 73, 74, 82, 83, 84, 87], "abs_rec_error": [51, 53, 71, 73, 74, 82, 83, 84, 87], "fixed_mod": [51, 53, 71, 73, 74, 82, 83, 84, 86, 87], "variat": [51, 54, 57, 76, 81, 83, 84, 86, 89, 91, 184], "amnon": [51, 83], "shashua": [51, 83], "tamir": [51, 83], "hazan": [51, 83], "statist": [51, 83], "vision": [51, 52, 83, 85], "proceed": [51, 83], "confer": [51, 52, 83, 85], "icml": [51, 83], "pp": [51, 52, 53, 57, 71, 73, 74, 81, 82, 83, 85, 86, 87, 154, 155, 184, 189, 190, 191], "792": [51, 83], "799": [51, 83], "2005": [51, 53, 71, 73, 83, 87], "yong": [52, 85], "deok": [52, 85], "kim": [52, 85], "seungjin": [52, 85], "choi": [52, 85], "recognit": [52, 85], "cvpr": [52, 85], "2007": [52, 85], "svd_mask_repeat": [53, 54, 71, 73, 87, 89], "callback": [53, 71, 76, 87, 91], "everywher": [53, 54, 55, 57, 71, 73, 87, 89, 92, 163, 184, 190], "fill": [53, 54, 57, 71, 73, 87, 89, 106, 121, 182, 183, 184], "rec_error": [53, 55, 71, 73, 74, 82, 84, 87, 92], "criterion": [53, 71, 73, 74, 82, 84, 87], "low_rank_compon": [53, 71, 73, 87], "sparse_compon": [53, 71, 73, 87], "denot": [53, 71, 73, 87, 189], "fraction": [53, 71, 73, 87], "kolda": [53, 57, 71, 73, 74, 76, 81, 82, 86, 87, 91, 154, 155, 184, 189, 190], "w": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190, 191], "bader": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "siam": [53, 57, 71, 73, 74, 80, 81, 82, 86, 87, 97, 154, 155, 184, 189, 190], "review": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "vol": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "455": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "2009": [53, 57, 71, 73, 74, 81, 82, 86, 87, 154, 155, 184, 189, 190], "tomasi": [53, 71, 73, 87], "giorgio": [53, 71, 73, 87], "rasmu": [53, 71, 73, 87, 137], "intellig": [53, 71, 73, 87], "laboratori": [53, 71, 73, 87], "163": [53, 71, 73, 87], "180": [53, 71, 73, 87], "food": [53, 71, 73, 87], "phd": [53, 71, 73, 87], "amsterdam": [53, 71, 73, 87], "1998": [53, 71, 73, 87], "hoi": [54, 57, 81, 89, 184], "exclus": [54, 89], "tuckertensor": [54, 89, 177, 178, 179, 180], "reg_": [55, 92], "reg_j": [55, 92], "mu_init": [55, 92], "mu_max": [55, 92], "10000000000": [55, 92], "learning_r": [55, 92], "pca": [55, 92], "alm": [55, 92], "n1": [55, 92, 137, 138, 139], "regularis": [55, 92, 116, 138, 139], "10e9": [55, 92], "percentag": [55, 92], "tild": [55, 92, 189, 191], "equat": [55, 92, 131, 144], "align": [55, 92], "reg": [55, 92], "_j": [55, 92], "_e": [55, 92], "_1": [55, 92, 114], "cdot": [55, 92, 154, 155, 157, 167, 189, 190, 191], "n_repeat": [56, 72, 77, 88, 90, 94, 95], "symmetr": [56, 61, 77, 94, 95], "tri": [56, 72, 77, 88, 90, 94, 95], "eigenvalu": [56, 61, 72, 77, 88, 90, 94, 95], "eigenvector": [56, 72, 77, 88, 90, 94, 95], "fixed_factor": [57, 81, 184], "keep": [57, 81, 84, 145, 173, 183, 184, 185], "memori": [58, 102, 121, 140, 148, 165, 182, 183, 188], "layout": [58, 140, 183], "fortran": [58, 102, 121, 131, 140, 182, 183], "contigu": [58, 100, 140, 183], "close": [58, 183], "forc": 58, "arr": 58, "interpret": [58, 68], "writeabl": 58, "flag": 58, "shallow": 58, "mainli": 58, "surpris": 58, "mutabl": 58, "matrix_or_vector": [59, 156, 177], "keep_dim": [59, 177], "2d": [59, 132, 136, 137, 152, 154, 156, 163, 177, 178, 179], "i_k": [59, 154, 155, 156, 177, 189], "i_": [59, 156, 177, 189], "kruskal_multi_mode_dot": 59, "chain": [59, 100, 156, 177], "mode_dot": [59, 157, 177], "khatria": 60, "turn": [61, 63, 64, 65], "u_1": [61, 63, 64, 65, 154, 155], "u_n": [61, 63, 64, 65, 154, 155], "v_1": 61, "v_n": 61, "v_k": 61, "euclidean": 61, "u_k": [61, 64, 154, 155], "absorb": 61, "special": 61, "s_i": [61, 63, 65], "normalisation_weight": 61, "normalised_factor": 61, "ref_cp_tensor": 62, "tensors_to_permut": 62, "serv": 62, "permuted_tensor": 62, "lenght": 62, "factor_matric": [63, 64], "ie": 64, "s_u_i": 64, "exploit": 64, "khatri_rao": [64, 165], "ravel": [65, 140, 154], "indian": 66, "pine": 66, "hyperspectr": 66, "websit": [66, 67], "drive": [66, 67], "classif": 66, "segment": 66, "tha": 66, "ground": [66, 115, 116], "truth": [66, 115, 116], "ehu": 66, "eu": 66, "ccwintco": 66, "upload": 66, "c4": 66, "indian_pines_gt": 66, "mat": 66, "kinet": 67, "fluoresc": 67, "suit": 67, "pl": [67, 137], "mutein": 68, "eight": 68, "four": [68, 145], "mono": 68, "n_channel": 70, "weight_valu": 70, "sparsity_coeffici": [73, 84, 86], "exact": [73, 84, 86, 100, 144, 148], "n_iter_max_inn": [74, 82], "tol_out": [74, 82], "tol_inn": [74, 82], "factor_aux": [74, 82], "inner": [74, 82, 100, 110], "dure": [74, 82, 137, 185], "seper": [74, 82], "divid": [74, 82, 112], "distrbut": [74, 82], "self": [75, 137, 138, 139], "max_stagn": [76, 91], "randomis": [76, 91], "casei": [76, 91], "battaglino": [76, 91], "grei": [76, 91], "ballard": [76, 91], "tamara": [76, 91], "ring": [78, 96, 173], "recurs": [78, 80, 96, 97], "union": [78, 96], "tr": [78, 96], "qibin": [78, 96], "zhao": [78, 96], "1606": [78, 96], "05535": [78, 96], "tensorized_shap": [79, 98], "rank_2": [79, 98], "dictat": [79, 98], "tt_matrix": [79, 98, 187], "v": [80, 84, 86, 97, 99, 114, 163, 185, 188], "scientif": [80, 97], "2295": [80, 97], "2317": [80, 97], "2011": [80, 97], "hal": [84, 86], "r2e3307d426a": 84, "success": [84, 86], "core_sparsity_coeffici": 86, "fista": 86, "nnl": 86, "tensor_i": 86, "core_i": 86, "prod_": [86, 154, 155, 189], "neq": [86, 189], "delta": 86, "tm": 86, "tu": 86, "utu": 86, "utm": 86, "corecross": 86, "tensorcross": 86, "corecross_j": 86, "core_j": 86, "tensorcross_j": 86, "eigenv": [90, 95], "best_factor": [90, 95], "deflat": [90, 95], "skip_matrix": [93, 154, 155, 165], "indices_list": 93, "return_sampled_row": 93, "subsampl": 93, "taken": [93, 112], "random_sampl": 93, "returned_sampled_row": 93, "sampled_khatri_rao": 93, "matricis": 93, "indices_kr": 93, "view": [99, 118, 140, 169, 189], "question": 99, "diagflat": 99, "trace": 99, "triu": 99, "triangl": 99, "tril": 99, "matmul": [100, 131], "bla": [100, 110], "featur": [100, 186, 190], "met": 100, "valueerror": [100, 110], "vdot": [100, 110], "einstein": [100, 110], "summat": [100, 110, 148], "convent": [100, 110, 146], "multi_dot": 100, "neither": [100, 110, 185], "3j": [100, 110], "0j": [100, 110, 143], "499128": 100, "ident": [102, 144, 145], "almost": [102, 145, 190], "intput": 106, "composit": [109, 148], "prepend": [109, 110], "smallest": 109, "r0": 109, "r1": 109, "rn": 109, "s0": 109, "s1": 109, "sn": 109, "k0": 109, "k1": [109, 150, 158], "kn": 109, "i0": 109, "i1": [109, 190], "iN": 109, "j0": 109, "j1": [109, 150, 158], "jn": [109, 150, 158], "kt": 109, "st": 109, "jt": 109, "visual": 109, "600": 109, "700": 109, "extend": [109, 145, 167], "treat": 110, "resid": 110, "accordingli": 110, "append": [110, 165], "semant": 110, "465": 110, "mix": 110, "usual": [110, 188], "98": 110, "traceback": [110, 140], "recent": [110, 140], "operand": 110, "buffer": [111, 117], "empti": [111, 117, 121, 130, 148, 182, 183], "propag": [111, 117], "nanmax": [111, 117], "fmax": [111, 117], "nanmin": [111, 117], "fmin": [111, 117], "item": [111, 117, 145], "matlab": [111, 117], "maxima": 111, "isnan": [111, 117], "arithmet": [112, 130, 148], "intermedi": [112, 188], "std": 112, "var": 112, "nanmean": 112, "nanstd": 112, "nanvar": 112, "inaccur": 112, "accumul": [112, 130, 148, 154], "allevi": 112, "float16": 112, "extra": 112, "512": 112, "54999924": 112, "55000000074505806": 112, "factors_1": 113, "factors_2": 113, "5e": 113, "corrindex": 113, "assess": [113, 187], "sobhani": 113, "1016": 113, "sigpro": 113, "108457": 113, "invari": [113, 163], "wherein": 113, "a_1": 113, "a_n": 113, "score": 113, "concaten": [113, 147], "big": 113, "max_scor": 113, "pair": 113, "a_2": 113, "conserv": 113, "min_scor": 113, "avg_scor": 113, "avg": 113, "matrix1": [114, 187], "matrix2": [114, 187], "absolute_valu": 114, "mathbf": [114, 189], "_2": 114, "y_true": [115, 116], "y_pred": [115, 116], "target": [115, 116, 137], "mean_squared_error": 116, "isn": 117, "move": [118, 169], "These": [118, 187], "uniqu": 118, "swapax": 118, "interchang": 118, "int8": [121, 130, 148, 182], "ones_lik": [121, 183], "slice_idx": 122, "describ": [122, 123, 124, 125, 126], "pad": [124, 125, 126, 173], "hq": [127, 129], "cuquantum": 127, "precomput": [127, 129], "favourit": [127, 129], "opt": [127, 129], "revert": [127, 128, 129], "pluge": [127, 129], "use_default_einsum": [127, 129], "smith": 129, "johnni": 129, "opt_einsum": 129, "softwar": 129, "753": 129, "platform": [130, 148], "unsign": [130, 148], "product_along_axi": 130, "modular": [130, 148], "bit": 130, "536870910": 130, "neutral": [130, 148], "But": 130, "Or": [130, 167], "uint": 130, "q": 131, "orthonorm": 131, "triangular": 131, "raw": 131, "tau": 131, "backward": [131, 145], "earlier": [131, 187], "omit": [131, 181], "econom": 131, "deprec": 131, "letter": 131, "spell": 131, "unitari": 131, "cdoubl": 131, "household": 131, "reflector": 131, "linalgerror": [131, 144], "rq": 131, "lapack": [131, 144], "routin": [131, 144], "dgeqrf": 131, "zgeqrf": 131, "dorgqr": 131, "zungqr": 131, "en": 131, "wikipedia": 131, "qr_factor": 131, "too": [131, 148, 167, 181, 188], "addit": [131, 163, 169, 188], "expos": 131, "lapack_lit": 131, "await": 131, "randn": [131, 147], "allclos": [131, 144], "r2": 131, "illustr": 131, "y0": 131, "mx": 131, "graph": 131, "ll": 131, "gram": 131, "schmidt": 131, "inv": 131, "lstsq": [131, 144], "normalise_factor": [132, 133], "dict": [132, 134, 135, 185], "mp": [134, 174], "tt_tensor": [134, 135, 187], "3d": [134, 135, 171, 172, 174, 175, 176], "tucker_tensor": [136, 187], "n_compon": 137, "coupl": 137, "covari": 137, "multiwai": 137, "calibr": 137, "multilinear": 137, "1996": 137, "n_predict": 137, "associ": [137, 138, 139, 185], "n_featur": [137, 152], "predictor": 137, "n_target": 137, "x_score": 137, "y_score": 137, "get_param": [137, 138, 139], "set_param": [137, 138, 139], "newshap": 140, "read": [140, 189], "fastest": 140, "slowest": 140, "account": 140, "reshaped_arrai": 140, "attribut": [140, 183], "attributeerror": 140, "incompat": 140, "modif": 140, "fetch": 140, "sai": 140, "think": 140, "unspecifi": [140, 145], "i4": [142, 145, 182], "definit": 143, "ordin": 144, "singular": [144, 161, 163, 188, 190], "_gesv": 144, "linearli": 144, "independ": 144, "strang": 144, "2nd": 144, "ed": 144, "orlando": 144, "fl": 144, "academ": 144, "press": 144, "inc": 144, "1980": 144, "pg": 144, "x0": 144, "quicksort": 145, "mergesort": 145, "heapsort": 145, "timsort": 145, "radix": 145, "under": [145, 185], "field": 145, "string": 145, "up": [145, 188], "ti": 145, "sorted_arrai": 145, "argsort": [145, 169], "indirect": 145, "lexsort": 145, "searchsort": 145, "character": 145, "worst": 145, "log": 145, "ye": 145, "datatyp": 145, "finer": 145, "temporari": 145, "lexicograph": 145, "led": 145, "undefin": 145, "rj": 145, "nanj": 145, "placement": 145, "introsort": 145, "progress": 145, "map": [145, 189], "abil": 145, "hardwir": 145, "nearli": [145, 188], "cpython": 145, "listsort": 145, "txt": 145, "nat": 145, "s10": 145, "height": 145, "ag": 145, "arthur": 145, "lancelot": 145, "galahad": 145, "8999999999999999": 145, "f8": 145, "emath": 146, "branch": 146, "cut": 146, "continu": 146, "curv": 146, "4j": 146, "nest": 147, "sum_along_axi": 148, "cumsum": 148, "cumul": 148, "trapz": 148, "integr": [148, 187], "trapezoid": 148, "individu": [148, 163], "pairwis": 148, "mani": [148, 188], "technic": 148, "fsum": 148, "slower": [148, 154, 167, 180, 188], "advis": 148, "small": [148, 190], "128": 148, "tensor1": [150, 153, 158, 164], "tensor2": [150, 153, 158, 164], "km": [150, 158], "momemt": 152, "d1": 152, "dn": 152, "moment": 152, "n_mode": 153, "generalis": [153, 190], "tradit": [153, 167], "inner_product": 153, "revers": [154, 155, 169], "seen": [154, 190], "khatri_rao_product": 154, "prod": [154, 155, 188], "mathemat": [154, 155, 156, 180], "bigodot": 154, "intuit": 154, "kr_product": 154, "cum_prod": 154, "ij": 154, "kronecker_product": 155, "j_k": 155, "otim": [155, 167], "times_": 156, "multi_mode_dot": [156, 165], "matrix_or_vec_list": 157, "times_0": 157, "times_1": 157, "times_n": 157, "svd_threshold": [159, 160], "procrust": 161, "n_eigenvec": [163, 185], "flip_sign": 163, "u_based_flip_sign": 163, "n_iter_mask_imput": 163, "resolv": 163, "imput": 163, "callabl": 163, "eigen": 163, "indeterminaci": 163, "nn_type": 163, "nndsvd": 163, "noth": [163, 185, 189, 190], "repetit": 163, "batched_mod": 164, "batch": 164, "mttkrp": 165, "kr_factor": 165, "mttkrp2": 165, "mttkrp_part": 165, "consum": 165, "tensor_idx": 165, "chr": 165, "op": 165, "tl_einsum": 165, "a_ax": 167, "b_ax": 167, "integer_lik": 167, "nth": 167, "0th": 167, "1th": 167, "forth": 167, "4400": 167, "4730": 167, "4532": 167, "4874": 167, "4664": 167, "5018": 167, "4796": 167, "5162": 167, "4928": 167, "5306": 167, "overload": 167, "abbcccdddd": 167, "aaaaabbbbbbcccccccdddddddd": 167, "acc": 167, "bdd": 167, "aaacccc": 167, "bbbdddd": 167, "aaaaacccccc": 167, "bbbbbdddddd": 167, "aaaaaaacccccccc": 167, "bbbbbbbdddddddd": 167, "incl": 167, "abbbbb": 167, "cddddd": 167, "aabbbbbb": 167, "ccdddddd": 167, "aaabbbbbbb": 167, "cccddddddd": 167, "aaaabbbbbbbb": 167, "ccccdddddddd": 167, "abb": 167, "cdd": 167, "aaabbbb": 167, "cccdddd": 167, "aaaaabbbbbb": 167, "cccccdddddd": 167, "aaaaaaabbbbbbbb": 167, "cccccccdddddddd": 167, "abbbcccccddddddd": 167, "aabbbbccccccdddddddd": 167, "acccbbdddd": 167, "aaaaacccccccbbbbbbdddddddd": 167, "unchang": [169, 183], "atleast2d": 169, "whenev": [169, 188], "moveaxi": 169, "sort": 169, "invert": 169, "transposit": 169, "4d": 170, "rank_k": 170, "left_dim_k": 170, "right_dim_k": 170, "rank_": 170, "output_tensor": [170, 174], "reassembl": [171, 175], "factor_list": 173, "n_pad": 173, "pad_boundari": 173, "bond": 173, "padded_factor_list": 173, "tucker_multi_mode_dot": 177, "skip_factor": [178, 179, 180], "transpose_factor": [178, 179, 180], "lengh": 178, "asarrai": 181, "yield": 181, "xv": 181, "yv": 181, "80": 181, "90": 181, "zeros_lik": 182, "overrid": 183, "newli": 183, "impli": 183, "full_lik": 183, "ubiquit": 185, "exactli": [185, 190], "hood": 185, "decid": 185, "introduct": 185, "abl": 185, "default_backend": 185, "haven": 185, "complexifi": 185, "nor": 185, "tradition": [185, 189], "ctx": 185, "floattensor": 185, "cuda": 185, "characteris": 185, "trivial_fun": 185, "trivial": 185, "isol": 185, "go": [185, 190], "random_tensor": [185, 187], "reat": 185, "decomp": 185, "rec": 185, "to_tensor": 185, "everyth": 185, "post": 185, "posthoc": 185, "studi": 186, "overview": 187, "familiar": 187, "submodul": 187, "contrib": [187, 188, 190], "mention": 187, "anyth": 187, "adapt": [187, 188], "subtlti": 187, "regardless": 187, "10x10x10": 187, "explicit": [187, 188], "zeroth": 187, "random_tuck": 187, "3x4x5": 187, "tucker_to_vec": 187, "aptli": 187, "hand": 187, "crafter": 187, "craft": 187, "tg": 187, "set_tenalg_backend": 187, "liner": 187, "optimis": 187, "applyt": 187, "unseen": 187, "fulli": [187, 190], "pydata": [187, 188], "nativ": 188, "dens": 188, "represent": [188, 190], "lack": 188, "opinion": 188, "decis": 188, "partial_tuck": 188, "robust_pca": 188, "mirror": 188, "coo": 188, "coord": 188, "rewritten": 188, "properli": 188, "densifi": 188, "watch": 188, "environ": 188, "sparse_auto_densifi": 188, "runtimeerror": 188, "awar": 188, "protect": 188, "caveat": 188, "proport": 188, "stl": 188, "1001": 188, "1002": 188, "starting_weight": 188, "nnz": 188, "starting_factor": 188, "recompos": 188, "worri": 188, "5044": 188, "densli": 188, "nbyte": 188, "1e9": 188, "gb": 188, "000161408": 188, "024016": 188, "dense_cp": 188, "3858051300048828": 188, "sparse_parafac": 188, "sparse_cp": 188, "053689002990723": 188, "spsolv": 188, "umfpack": 188, "x_1": 189, "x_2": 189, "matriz": 189, "i_0": 189, "classic": [189, 190], "i_m": 189, "substack": 189, "original_shap": 189, "greatest": 190, "compactli": 190, "tutori": 190, "Such": 190, "canon": 190, "polyad": 190, "super": 190, "smaller": 190, "000e": 190, "340e": 190, "617e": 190, "914e": 190, "475e": 190, "746e": 190, "physic": 190, "edg": 190, "connect": 190, "ldot": 190, "i_d": 190, "approx": 190, "alpha_1": 190, "alpha_": 190, "g_1": 190, "g_2": 190, "alpha_2": 190, "g_3": 190, "i_3": 190, "alpha_3": 190, "g_d": 190, "address": 190, "mps_decomposit": 190, "mps_decomposition_cross": 190, "matrix_product_st": 190, "tt_to_tensor": 190, "decim": 190, "seri": 191, "y_i": 191, "langl": 191, "rangl": 191, "r_1": 191, "r_n": 191, "krusal": 191, "cpregress": 191, "guo": 191, "kotsia": 191, "patra": 191, "816": 191, "827": 191}, "objects": {"": [[28, 0, 0, "-", "tensorly"]], "tensorly": [[30, 1, 1, "", "abs"], [31, 1, 1, "", "all"], [32, 1, 1, "", "arange"], [33, 1, 1, "", "argmax"], [34, 1, 1, "", "argmin"], [35, 1, 1, "", "backend_context"], [28, 0, 0, "-", "base"], [44, 1, 1, "", "check_random_state"], [45, 1, 1, "", "clip"], [46, 1, 1, "", "concatenate"], [47, 1, 1, "", "conj"], [48, 1, 1, "", "context"], [28, 0, 0, "-", "contrib"], [58, 1, 1, "", "copy"], [28, 0, 0, "-", "cp_tensor"], [28, 0, 0, "-", "datasets"], [28, 0, 0, "-", "decomposition"], [99, 1, 1, "", "diag"], [100, 1, 1, "", "dot"], [101, 1, 1, "", "eps"], [102, 1, 1, "", "eye"], [103, 1, 1, "", "finfo"], [104, 1, 1, "", "get_backend"], [105, 1, 1, "", "index"], [106, 1, 1, "", "index_update"], [107, 1, 1, "", "is_tensor"], [108, 1, 1, "", "kr"], [109, 1, 1, "", "kron"], [110, 1, 1, "", "matmul"], [111, 1, 1, "", "max"], [112, 1, 1, "", "mean"], [28, 0, 0, "-", "metrics"], [117, 1, 1, "", "min"], [118, 1, 1, "", "moveaxis"], [119, 1, 1, "", "ndim"], [120, 1, 1, "", "norm"], [121, 1, 1, "", "ones"], [28, 0, 0, "-", "parafac2_tensor"], [28, 0, 0, "-", "plugins"], [130, 1, 1, "", "prod"], [131, 1, 1, "", "qr"], [28, 0, 0, "-", "random"], [28, 0, 0, "-", "regression"], [140, 1, 1, "", "reshape"], [141, 1, 1, "", "set_backend"], [142, 1, 1, "", "shape"], [143, 1, 1, "", "sign"], [144, 1, 1, "", "solve"], [145, 1, 1, "", "sort"], [146, 1, 1, "", "sqrt"], [147, 1, 1, "", "stack"], [148, 1, 1, "", "sum"], [28, 0, 0, "-", "tenalg"], [166, 1, 1, "", "tensor"], [167, 1, 1, "", "tensordot"], [168, 1, 1, "", "to_numpy"], [169, 1, 1, "", "transpose"], [28, 0, 0, "-", "tt_matrix"], [28, 0, 0, "-", "tt_tensor"], [28, 0, 0, "-", "tucker_tensor"], [181, 1, 1, "", "where"], [182, 1, 1, "", "zeros"], [183, 1, 1, "", "zeros_like"]], "tensorly.base": [[36, 1, 1, "", "fold"], [37, 1, 1, "", "partial_fold"], [38, 1, 1, "", "partial_tensor_to_vec"], [39, 1, 1, "", "partial_unfold"], [40, 1, 1, "", "partial_vec_to_tensor"], [41, 1, 1, "", "tensor_to_vec"], [42, 1, 1, "", "unfold"], [43, 1, 1, "", "vec_to_tensor"]], "tensorly.contrib.decomposition": [[49, 1, 1, "", "tensor_train_OI"], [50, 1, 1, "", "tensor_train_cross"]], "tensorly.contrib": [[28, 0, 0, "-", "sparse"]], "tensorly.contrib.sparse.decomposition": [[51, 1, 1, "", "non_negative_parafac"], [52, 1, 1, "", "non_negative_tucker"], [53, 1, 1, "", "parafac"], [54, 1, 1, "", "partial_tucker"], [55, 1, 1, "", "robust_pca"], [56, 1, 1, "", "symmetric_parafac_power_iteration"], [57, 1, 1, "", "tucker"]], "tensorly.cp_tensor": [[59, 1, 1, "", "cp_mode_dot"], [60, 1, 1, "", "cp_norm"], [61, 1, 1, "", "cp_normalize"], [62, 1, 1, "", "cp_permute_factors"], [63, 1, 1, "", "cp_to_tensor"], [64, 1, 1, "", "cp_to_unfolded"], [65, 1, 1, "", "cp_to_vec"]], "tensorly.datasets": [[66, 1, 1, "", "fetch_indian_pines"], [67, 1, 1, "", "fetch_kinetic"], [68, 1, 1, "", "load_IL2data"], [69, 1, 1, "", "load_covid19_serology"]], "tensorly.datasets.synthetic": [[70, 1, 1, "", "gen_image"]], "tensorly.decomposition": [[71, 2, 1, "", "CP"], [72, 2, 1, "", "CPPower"], [73, 2, 1, "", "CP_NN_HALS"], [74, 2, 1, "", "ConstrainedCP"], [75, 2, 1, "", "Parafac2"], [76, 2, 1, "", "RandomizedCP"], [77, 2, 1, "", "SymmetricCP"], [78, 2, 1, "", "TensorRing"], [79, 2, 1, "", "TensorTrain"], [80, 2, 1, "", "TensorTrainMatrix"], [81, 2, 1, "", "Tucker"], [82, 1, 1, "", "constrained_parafac"], [83, 1, 1, "", "non_negative_parafac"], [84, 1, 1, "", "non_negative_parafac_hals"], [85, 1, 1, "", "non_negative_tucker"], [86, 1, 1, "", "non_negative_tucker_hals"], [87, 1, 1, "", "parafac"], [29, 1, 1, "", "parafac2"], [88, 1, 1, "", "parafac_power_iteration"], [89, 1, 1, "", "partial_tucker"], [90, 1, 1, "", "power_iteration"], [91, 1, 1, "", "randomised_parafac"], [92, 1, 1, "", "robust_pca"], [93, 1, 1, "", "sample_khatri_rao"], [94, 1, 1, "", "symmetric_parafac_power_iteration"], [95, 1, 1, "", "symmetric_power_iteration"], [96, 1, 1, "", "tensor_ring"], [97, 1, 1, "", "tensor_train"], [98, 1, 1, "", "tensor_train_matrix"], [184, 1, 1, "", "tucker"]], "tensorly.decomposition.CP": [[71, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CPPower": [[72, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CP_NN_HALS": [[73, 3, 1, "", "fit_transform"]], "tensorly.decomposition.ConstrainedCP": [[74, 3, 1, "", "fit_transform"]], "tensorly.decomposition.Parafac2": [[75, 3, 1, "", "fit_transform"]], "tensorly.metrics": [[113, 1, 1, "", "correlation_index"]], "tensorly.metrics.factors": [[114, 1, 1, "", "congruence_coefficient"]], "tensorly.metrics.regression": [[115, 1, 1, "", "MSE"], [116, 1, 1, "", "RMSE"]], "tensorly.parafac2_tensor": [[122, 1, 1, "", "parafac2_to_slice"], [123, 1, 1, "", "parafac2_to_slices"], [124, 1, 1, "", "parafac2_to_tensor"], [125, 1, 1, "", "parafac2_to_unfolded"], [126, 1, 1, "", "parafac2_to_vec"]], "tensorly.plugins": [[127, 1, 1, "", "use_cuquantum"], [128, 1, 1, "", "use_default_einsum"], [129, 1, 1, "", "use_opt_einsum"]], "tensorly.random": [[132, 1, 1, "", "random_cp"], [133, 1, 1, "", "random_parafac2"], [134, 1, 1, "", "random_tt"], [135, 1, 1, "", "random_tt_matrix"], [136, 1, 1, "", "random_tucker"]], "tensorly.regression": [[137, 2, 1, "", "CP_PLSR"]], "tensorly.regression.CP_PLSR": [[137, 3, 1, "", "fit"], [137, 3, 1, "", "fit_transform"], [137, 3, 1, "", "get_params"], [137, 3, 1, "", "predict"], [137, 3, 1, "", "set_params"], [137, 3, 1, "", "transform"]], "tensorly.regression.cp_regression": [[138, 2, 1, "", "CPRegressor"]], "tensorly.regression.cp_regression.CPRegressor": [[138, 3, 1, "", "fit"], [138, 3, 1, "", "get_params"], [138, 3, 1, "", "predict"], [138, 3, 1, "", "set_params"]], "tensorly.regression.tucker_regression": [[139, 2, 1, "", "TuckerRegressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[139, 3, 1, "", "fit"], [139, 3, 1, "", "get_params"], [139, 3, 1, "", "predict"], [139, 3, 1, "", "set_params"]], "tensorly.tenalg": [[149, 1, 1, "", "backend_context"], [150, 1, 1, "", "batched_outer"], [151, 1, 1, "", "get_backend"], [152, 1, 1, "", "higher_order_moment"], [153, 1, 1, "", "inner"], [154, 1, 1, "", "khatri_rao"], [155, 1, 1, "", "kronecker"], [156, 1, 1, "", "mode_dot"], [157, 1, 1, "", "multi_mode_dot"], [158, 1, 1, "", "outer"], [162, 1, 1, "", "set_backend"], [163, 1, 1, "", "svd_interface"], [164, 1, 1, "", "tensordot"], [165, 1, 1, "", "unfolding_dot_khatri_rao"]], "tensorly.tenalg.proximal": [[159, 1, 1, "", "procrustes"], [160, 1, 1, "", "soft_thresholding"], [161, 1, 1, "", "svd_thresholding"]], "tensorly.tt_matrix": [[170, 1, 1, "", "tt_matrix_to_tensor"], [171, 1, 1, "", "tt_matrix_to_unfolded"], [172, 1, 1, "", "tt_matrix_to_vec"]], "tensorly.tt_tensor": [[173, 1, 1, "", "pad_tt_rank"], [174, 1, 1, "", "tt_to_tensor"], [175, 1, 1, "", "tt_to_unfolded"], [176, 1, 1, "", "tt_to_vec"]], "tensorly.tucker_tensor": [[177, 1, 1, "", "tucker_mode_dot"], [178, 1, 1, "", "tucker_to_tensor"], [179, 1, 1, "", "tucker_to_unfolded"], [180, 1, 1, "", "tucker_to_vec"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"about": 0, "u": 0, "origin": 0, "core": [0, 28], "develop": [0, 24], "support": 0, "practic": [1, 14, 22], "applic": [1, 14], "tensor": [1, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 28, 78, 166, 185, 187, 189, 190, 191], "method": [1, 14], "non": [2, 9, 10], "neg": [2, 9, 10], "parafac": [2, 7, 9, 53, 87, 190], "decomposit": [2, 3, 4, 6, 8, 9, 10, 14, 28, 29, 49, 50, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 184, 187, 190], "il": 2, "2": 2, "respons": 2, "data": 2, "covid": 3, "19": 3, "serologi": 3, "dataset": [3, 28, 66, 67, 68, 69, 70, 187], "analysi": 3, "cp": [3, 8, 9, 12, 17, 28, 71, 190], "introduct": [3, 8, 9, 10, 12], "appli": 3, "thi": 3, "tensorli": [3, 8, 9, 10, 14, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187], "inspect": [3, 11], "biolog": 3, "insight": 3, "from": 3, "compon": [3, 11], "refer": [3, 8, 9, 10, 11, 23, 28, 189, 190, 191], "imag": 4, "compress": 4, "via": 4, "comput": [5, 11, 13, 19, 20], "time": [5, 13, 19, 20], "us": [7, 8], "line": 7, "search": 7, "constrain": 8, "0": [8, 9, 10], "7": 8, "one": 8, "constraint": 8, "all": [8, 31], "mode": 8, "some": 8, "differ": 8, "scalar": 8, "input": 8, "each": 8, "6": [9, 10], "creat": [9, 10, 11, 12, 189], "synthet": [9, 10, 11, 12, 70], "hal": [9, 10], "exact": 9, "comparison": [9, 10], "tucker": [10, 18, 28, 57, 81, 184, 190], "fista": 10, "activ": 10, "set": [10, 28, 191], "demonstr": 11, "parafac2": [11, 28, 29, 75], "fit": 11, "perform": [11, 28], "metric": [11, 28, 113, 114, 115, 116, 187], "visual": 11, "converg": 11, "rate": 11, "permut": 12, "factor": [12, 114], "target": 12, "cptensor": 12, "galleri": 14, "exampl": [14, 23, 188], "content": 14, "gener": 14, "regress": [14, 16, 17, 18, 28, 115, 116, 137, 138, 139, 187, 191], "basic": [15, 185, 189], "oper": [15, 28], "backend": [21, 22, 28, 185, 187, 188], "system": [21, 185], "how": [21, 22, 185], "work": [21, 22], "The": 21, "class": [21, 22, 28], "load": 21, "function": [21, 23, 28, 185], "": [21, 185], "dispatch": 21, "contribut": 22, "guidelin": 22, "compat": 22, "In": 22, "context": [22, 28, 48, 185], "index": [22, 28, 105], "assign": [22, 28], "numpi": [22, 28], "style": [22, 28], "test": [22, 27], "interfac": [22, 28], "wrapper": 22, "write": 23, "document": [23, 27], "docstr": 23, "modul": 23, "titl": 23, "guid": [24, 186], "instal": 27, "pre": 27, "requisit": 27, "pip": 27, "recommend": 27, "conda": 27, "clone": 27, "github": 27, "repositori": 27, "run": 27, "compil": 27, "why": [27, 185, 188], "python": 27, "3": 27, "api": 28, "unifi": 28, "avail": 28, "arrai": 28, "creation": 28, "manipul": [28, 187], "algebra": [28, 187], "base": [28, 36, 37, 38, 39, 40, 41, 42, 43], "form": [28, 190], "cp_tensor": [28, 59, 60, 61, 62, 63, 64, 65], "tucker_tensor": [28, 177, 178, 179, 180], "tt": 28, "mp": 28, "tt_tensor": [28, 173, 174, 175, 176], "matric": 28, "tt_matrix": [28, 170, 171, 172], "parafac2_tensor": [28, 122, 123, 124, 125, 126], "tenalg": [28, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], "measur": 28, "sampl": [28, 187], "random": [28, 132, 133, 134, 135, 136, 187], "plugin": [28, 127, 128, 129], "experiment": [28, 187], "featur": [28, 187], "contrib": [28, 49, 50, 51, 52, 53, 54, 55, 56, 57], "spars": [28, 51, 52, 53, 54, 55, 56, 57, 188], "ab": 30, "arang": 32, "argmax": 33, "argmin": 34, "backend_context": [35, 149], "fold": [36, 189], "partial_fold": 37, "partial_tensor_to_vec": 38, "partial_unfold": 39, "partial_vec_to_tensor": 40, "tensor_to_vec": 41, "unfold": [42, 189], "vec_to_tensor": 43, "check_random_st": 44, "clip": 45, "concaten": 46, "conj": 47, "tensor_train_oi": 49, "tensor_train_cross": 50, "non_negative_parafac": [51, 83], "non_negative_tuck": [52, 85], "partial_tuck": [54, 89], "robust_pca": [55, 92], "symmetric_parafac_power_iter": [56, 94], "copi": 58, "cp_mode_dot": 59, "cp_norm": 60, "cp_normal": 61, "cp_permute_factor": 62, "cp_to_tensor": 63, "cp_to_unfold": 64, "cp_to_vec": 65, "fetch_indian_pin": 66, "fetch_kinet": 67, "load_il2data": 68, "load_covid19_serologi": 69, "gen_imag": 70, "cppower": 72, "cp_nn_hal": 73, "constrainedcp": 74, "randomizedcp": 76, "symmetriccp": 77, "tensortrain": 79, "tensortrainmatrix": 80, "constrained_parafac": 82, "non_negative_parafac_h": 84, "non_negative_tucker_h": 86, "parafac_power_iter": 88, "power_iter": 90, "randomised_parafac": 91, "sample_khatri_rao": 93, "symmetric_power_iter": 95, "tensor_r": 96, "tensor_train": 97, "tensor_train_matrix": 98, "diag": 99, "dot": 100, "ep": 101, "ey": 102, "finfo": 103, "get_backend": [104, 151], "index_upd": 106, "is_tensor": 107, "kr": 108, "kron": 109, "matmul": 110, "max": 111, "mean": 112, "correlation_index": 113, "congruence_coeffici": 114, "mse": 115, "rmse": 116, "min": 117, "moveaxi": 118, "ndim": 119, "norm": 120, "ones": 121, "parafac2_to_slic": [122, 123], "parafac2_to_tensor": 124, "parafac2_to_unfold": 125, "parafac2_to_vec": 126, "use_cuquantum": 127, "use_default_einsum": 128, "use_opt_einsum": 129, "prod": 130, "qr": 131, "random_cp": 132, "random_parafac2": 133, "random_tt": 134, "random_tt_matrix": 135, "random_tuck": 136, "cp_plsr": 137, "cp_regress": 138, "cpregressor": 138, "tucker_regress": 139, "tuckerregressor": 139, "reshap": 140, "set_backend": [141, 162], "shape": 142, "sign": 143, "solv": 144, "sort": 145, "sqrt": 146, "stack": 147, "sum": 148, "batched_out": 150, "higher_order_mo": 152, "inner": 153, "khatri_rao": 154, "kroneck": 155, "mode_dot": 156, "multi_mode_dot": 157, "outer": 158, "proxim": [159, 160, 161], "procrust": 159, "soft_threshold": 160, "svd_threshold": 161, "svd_interfac": 163, "tensordot": [164, 167], "unfolding_dot_khatri_rao": 165, "to_numpi": 168, "transpos": 169, "tt_matrix_to_tensor": 170, "tt_matrix_to_unfold": 171, "tt_matrix_to_vec": 172, "pad_tt_rank": 173, "tt_to_tensor": 174, "tt_to_unfold": 175, "tt_to_vec": 176, "tucker_mode_dot": 177, "tucker_to_tensor": 178, "tucker_to_unfold": 179, "tucker_to_vec": 180, "where": 181, "zero": 182, "zeros_lik": 183, "do": 185, "i": 185, "chang": 185, "case": 185, "studi": 185, "pytorch": 185, "On": 185, "cpu": 185, "gpu": 185, "user": 186, "quick": 187, "start": 187, "organ": 187, "separ": 188, "algorithm": 188, "usag": 188, "miss": 188, "valu": 188, "candecomp": 190, "matrix": 190, "product": 190, "state": 190, "train": 190, "implement": 190}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "Origin": [[0, "origin"]], "Core developers": [[0, "core-developers"]], "Supporters": [[0, "supporters"]], "Practical applications of tensor methods": [[1, "practical-applications-of-tensor-methods"], [14, "practical-applications-of-tensor-methods"]], "Non-negative PARAFAC Decomposition of IL-2 Response Data": [[2, "non-negative-parafac-decomposition-of-il-2-response-data"]], "COVID-19 Serology Dataset Analysis with CP": [[3, "covid-19-serology-dataset-analysis-with-cp"]], "Introduction": [[3, "introduction"], [8, "introduction"], [9, "introduction"], [10, "introduction"], [12, "introduction"]], "Apply CP decomposition to this dataset with Tensorly": [[3, "apply-cp-decomposition-to-this-dataset-with-tensorly"]], "Inspect the biological insights from CP components": [[3, "inspect-the-biological-insights-from-cp-components"]], "References": [[3, "references"], [8, "references"], [9, "references"], [10, "references"], [11, "references"], [189, "references"], [190, "references"], [191, "references"]], "Image compression via tensor decomposition": [[4, "image-compression-via-tensor-decomposition"]], "Computation times": [[5, "computation-times"], [13, "computation-times"], [19, "computation-times"], [20, "computation-times"]], "Tensor decomposition": [[6, "tensor-decomposition"], [14, "tensor-decomposition"], [187, "tensor-decomposition"], [190, "tensor-decomposition"]], "Using line search with PARAFAC": [[7, "using-line-search-with-parafac"]], "Constrained CP decomposition in Tensorly >=0.7": [[8, "constrained-cp-decomposition-in-tensorly-0-7"]], "Using one constraint for all modes": [[8, "using-one-constraint-for-all-modes"]], "Using one constraint for some modes": [[8, "using-one-constraint-for-some-modes"]], "Using a constraint with the different scalar inputs for each mode": [[8, "using-a-constraint-with-the-different-scalar-inputs-for-each-mode"]], "Using different constraints for each mode": [[8, "using-different-constraints-for-each-mode"]], "Non-negative CP decomposition in Tensorly >=0.6": [[9, "non-negative-cp-decomposition-in-tensorly-0-6"]], "Create synthetic tensor": [[9, "create-synthetic-tensor"], [10, "create-synthetic-tensor"], [11, "create-synthetic-tensor"], [12, "create-synthetic-tensor"]], "Non-negative Parafac": [[9, "non-negative-parafac"]], "Non-negative Parafac with HALS": [[9, "non-negative-parafac-with-hals"]], "Non-negative Parafac with Exact HALS": [[9, "non-negative-parafac-with-exact-hals"]], "Comparison": [[9, "comparison"], [10, "comparison"]], "Non-negative Tucker decomposition in Tensorly >=0.6": [[10, "non-negative-tucker-decomposition-in-tensorly-0-6"]], "Non-negative Tucker": [[10, "non-negative-tucker"]], "Non-negative Tucker with HALS and FISTA": [[10, "non-negative-tucker-with-hals-and-fista"]], "Non-negative Tucker with HALS and Active Set": [[10, "non-negative-tucker-with-hals-and-active-set"]], "Demonstration of PARAFAC2": [[11, "demonstration-of-parafac2"]], "Fit a PARAFAC2 tensor": [[11, "fit-a-parafac2-tensor"]], "Compute performance metrics": [[11, "compute-performance-metrics"]], "Visualize the components": [[11, "visualize-the-components"]], "Inspect the convergence rate": [[11, "inspect-the-convergence-rate"]], "Permuting CP factors": [[12, "permuting-cp-factors"]], "Permute target CPTensors": [[12, "permute-target-cptensors"]], "Gallery of examples": [[14, "gallery-of-examples"]], "Contents": [[14, "contents"]], "General examples": [[14, "general-examples"]], "Tensor regression with tensorly": [[14, "tensor-regression-with-tensorly"], [16, "tensor-regression-with-tensorly"]], "Basic tensor operations": [[15, "basic-tensor-operations"]], "CP tensor regression": [[17, "cp-tensor-regression"]], "Tucker tensor regression": [[18, "tucker-tensor-regression"]], "Backend System": [[21, "backend-system"]], "How the Backend System Works": [[21, "how-the-backend-system-works"]], "The Backend class": [[21, "the-backend-class"]], "Loading a backend": [[21, "loading-a-backend"]], "Backend function\u2019s dispatching": [[21, "backend-function-s-dispatching"]], "Contributing": [[22, "contributing"]], "How-to": [[22, "how-to"]], "Guidelines": [[22, "guidelines"]], "Backend compatibility": [[22, "backend-compatibility"]], "In practice": [[22, "in-practice"]], "Context of a tensor": [[22, "context-of-a-tensor"], [28, "context-of-a-tensor"], [185, "context-of-a-tensor"]], "Index assignment (\u201cNumPy style\u201d)": [[22, "index-assignment-numpy-style"]], "Testing the class interface": [[22, "testing-the-class-interface"]], "How the class wrapper test works": [[22, "how-the-class-wrapper-test-works"]], "Writing documentation": [[23, "writing-documentation"]], "Docstrings": [[23, "docstrings"]], "Refer to functions or modules": [[23, "refer-to-functions-or-modules"]], "Titles": [[23, "titles"]], "Examples": [[23, "examples"]], "Development guide": [[24, "development-guide"]], "Installing tensorly": [[27, "installing-tensorly"]], "Pre-requisite": [[27, "pre-requisite"]], "Installing with pip (recommended)": [[27, "installing-with-pip-recommended"]], "Installing with Conda": [[27, "installing-with-conda"]], "Cloning the github repository": [[27, "cloning-the-github-repository"]], "Running the tests": [[27, "running-the-tests"]], "Compiling the documentation": [[27, "compiling-the-documentation"]], "Why Python 3?": [[27, "why-python-3"]], "API reference": [[28, "api-reference"]], "Unified backend interface (tensorly)": [[28, "unified-backend-interface-tensorly"]], "Setting the backend": [[28, "setting-the-backend"]], "Index assignement (\u201cNumPy style\u201d)": [[28, "index-assignement-numpy-style"]], "Available backend functions": [[28, "available-backend-functions"]], "Array creation": [[28, "array-creation"]], "Array manipulation": [[28, "array-manipulation"]], "Algebraic operations": [[28, "algebraic-operations"]], "Core functions (tensorly.base)": [[28, "module-tensorly.base"]], "Tensors in CP form (tensorly.cp_tensor)": [[28, "module-tensorly.cp_tensor"]], "Tensors in Tucker form (tensorly.tucker_tensor)": [[28, "tensors-in-tucker-form-tensorly-tucker-tensor"]], "Tensors in TT (MPS) form (tensorly.tt_tensor)": [[28, "module-tensorly.tt_tensor"]], "Matrices in TT form (tensorly.tt_matrix)": [[28, "module-tensorly.tt_matrix"]], "Tensors in PARAFAC2 form (tensorly.parafac2_tensor)": [[28, "module-tensorly.parafac2_tensor"]], "Tensor Algebra (tensorly.tenalg)": [[28, "tensor-algebra-tensorly-tenalg"]], "Available functions": [[28, "available-functions"]], "Tensor Algebra Backend": [[28, "tensor-algebra-backend"]], "Tensor Decomposition (tensorly.decomposition)": [[28, "module-tensorly.decomposition"]], "Classes": [[28, "classes"]], "Functions": [[28, "functions"]], "Tensor Regression (tensorly.regression)": [[28, "module-tensorly.regression"]], "Performance measures (tensorly.metrics)": [[28, "module-tensorly.metrics"]], "Sampling tensors (tensorly.random)": [[28, "module-tensorly.random"]], "Datasets (tensorly.datasets)": [[28, "module-tensorly.datasets"]], "Plugin functionalities (tensorly.plugins)": [[28, "plugin-functionalities-tensorly-plugins"]], "Experimental features (tensorly.contrib)": [[28, "module-tensorly.contrib"]], "Sparse tensors": [[28, "sparse-tensors"]], "tensorly.decomposition.parafac2": [[29, "tensorly-decomposition-parafac2"]], "tensorly.abs": [[30, "tensorly-abs"]], "tensorly.all": [[31, "tensorly-all"]], "tensorly.arange": [[32, "tensorly-arange"]], "tensorly.argmax": [[33, "tensorly-argmax"]], "tensorly.argmin": [[34, "tensorly-argmin"]], "tensorly.backend_context": [[35, "tensorly-backend-context"]], "tensorly.base.fold": [[36, "tensorly-base-fold"]], "tensorly.base.partial_fold": [[37, "tensorly-base-partial-fold"]], "tensorly.base.partial_tensor_to_vec": [[38, "tensorly-base-partial-tensor-to-vec"]], "tensorly.base.partial_unfold": [[39, "tensorly-base-partial-unfold"]], "tensorly.base.partial_vec_to_tensor": [[40, "tensorly-base-partial-vec-to-tensor"]], "tensorly.base.tensor_to_vec": [[41, "tensorly-base-tensor-to-vec"]], "tensorly.base.unfold": [[42, "tensorly-base-unfold"]], "tensorly.base.vec_to_tensor": [[43, "tensorly-base-vec-to-tensor"]], "tensorly.check_random_state": [[44, "tensorly-check-random-state"]], "tensorly.clip": [[45, "tensorly-clip"]], "tensorly.concatenate": [[46, "tensorly-concatenate"]], "tensorly.conj": [[47, "tensorly-conj"]], "tensorly.context": [[48, "tensorly-context"]], "tensorly.contrib.decomposition.tensor_train_OI": [[49, "tensorly-contrib-decomposition-tensor-train-oi"]], "tensorly.contrib.decomposition.tensor_train_cross": [[50, "tensorly-contrib-decomposition-tensor-train-cross"]], "tensorly.contrib.sparse.decomposition.non_negative_parafac": [[51, "tensorly-contrib-sparse-decomposition-non-negative-parafac"]], "tensorly.contrib.sparse.decomposition.non_negative_tucker": [[52, "tensorly-contrib-sparse-decomposition-non-negative-tucker"]], "tensorly.contrib.sparse.decomposition.parafac": [[53, "tensorly-contrib-sparse-decomposition-parafac"]], "tensorly.contrib.sparse.decomposition.partial_tucker": [[54, "tensorly-contrib-sparse-decomposition-partial-tucker"]], "tensorly.contrib.sparse.decomposition.robust_pca": [[55, "tensorly-contrib-sparse-decomposition-robust-pca"]], "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration": [[56, "tensorly-contrib-sparse-decomposition-symmetric-parafac-power-iteration"]], "tensorly.contrib.sparse.decomposition.tucker": [[57, "tensorly-contrib-sparse-decomposition-tucker"]], "tensorly.copy": [[58, "tensorly-copy"]], "tensorly.cp_tensor.cp_mode_dot": [[59, "tensorly-cp-tensor-cp-mode-dot"]], "tensorly.cp_tensor.cp_norm": [[60, "tensorly-cp-tensor-cp-norm"]], "tensorly.cp_tensor.cp_normalize": [[61, "tensorly-cp-tensor-cp-normalize"]], "tensorly.cp_tensor.cp_permute_factors": [[62, "tensorly-cp-tensor-cp-permute-factors"]], "tensorly.cp_tensor.cp_to_tensor": [[63, "tensorly-cp-tensor-cp-to-tensor"]], "tensorly.cp_tensor.cp_to_unfolded": [[64, "tensorly-cp-tensor-cp-to-unfolded"]], "tensorly.cp_tensor.cp_to_vec": [[65, "tensorly-cp-tensor-cp-to-vec"]], "tensorly.datasets.fetch_indian_pines": [[66, "tensorly-datasets-fetch-indian-pines"]], "tensorly.datasets.fetch_kinetic": [[67, "tensorly-datasets-fetch-kinetic"]], "tensorly.datasets.load_IL2data": [[68, "tensorly-datasets-load-il2data"]], "tensorly.datasets.load_covid19_serology": [[69, "tensorly-datasets-load-covid19-serology"]], "tensorly.datasets.synthetic.gen_image": [[70, "tensorly-datasets-synthetic-gen-image"]], "tensorly.decomposition.CP": [[71, "tensorly-decomposition-cp"]], "tensorly.decomposition.CPPower": [[72, "tensorly-decomposition-cppower"]], "tensorly.decomposition.CP_NN_HALS": [[73, "tensorly-decomposition-cp-nn-hals"]], "tensorly.decomposition.ConstrainedCP": [[74, "tensorly-decomposition-constrainedcp"]], "tensorly.decomposition.Parafac2": [[75, "tensorly-decomposition-parafac2"]], "tensorly.decomposition.RandomizedCP": [[76, "tensorly-decomposition-randomizedcp"]], "tensorly.decomposition.SymmetricCP": [[77, "tensorly-decomposition-symmetriccp"]], "tensorly.decomposition.TensorRing": [[78, "tensorly-decomposition-tensorring"]], "tensorly.decomposition.TensorTrain": [[79, "tensorly-decomposition-tensortrain"]], "tensorly.decomposition.TensorTrainMatrix": [[80, "tensorly-decomposition-tensortrainmatrix"]], "tensorly.decomposition.Tucker": [[81, "tensorly-decomposition-tucker"]], "tensorly.decomposition.constrained_parafac": [[82, "tensorly-decomposition-constrained-parafac"]], "tensorly.decomposition.non_negative_parafac": [[83, "tensorly-decomposition-non-negative-parafac"]], "tensorly.decomposition.non_negative_parafac_hals": [[84, "tensorly-decomposition-non-negative-parafac-hals"]], "tensorly.decomposition.non_negative_tucker": [[85, "tensorly-decomposition-non-negative-tucker"]], "tensorly.decomposition.non_negative_tucker_hals": [[86, "tensorly-decomposition-non-negative-tucker-hals"]], "tensorly.decomposition.parafac": [[87, "tensorly-decomposition-parafac"]], "tensorly.decomposition.parafac_power_iteration": [[88, "tensorly-decomposition-parafac-power-iteration"]], "tensorly.decomposition.partial_tucker": [[89, "tensorly-decomposition-partial-tucker"]], "tensorly.decomposition.power_iteration": [[90, "tensorly-decomposition-power-iteration"]], "tensorly.decomposition.randomised_parafac": [[91, "tensorly-decomposition-randomised-parafac"]], "tensorly.decomposition.robust_pca": [[92, "tensorly-decomposition-robust-pca"]], "tensorly.decomposition.sample_khatri_rao": [[93, "tensorly-decomposition-sample-khatri-rao"]], "tensorly.decomposition.symmetric_parafac_power_iteration": [[94, "tensorly-decomposition-symmetric-parafac-power-iteration"]], "tensorly.decomposition.symmetric_power_iteration": [[95, "tensorly-decomposition-symmetric-power-iteration"]], "tensorly.decomposition.tensor_ring": [[96, "tensorly-decomposition-tensor-ring"]], "tensorly.decomposition.tensor_train": [[97, "tensorly-decomposition-tensor-train"]], "tensorly.decomposition.tensor_train_matrix": [[98, "tensorly-decomposition-tensor-train-matrix"]], "tensorly.diag": [[99, "tensorly-diag"]], "tensorly.dot": [[100, "tensorly-dot"]], "tensorly.eps": [[101, "tensorly-eps"]], "tensorly.eye": [[102, "tensorly-eye"]], "tensorly.finfo": [[103, "tensorly-finfo"]], "tensorly.get_backend": [[104, "tensorly-get-backend"]], "tensorly.index": [[105, "tensorly-index"]], "tensorly.index_update": [[106, "tensorly-index-update"]], "tensorly.is_tensor": [[107, "tensorly-is-tensor"]], "tensorly.kr": [[108, "tensorly-kr"]], "tensorly.kron": [[109, "tensorly-kron"]], "tensorly.matmul": [[110, "tensorly-matmul"]], "tensorly.max": [[111, "tensorly-max"]], "tensorly.mean": [[112, "tensorly-mean"]], "tensorly.metrics.correlation_index": [[113, "tensorly-metrics-correlation-index"]], "tensorly.metrics.factors.congruence_coefficient": [[114, "tensorly-metrics-factors-congruence-coefficient"]], "tensorly.metrics.regression.MSE": [[115, "tensorly-metrics-regression-mse"]], "tensorly.metrics.regression.RMSE": [[116, "tensorly-metrics-regression-rmse"]], "tensorly.min": [[117, "tensorly-min"]], "tensorly.moveaxis": [[118, "tensorly-moveaxis"]], "tensorly.ndim": [[119, "tensorly-ndim"]], "tensorly.norm": [[120, "tensorly-norm"]], "tensorly.ones": [[121, "tensorly-ones"]], "tensorly.parafac2_tensor.parafac2_to_slice": [[122, "tensorly-parafac2-tensor-parafac2-to-slice"]], "tensorly.parafac2_tensor.parafac2_to_slices": [[123, "tensorly-parafac2-tensor-parafac2-to-slices"]], "tensorly.parafac2_tensor.parafac2_to_tensor": [[124, "tensorly-parafac2-tensor-parafac2-to-tensor"]], "tensorly.parafac2_tensor.parafac2_to_unfolded": [[125, "tensorly-parafac2-tensor-parafac2-to-unfolded"]], "tensorly.parafac2_tensor.parafac2_to_vec": [[126, "tensorly-parafac2-tensor-parafac2-to-vec"]], "tensorly.plugins.use_cuquantum": [[127, "tensorly-plugins-use-cuquantum"]], "tensorly.plugins.use_default_einsum": [[128, "tensorly-plugins-use-default-einsum"]], "tensorly.plugins.use_opt_einsum": [[129, "tensorly-plugins-use-opt-einsum"]], "tensorly.prod": [[130, "tensorly-prod"]], "tensorly.qr": [[131, "tensorly-qr"]], "tensorly.random.random_cp": [[132, "tensorly-random-random-cp"]], "tensorly.random.random_parafac2": [[133, "tensorly-random-random-parafac2"]], "tensorly.random.random_tt": [[134, "tensorly-random-random-tt"]], "tensorly.random.random_tt_matrix": [[135, "tensorly-random-random-tt-matrix"]], "tensorly.random.random_tucker": [[136, "tensorly-random-random-tucker"]], "tensorly.regression.CP_PLSR": [[137, "tensorly-regression-cp-plsr"]], "tensorly.regression.cp_regression.CPRegressor": [[138, "tensorly-regression-cp-regression-cpregressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[139, "tensorly-regression-tucker-regression-tuckerregressor"]], "tensorly.reshape": [[140, "tensorly-reshape"]], "tensorly.set_backend": [[141, "tensorly-set-backend"]], "tensorly.shape": [[142, "tensorly-shape"]], "tensorly.sign": [[143, "tensorly-sign"]], "tensorly.solve": [[144, "tensorly-solve"]], "tensorly.sort": [[145, "tensorly-sort"]], "tensorly.sqrt": [[146, "tensorly-sqrt"]], "tensorly.stack": [[147, "tensorly-stack"]], "tensorly.sum": [[148, "tensorly-sum"]], "tensorly.tenalg.backend_context": [[149, "tensorly-tenalg-backend-context"]], "tensorly.tenalg.batched_outer": [[150, "tensorly-tenalg-batched-outer"]], "tensorly.tenalg.get_backend": [[151, "tensorly-tenalg-get-backend"]], "tensorly.tenalg.higher_order_moment": [[152, "tensorly-tenalg-higher-order-moment"]], "tensorly.tenalg.inner": [[153, "tensorly-tenalg-inner"]], "tensorly.tenalg.khatri_rao": [[154, "tensorly-tenalg-khatri-rao"]], "tensorly.tenalg.kronecker": [[155, "tensorly-tenalg-kronecker"]], "tensorly.tenalg.mode_dot": [[156, "tensorly-tenalg-mode-dot"]], "tensorly.tenalg.multi_mode_dot": [[157, "tensorly-tenalg-multi-mode-dot"]], "tensorly.tenalg.outer": [[158, "tensorly-tenalg-outer"]], "tensorly.tenalg.proximal.procrustes": [[159, "tensorly-tenalg-proximal-procrustes"]], "tensorly.tenalg.proximal.soft_thresholding": [[160, "tensorly-tenalg-proximal-soft-thresholding"]], "tensorly.tenalg.proximal.svd_thresholding": [[161, "tensorly-tenalg-proximal-svd-thresholding"]], "tensorly.tenalg.set_backend": [[162, "tensorly-tenalg-set-backend"]], "tensorly.tenalg.svd_interface": [[163, "tensorly-tenalg-svd-interface"]], "tensorly.tenalg.tensordot": [[164, "tensorly-tenalg-tensordot"]], "tensorly.tenalg.unfolding_dot_khatri_rao": [[165, "tensorly-tenalg-unfolding-dot-khatri-rao"]], "tensorly.tensor": [[166, "tensorly-tensor"]], "tensorly.tensordot": [[167, "tensorly-tensordot"]], "tensorly.to_numpy": [[168, "tensorly-to-numpy"]], "tensorly.transpose": [[169, "tensorly-transpose"]], "tensorly.tt_matrix.tt_matrix_to_tensor": [[170, "tensorly-tt-matrix-tt-matrix-to-tensor"]], "tensorly.tt_matrix.tt_matrix_to_unfolded": [[171, "tensorly-tt-matrix-tt-matrix-to-unfolded"]], "tensorly.tt_matrix.tt_matrix_to_vec": [[172, "tensorly-tt-matrix-tt-matrix-to-vec"]], "tensorly.tt_tensor.pad_tt_rank": [[173, "tensorly-tt-tensor-pad-tt-rank"]], "tensorly.tt_tensor.tt_to_tensor": [[174, "tensorly-tt-tensor-tt-to-tensor"]], "tensorly.tt_tensor.tt_to_unfolded": [[175, "tensorly-tt-tensor-tt-to-unfolded"]], "tensorly.tt_tensor.tt_to_vec": [[176, "tensorly-tt-tensor-tt-to-vec"]], "tensorly.tucker_tensor.tucker_mode_dot": [[177, "tensorly-tucker-tensor-tucker-mode-dot"]], "tensorly.tucker_tensor.tucker_to_tensor": [[178, "tensorly-tucker-tensor-tucker-to-tensor"]], "tensorly.tucker_tensor.tucker_to_unfolded": [[179, "tensorly-tucker-tensor-tucker-to-unfolded"]], "tensorly.tucker_tensor.tucker_to_vec": [[180, "tensorly-tucker-tensor-tucker-to-vec"]], "tensorly.where": [[181, "tensorly-where"]], "tensorly.zeros": [[182, "tensorly-zeros"]], "tensorly.zeros_like": [[183, "tensorly-zeros-like"]], "tensorly.decomposition.tucker": [[184, "tensorly-decomposition-tucker"]], "TensorLy\u2019s backend system": [[185, "tensorly-s-backend-system"]], "Backend?": [[185, "backend"]], "Why backends?": [[185, "why-backends"]], "How do I change the backend?": [[185, "how-do-i-change-the-backend"]], "Basic functions": [[185, "basic-functions"]], "Case study: TensorLy and PyTorch": [[185, "case-study-tensorly-and-pytorch"]], "On CPU": [[185, "on-cpu"]], "On GPU": [[185, "on-gpu"]], "User guide": [[186, "user-guide"]], "Quick-Start": [[187, "quick-start"]], "Organization of TensorLy": [[187, "organization-of-tensorly"]], "TensorLy Backend": [[187, "tensorly-backend"]], "Tensor manipulation": [[187, "tensor-manipulation"]], "Tensor algebra": [[187, "tensor-algebra"]], "Tensor regressions": [[187, "tensor-regressions"]], "Metrics": [[187, "metrics"]], "Sampling random tensors": [[187, "sampling-random-tensors"]], "Experimental features": [[187, "experimental-features"]], "Datasets": [[187, "datasets"]], "Sparse Backend": [[188, "sparse-backend"]], "Why a separate sparse backend?": [[188, "why-a-separate-sparse-backend"]], "Algorithms": [[188, "algorithms"]], "Usage": [[188, "usage"]], "Missing Values": [[188, "missing-values"]], "Example": [[188, "example"]], "Tensor basics": [[189, "tensor-basics"]], "Creating a tensor": [[189, "creating-a-tensor"]], "Unfolding": [[189, "unfolding"]], "Folding": [[189, "folding"]], "CP form of a tensor": [[190, "cp-form-of-a-tensor"]], "CANDECOMP-PARAFAC decomposition": [[190, "candecomp-parafac-decomposition"]], "Tucker form of a tensor": [[190, "tucker-form-of-a-tensor"]], "Tucker decomposition": [[190, "tucker-decomposition"]], "Matrix-Product-State / Tensor-Train Decomposition": [[190, "matrix-product-state-tensor-train-decomposition"]], "Implementations": [[190, "implementations"]], "Tensor regression": [[191, "tensor-regression"]], "Setting": [[191, "setting"]]}, "indexentries": {"module": [[28, "module-tensorly"], [28, "module-tensorly.base"], [28, "module-tensorly.contrib"], [28, "module-tensorly.contrib.sparse"], [28, "module-tensorly.cp_tensor"], [28, "module-tensorly.datasets"], [28, "module-tensorly.decomposition"], [28, "module-tensorly.metrics"], [28, "module-tensorly.parafac2_tensor"], [28, "module-tensorly.plugins"], [28, "module-tensorly.random"], [28, "module-tensorly.regression"], [28, "module-tensorly.tenalg"], [28, "module-tensorly.tt_matrix"], [28, "module-tensorly.tt_tensor"], [28, "module-tensorly.tucker_tensor"]], "tensorly": [[28, "module-tensorly"]], "tensorly.base": [[28, "module-tensorly.base"]], "tensorly.contrib": [[28, "module-tensorly.contrib"]], "tensorly.contrib.sparse": [[28, "module-tensorly.contrib.sparse"]], "tensorly.cp_tensor": [[28, "module-tensorly.cp_tensor"]], "tensorly.datasets": [[28, "module-tensorly.datasets"]], "tensorly.decomposition": [[28, "module-tensorly.decomposition"]], "tensorly.metrics": [[28, "module-tensorly.metrics"]], "tensorly.parafac2_tensor": [[28, "module-tensorly.parafac2_tensor"]], "tensorly.plugins": [[28, "module-tensorly.plugins"]], "tensorly.random": [[28, "module-tensorly.random"]], "tensorly.regression": [[28, "module-tensorly.regression"]], "tensorly.tenalg": [[28, "module-tensorly.tenalg"]], "tensorly.tt_matrix": [[28, "module-tensorly.tt_matrix"]], "tensorly.tt_tensor": [[28, "module-tensorly.tt_tensor"]], "tensorly.tucker_tensor": [[28, "module-tensorly.tucker_tensor"]], "parafac2() (in module tensorly.decomposition)": [[29, "tensorly.decomposition.parafac2"]], "abs() (in module tensorly)": [[30, "tensorly.abs"]], "all() (in module tensorly)": [[31, "tensorly.all"]], "arange() (in module tensorly)": [[32, "tensorly.arange"]], "argmax() (in module tensorly)": [[33, "tensorly.argmax"]], "argmin() (in module tensorly)": [[34, "tensorly.argmin"]], "backend_context() (in module tensorly)": [[35, "tensorly.backend_context"]], "fold() (in module tensorly.base)": [[36, "tensorly.base.fold"]], "partial_fold() (in module tensorly.base)": [[37, "tensorly.base.partial_fold"]], "partial_tensor_to_vec() (in module tensorly.base)": [[38, "tensorly.base.partial_tensor_to_vec"]], "partial_unfold() (in module tensorly.base)": [[39, "tensorly.base.partial_unfold"]], "partial_vec_to_tensor() (in module tensorly.base)": [[40, "tensorly.base.partial_vec_to_tensor"]], "tensor_to_vec() (in module tensorly.base)": [[41, "tensorly.base.tensor_to_vec"]], "unfold() (in module tensorly.base)": [[42, "tensorly.base.unfold"]], "vec_to_tensor() (in module tensorly.base)": [[43, "tensorly.base.vec_to_tensor"]], "check_random_state() (in module tensorly)": [[44, "tensorly.check_random_state"]], "clip() (in module tensorly)": [[45, "tensorly.clip"]], "concatenate() (in module tensorly)": [[46, "tensorly.concatenate"]], "conj() (in module tensorly)": [[47, "tensorly.conj"]], "context() (in module tensorly)": [[48, "tensorly.context"]], "tensor_train_oi() (in module tensorly.contrib.decomposition)": [[49, "tensorly.contrib.decomposition.tensor_train_OI"]], "tensor_train_cross() (in module tensorly.contrib.decomposition)": [[50, "tensorly.contrib.decomposition.tensor_train_cross"]], "non_negative_parafac() (in module tensorly.contrib.sparse.decomposition)": [[51, "tensorly.contrib.sparse.decomposition.non_negative_parafac"]], "non_negative_tucker() (in module tensorly.contrib.sparse.decomposition)": [[52, "tensorly.contrib.sparse.decomposition.non_negative_tucker"]], "parafac() (in module tensorly.contrib.sparse.decomposition)": [[53, "tensorly.contrib.sparse.decomposition.parafac"]], "partial_tucker() (in module tensorly.contrib.sparse.decomposition)": [[54, "tensorly.contrib.sparse.decomposition.partial_tucker"]], "robust_pca() (in module tensorly.contrib.sparse.decomposition)": [[55, "tensorly.contrib.sparse.decomposition.robust_pca"]], "symmetric_parafac_power_iteration() (in module tensorly.contrib.sparse.decomposition)": [[56, "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration"]], "tucker() (in module tensorly.contrib.sparse.decomposition)": [[57, "tensorly.contrib.sparse.decomposition.tucker"]], "copy() (in module tensorly)": [[58, "tensorly.copy"]], "cp_mode_dot() (in module tensorly.cp_tensor)": [[59, "tensorly.cp_tensor.cp_mode_dot"]], "cp_norm() (in module tensorly.cp_tensor)": [[60, "tensorly.cp_tensor.cp_norm"]], "cp_normalize() (in module tensorly.cp_tensor)": [[61, "tensorly.cp_tensor.cp_normalize"]], "cp_permute_factors() (in module tensorly.cp_tensor)": [[62, "tensorly.cp_tensor.cp_permute_factors"]], "cp_to_tensor() (in module tensorly.cp_tensor)": [[63, "tensorly.cp_tensor.cp_to_tensor"]], "cp_to_unfolded() (in module tensorly.cp_tensor)": [[64, "tensorly.cp_tensor.cp_to_unfolded"]], "cp_to_vec() (in module tensorly.cp_tensor)": [[65, "tensorly.cp_tensor.cp_to_vec"]], "fetch_indian_pines() (in module tensorly.datasets)": [[66, "tensorly.datasets.fetch_indian_pines"]], "fetch_kinetic() (in module tensorly.datasets)": [[67, "tensorly.datasets.fetch_kinetic"]], "load_il2data() (in module tensorly.datasets)": [[68, "tensorly.datasets.load_IL2data"]], "load_covid19_serology() (in module tensorly.datasets)": [[69, "tensorly.datasets.load_covid19_serology"]], "gen_image() (in module tensorly.datasets.synthetic)": [[70, "tensorly.datasets.synthetic.gen_image"]], "cp (class in tensorly.decomposition)": [[71, "tensorly.decomposition.CP"]], "fit_transform() (cp method)": [[71, "tensorly.decomposition.CP.fit_transform"]], "cppower (class in tensorly.decomposition)": [[72, "tensorly.decomposition.CPPower"]], "fit_transform() (cppower method)": [[72, "tensorly.decomposition.CPPower.fit_transform"]], "cp_nn_hals (class in tensorly.decomposition)": [[73, "tensorly.decomposition.CP_NN_HALS"]], "fit_transform() (cp_nn_hals method)": [[73, "tensorly.decomposition.CP_NN_HALS.fit_transform"]], "constrainedcp (class in tensorly.decomposition)": [[74, "tensorly.decomposition.ConstrainedCP"]], "fit_transform() (constrainedcp method)": [[74, "tensorly.decomposition.ConstrainedCP.fit_transform"]], "parafac2 (class in tensorly.decomposition)": [[75, "tensorly.decomposition.Parafac2"]], "fit_transform() (parafac2 method)": [[75, "tensorly.decomposition.Parafac2.fit_transform"]], "randomizedcp (class in tensorly.decomposition)": [[76, "tensorly.decomposition.RandomizedCP"]], "symmetriccp (class in tensorly.decomposition)": [[77, "tensorly.decomposition.SymmetricCP"]], "tensorring (class in tensorly.decomposition)": [[78, "tensorly.decomposition.TensorRing"]], "tensortrain (class in tensorly.decomposition)": [[79, "tensorly.decomposition.TensorTrain"]], "tensortrainmatrix (class in tensorly.decomposition)": [[80, "tensorly.decomposition.TensorTrainMatrix"]], "tucker (class in tensorly.decomposition)": [[81, "tensorly.decomposition.Tucker"]], "constrained_parafac() (in module tensorly.decomposition)": [[82, "tensorly.decomposition.constrained_parafac"]], "non_negative_parafac() (in module tensorly.decomposition)": [[83, "tensorly.decomposition.non_negative_parafac"]], "non_negative_parafac_hals() (in module tensorly.decomposition)": [[84, "tensorly.decomposition.non_negative_parafac_hals"]], "non_negative_tucker() (in module tensorly.decomposition)": [[85, "tensorly.decomposition.non_negative_tucker"]], "non_negative_tucker_hals() (in module tensorly.decomposition)": [[86, "tensorly.decomposition.non_negative_tucker_hals"]], "parafac() (in module tensorly.decomposition)": [[87, "tensorly.decomposition.parafac"]], "parafac_power_iteration() (in module tensorly.decomposition)": [[88, "tensorly.decomposition.parafac_power_iteration"]], "partial_tucker() (in module tensorly.decomposition)": [[89, "tensorly.decomposition.partial_tucker"]], "power_iteration() (in module tensorly.decomposition)": [[90, "tensorly.decomposition.power_iteration"]], "randomised_parafac() (in module tensorly.decomposition)": [[91, "tensorly.decomposition.randomised_parafac"]], "robust_pca() (in module tensorly.decomposition)": [[92, "tensorly.decomposition.robust_pca"]], "sample_khatri_rao() (in module tensorly.decomposition)": [[93, "tensorly.decomposition.sample_khatri_rao"]], "symmetric_parafac_power_iteration() (in module tensorly.decomposition)": [[94, "tensorly.decomposition.symmetric_parafac_power_iteration"]], "symmetric_power_iteration() (in module tensorly.decomposition)": [[95, "tensorly.decomposition.symmetric_power_iteration"]], "tensor_ring() (in module tensorly.decomposition)": [[96, "tensorly.decomposition.tensor_ring"]], "tensor_train() (in module tensorly.decomposition)": [[97, "tensorly.decomposition.tensor_train"]], "tensor_train_matrix() (in module tensorly.decomposition)": [[98, "tensorly.decomposition.tensor_train_matrix"]], "diag() (in module tensorly)": [[99, "tensorly.diag"]], "dot() (in module tensorly)": [[100, "tensorly.dot"]], "eps() (in module tensorly)": [[101, "tensorly.eps"]], "eye() (in module tensorly)": [[102, "tensorly.eye"]], "finfo() (in module tensorly)": [[103, "tensorly.finfo"]], "get_backend() (in module tensorly)": [[104, "tensorly.get_backend"]], "index() (in module tensorly)": [[105, "tensorly.index"]], "index_update() (in module tensorly)": [[106, "tensorly.index_update"]], "is_tensor() (in module tensorly)": [[107, "tensorly.is_tensor"]], "kr() (in module tensorly)": [[108, "tensorly.kr"]], "kron() (in module tensorly)": [[109, "tensorly.kron"]], "pep 465": [[110, "index-0"]], "python enhancement proposals": [[110, "index-0"]], "matmul() (in module tensorly)": [[110, "tensorly.matmul"]], "max() (in module tensorly)": [[111, "tensorly.max"]], "mean() (in module tensorly)": [[112, "tensorly.mean"]], "correlation_index() (in module tensorly.metrics)": [[113, "tensorly.metrics.correlation_index"]], "congruence_coefficient() (in module tensorly.metrics.factors)": [[114, "tensorly.metrics.factors.congruence_coefficient"]], "mse() (in module tensorly.metrics.regression)": [[115, "tensorly.metrics.regression.MSE"]], "rmse() (in module tensorly.metrics.regression)": [[116, "tensorly.metrics.regression.RMSE"]], "min() (in module tensorly)": [[117, "tensorly.min"]], "moveaxis() (in module tensorly)": [[118, "tensorly.moveaxis"]], "ndim() (in module tensorly)": [[119, "tensorly.ndim"]], "norm() (in module tensorly)": [[120, "tensorly.norm"]], "ones() (in module tensorly)": [[121, "tensorly.ones"]], "parafac2_to_slice() (in module tensorly.parafac2_tensor)": [[122, "tensorly.parafac2_tensor.parafac2_to_slice"]], "parafac2_to_slices() (in module tensorly.parafac2_tensor)": [[123, "tensorly.parafac2_tensor.parafac2_to_slices"]], "parafac2_to_tensor() (in module tensorly.parafac2_tensor)": [[124, "tensorly.parafac2_tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (in module tensorly.parafac2_tensor)": [[125, "tensorly.parafac2_tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (in module tensorly.parafac2_tensor)": [[126, "tensorly.parafac2_tensor.parafac2_to_vec"]], "use_cuquantum() (in module tensorly.plugins)": [[127, "tensorly.plugins.use_cuquantum"]], "use_default_einsum() (in module tensorly.plugins)": [[128, "tensorly.plugins.use_default_einsum"]], "use_opt_einsum() (in module tensorly.plugins)": [[129, "tensorly.plugins.use_opt_einsum"]], "prod() (in module tensorly)": [[130, "tensorly.prod"]], "qr() (in module tensorly)": [[131, "tensorly.qr"]], "random_cp() (in module tensorly.random)": [[132, "tensorly.random.random_cp"]], "random_parafac2() (in module tensorly.random)": [[133, "tensorly.random.random_parafac2"]], "random_tt() (in module tensorly.random)": [[134, "tensorly.random.random_tt"]], "random_tt_matrix() (in module tensorly.random)": [[135, "tensorly.random.random_tt_matrix"]], "random_tucker() (in module tensorly.random)": [[136, "tensorly.random.random_tucker"]], "cp_plsr (class in tensorly.regression)": [[137, "tensorly.regression.CP_PLSR"]], "fit() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.fit"]], "fit_transform() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.fit_transform"]], "get_params() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.get_params"]], "predict() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.predict"]], "set_params() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.set_params"]], "transform() (cp_plsr method)": [[137, "tensorly.regression.CP_PLSR.transform"]], "cpregressor (class in tensorly.regression.cp_regression)": [[138, "tensorly.regression.cp_regression.CPRegressor"]], "fit() (cpregressor method)": [[138, "tensorly.regression.cp_regression.CPRegressor.fit"]], "get_params() (cpregressor method)": [[138, "tensorly.regression.cp_regression.CPRegressor.get_params"]], "predict() (cpregressor method)": [[138, "tensorly.regression.cp_regression.CPRegressor.predict"]], "set_params() (cpregressor method)": [[138, "tensorly.regression.cp_regression.CPRegressor.set_params"]], "tuckerregressor (class in tensorly.regression.tucker_regression)": [[139, "tensorly.regression.tucker_regression.TuckerRegressor"]], "fit() (tuckerregressor method)": [[139, "tensorly.regression.tucker_regression.TuckerRegressor.fit"]], "get_params() (tuckerregressor method)": [[139, "tensorly.regression.tucker_regression.TuckerRegressor.get_params"]], "predict() (tuckerregressor method)": [[139, "tensorly.regression.tucker_regression.TuckerRegressor.predict"]], "set_params() (tuckerregressor method)": [[139, "tensorly.regression.tucker_regression.TuckerRegressor.set_params"]], "reshape() (in module tensorly)": [[140, "tensorly.reshape"]], "set_backend() (in module tensorly)": [[141, "tensorly.set_backend"]], "shape() (in module tensorly)": [[142, "tensorly.shape"]], "sign() (in module tensorly)": [[143, "tensorly.sign"]], "solve() (in module tensorly)": [[144, "tensorly.solve"]], "sort() (in module tensorly)": [[145, "tensorly.sort"]], "sqrt() (in module tensorly)": [[146, "tensorly.sqrt"]], "stack() (in module tensorly)": [[147, "tensorly.stack"]], "sum() (in module tensorly)": [[148, "tensorly.sum"]], "backend_context() (in module tensorly.tenalg)": [[149, "tensorly.tenalg.backend_context"]], "batched_outer() (in module tensorly.tenalg)": [[150, "tensorly.tenalg.batched_outer"]], "get_backend() (in module tensorly.tenalg)": [[151, "tensorly.tenalg.get_backend"]], "higher_order_moment() (in module tensorly.tenalg)": [[152, "tensorly.tenalg.higher_order_moment"]], "inner() (in module tensorly.tenalg)": [[153, "tensorly.tenalg.inner"]], "khatri_rao() (in module tensorly.tenalg)": [[154, "tensorly.tenalg.khatri_rao"]], "kronecker() (in module tensorly.tenalg)": [[155, "tensorly.tenalg.kronecker"]], "mode_dot() (in module tensorly.tenalg)": [[156, "tensorly.tenalg.mode_dot"]], "multi_mode_dot() (in module tensorly.tenalg)": [[157, "tensorly.tenalg.multi_mode_dot"]], "outer() (in module tensorly.tenalg)": [[158, "tensorly.tenalg.outer"]], "procrustes() (in module tensorly.tenalg.proximal)": [[159, "tensorly.tenalg.proximal.procrustes"]], "soft_thresholding() (in module tensorly.tenalg.proximal)": [[160, "tensorly.tenalg.proximal.soft_thresholding"]], "svd_thresholding() (in module tensorly.tenalg.proximal)": [[161, "tensorly.tenalg.proximal.svd_thresholding"]], "set_backend() (in module tensorly.tenalg)": [[162, "tensorly.tenalg.set_backend"]], "svd_interface() (in module tensorly.tenalg)": [[163, "tensorly.tenalg.svd_interface"]], "tensordot() (in module tensorly.tenalg)": [[164, "tensorly.tenalg.tensordot"]], "unfolding_dot_khatri_rao() (in module tensorly.tenalg)": [[165, "tensorly.tenalg.unfolding_dot_khatri_rao"]], "tensor() (in module tensorly)": [[166, "tensorly.tensor"]], "tensordot() (in module tensorly)": [[167, "tensorly.tensordot"]], "to_numpy() (in module tensorly)": [[168, "tensorly.to_numpy"]], "transpose() (in module tensorly)": [[169, "tensorly.transpose"]], "tt_matrix_to_tensor() (in module tensorly.tt_matrix)": [[170, "tensorly.tt_matrix.tt_matrix_to_tensor"]], "tt_matrix_to_unfolded() (in module tensorly.tt_matrix)": [[171, "tensorly.tt_matrix.tt_matrix_to_unfolded"]], "tt_matrix_to_vec() (in module tensorly.tt_matrix)": [[172, "tensorly.tt_matrix.tt_matrix_to_vec"]], "pad_tt_rank() (in module tensorly.tt_tensor)": [[173, "tensorly.tt_tensor.pad_tt_rank"]], "tt_to_tensor() (in module tensorly.tt_tensor)": [[174, "tensorly.tt_tensor.tt_to_tensor"]], "tt_to_unfolded() (in module tensorly.tt_tensor)": [[175, "tensorly.tt_tensor.tt_to_unfolded"]], "tt_to_vec() (in module tensorly.tt_tensor)": [[176, "tensorly.tt_tensor.tt_to_vec"]], "tucker_mode_dot() (in module tensorly.tucker_tensor)": [[177, "tensorly.tucker_tensor.tucker_mode_dot"]], "tucker_to_tensor() (in module tensorly.tucker_tensor)": [[178, "tensorly.tucker_tensor.tucker_to_tensor"]], "tucker_to_unfolded() (in module tensorly.tucker_tensor)": [[179, "tensorly.tucker_tensor.tucker_to_unfolded"]], "tucker_to_vec() (in module tensorly.tucker_tensor)": [[180, "tensorly.tucker_tensor.tucker_to_vec"]], "where() (in module tensorly)": [[181, "tensorly.where"]], "zeros() (in module tensorly)": [[182, "tensorly.zeros"]], "zeros_like() (in module tensorly)": [[183, "tensorly.zeros_like"]], "tucker() (in module tensorly.decomposition)": [[184, "tensorly.decomposition.tucker"]]}})