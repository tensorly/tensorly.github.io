Search.setIndex({"docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_IL2", "auto_examples/applications/plot_covid", "auto_examples/applications/plot_image_compression", "auto_examples/applications/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_cp_line_search", "auto_examples/decomposition/plot_guide_for_constrained_cp", "auto_examples/decomposition/plot_nn_cp_hals", "auto_examples/decomposition/plot_nn_tucker", "auto_examples/decomposition/plot_parafac2", "auto_examples/decomposition/plot_parafac2_compression", "auto_examples/decomposition/plot_permute_factors", "auto_examples/decomposition/sg_execution_times", "auto_examples/index", "auto_examples/plot_tensor", "auto_examples/regression/index", "auto_examples/regression/plot_cp_regression", "auto_examples/regression/plot_tucker_regression", "auto_examples/regression/sg_execution_times", "auto_examples/sg_execution_times", "development_guide/backend_system", "development_guide/contributing", "development_guide/documentation", "development_guide/index", "home", "index", "installation", "modules/api", "modules/generated/parafac2-function", "modules/generated/tensorly.abs", "modules/generated/tensorly.all", "modules/generated/tensorly.arange", "modules/generated/tensorly.argmax", "modules/generated/tensorly.argmin", "modules/generated/tensorly.backend_context", "modules/generated/tensorly.base.fold", "modules/generated/tensorly.base.partial_fold", "modules/generated/tensorly.base.partial_tensor_to_vec", "modules/generated/tensorly.base.partial_unfold", "modules/generated/tensorly.base.partial_vec_to_tensor", "modules/generated/tensorly.base.tensor_to_vec", "modules/generated/tensorly.base.unfold", "modules/generated/tensorly.base.vec_to_tensor", "modules/generated/tensorly.check_random_state", "modules/generated/tensorly.clip", "modules/generated/tensorly.concatenate", "modules/generated/tensorly.conj", "modules/generated/tensorly.context", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.parafac", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.contrib.sparse.decomposition.tucker", "modules/generated/tensorly.copy", "modules/generated/tensorly.cp_tensor.cp_mode_dot", "modules/generated/tensorly.cp_tensor.cp_norm", "modules/generated/tensorly.cp_tensor.cp_normalize", "modules/generated/tensorly.cp_tensor.cp_permute_factors", "modules/generated/tensorly.cp_tensor.cp_to_tensor", "modules/generated/tensorly.cp_tensor.cp_to_unfolded", "modules/generated/tensorly.cp_tensor.cp_to_vec", "modules/generated/tensorly.datasets.load_IL2data", "modules/generated/tensorly.datasets.load_covid19_serology", "modules/generated/tensorly.datasets.load_indian_pines", "modules/generated/tensorly.datasets.load_kinetic", "modules/generated/tensorly.datasets.synthetic.gen_image", "modules/generated/tensorly.decomposition.CP", "modules/generated/tensorly.decomposition.CPPower", "modules/generated/tensorly.decomposition.CP_NN_HALS", "modules/generated/tensorly.decomposition.ConstrainedCP", "modules/generated/tensorly.decomposition.Parafac2", "modules/generated/tensorly.decomposition.RandomizedCP", "modules/generated/tensorly.decomposition.SymmetricCP", "modules/generated/tensorly.decomposition.TensorRing", "modules/generated/tensorly.decomposition.TensorTrain", "modules/generated/tensorly.decomposition.TensorTrainMatrix", "modules/generated/tensorly.decomposition.Tucker", "modules/generated/tensorly.decomposition.constrained_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac_hals", "modules/generated/tensorly.decomposition.non_negative_tucker", "modules/generated/tensorly.decomposition.non_negative_tucker_hals", "modules/generated/tensorly.decomposition.parafac", "modules/generated/tensorly.decomposition.parafac_power_iteration", "modules/generated/tensorly.decomposition.partial_tucker", "modules/generated/tensorly.decomposition.power_iteration", "modules/generated/tensorly.decomposition.randomised_parafac", "modules/generated/tensorly.decomposition.robust_pca", "modules/generated/tensorly.decomposition.sample_khatri_rao", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.decomposition.symmetric_power_iteration", "modules/generated/tensorly.decomposition.tensor_ring", "modules/generated/tensorly.decomposition.tensor_train", "modules/generated/tensorly.decomposition.tensor_train_matrix", "modules/generated/tensorly.diag", "modules/generated/tensorly.dot", "modules/generated/tensorly.eps", "modules/generated/tensorly.eye", "modules/generated/tensorly.finfo", "modules/generated/tensorly.get_backend", "modules/generated/tensorly.index", "modules/generated/tensorly.index_update", "modules/generated/tensorly.is_tensor", "modules/generated/tensorly.kr", "modules/generated/tensorly.kron", "modules/generated/tensorly.matmul", "modules/generated/tensorly.max", "modules/generated/tensorly.mean", "modules/generated/tensorly.metrics.correlation_index", "modules/generated/tensorly.metrics.factors.congruence_coefficient", "modules/generated/tensorly.metrics.regression.MSE", "modules/generated/tensorly.metrics.regression.RMSE", "modules/generated/tensorly.min", "modules/generated/tensorly.moveaxis", "modules/generated/tensorly.ndim", "modules/generated/tensorly.norm", "modules/generated/tensorly.ones", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec", "modules/generated/tensorly.plugins.use_cuquantum", "modules/generated/tensorly.plugins.use_default_einsum", "modules/generated/tensorly.plugins.use_opt_einsum", "modules/generated/tensorly.preprocessing.svd_compress_tensor_slices", "modules/generated/tensorly.preprocessing.svd_decompress_parafac2_tensor", "modules/generated/tensorly.prod", "modules/generated/tensorly.qr", "modules/generated/tensorly.random.random_cp", "modules/generated/tensorly.random.random_parafac2", "modules/generated/tensorly.random.random_tt", "modules/generated/tensorly.random.random_tt_matrix", "modules/generated/tensorly.random.random_tucker", "modules/generated/tensorly.regression.CP_PLSR", "modules/generated/tensorly.regression.cp_regression.CPRegressor", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor", "modules/generated/tensorly.reshape", "modules/generated/tensorly.set_backend", "modules/generated/tensorly.shape", "modules/generated/tensorly.sign", "modules/generated/tensorly.solve", "modules/generated/tensorly.sort", "modules/generated/tensorly.sqrt", "modules/generated/tensorly.stack", "modules/generated/tensorly.sum", "modules/generated/tensorly.tenalg.backend_context", "modules/generated/tensorly.tenalg.batched_outer", "modules/generated/tensorly.tenalg.get_backend", "modules/generated/tensorly.tenalg.higher_order_moment", "modules/generated/tensorly.tenalg.inner", "modules/generated/tensorly.tenalg.khatri_rao", "modules/generated/tensorly.tenalg.kronecker", "modules/generated/tensorly.tenalg.mode_dot", "modules/generated/tensorly.tenalg.multi_mode_dot", "modules/generated/tensorly.tenalg.outer", "modules/generated/tensorly.tenalg.proximal.procrustes", "modules/generated/tensorly.tenalg.proximal.soft_thresholding", "modules/generated/tensorly.tenalg.proximal.svd_thresholding", "modules/generated/tensorly.tenalg.set_backend", "modules/generated/tensorly.tenalg.svd_interface", "modules/generated/tensorly.tenalg.tensordot", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao", "modules/generated/tensorly.tensor", "modules/generated/tensorly.tensordot", "modules/generated/tensorly.to_numpy", "modules/generated/tensorly.transpose", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec", "modules/generated/tensorly.tt_tensor.pad_tt_rank", "modules/generated/tensorly.tt_tensor.tt_to_tensor", "modules/generated/tensorly.tt_tensor.tt_to_unfolded", "modules/generated/tensorly.tt_tensor.tt_to_vec", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded", "modules/generated/tensorly.tucker_tensor.tucker_to_vec", "modules/generated/tensorly.use_dynamic_dispatch", "modules/generated/tensorly.use_static_dispatch", "modules/generated/tensorly.where", "modules/generated/tensorly.zeros", "modules/generated/tensorly.zeros_like", "modules/generated/tucker-function", "sg_execution_times", "user_guide/backend", "user_guide/index", "user_guide/quickstart", "user_guide/sparse_backend", "user_guide/tensor_basics", "user_guide/tensor_decomposition", "user_guide/tensor_regression"], "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_IL2.rst", "auto_examples/applications/plot_covid.rst", "auto_examples/applications/plot_image_compression.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_cp_line_search.rst", "auto_examples/decomposition/plot_guide_for_constrained_cp.rst", "auto_examples/decomposition/plot_nn_cp_hals.rst", "auto_examples/decomposition/plot_nn_tucker.rst", "auto_examples/decomposition/plot_parafac2.rst", "auto_examples/decomposition/plot_parafac2_compression.rst", "auto_examples/decomposition/plot_permute_factors.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_tensor.rst", "auto_examples/regression/index.rst", "auto_examples/regression/plot_cp_regression.rst", "auto_examples/regression/plot_tucker_regression.rst", "auto_examples/regression/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "development_guide/backend_system.rst", "development_guide/contributing.rst", "development_guide/documentation.rst", "development_guide/index.rst", "home.rst", "index.rst", "installation.rst", "modules/api.rst", "modules/generated/parafac2-function.rst", "modules/generated/tensorly.abs.rst", "modules/generated/tensorly.all.rst", "modules/generated/tensorly.arange.rst", "modules/generated/tensorly.argmax.rst", "modules/generated/tensorly.argmin.rst", "modules/generated/tensorly.backend_context.rst", "modules/generated/tensorly.base.fold.rst", "modules/generated/tensorly.base.partial_fold.rst", "modules/generated/tensorly.base.partial_tensor_to_vec.rst", "modules/generated/tensorly.base.partial_unfold.rst", "modules/generated/tensorly.base.partial_vec_to_tensor.rst", "modules/generated/tensorly.base.tensor_to_vec.rst", "modules/generated/tensorly.base.unfold.rst", "modules/generated/tensorly.base.vec_to_tensor.rst", "modules/generated/tensorly.check_random_state.rst", "modules/generated/tensorly.clip.rst", "modules/generated/tensorly.concatenate.rst", "modules/generated/tensorly.conj.rst", "modules/generated/tensorly.context.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca.rst", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.contrib.sparse.decomposition.tucker.rst", "modules/generated/tensorly.copy.rst", "modules/generated/tensorly.cp_tensor.cp_mode_dot.rst", "modules/generated/tensorly.cp_tensor.cp_norm.rst", "modules/generated/tensorly.cp_tensor.cp_normalize.rst", "modules/generated/tensorly.cp_tensor.cp_permute_factors.rst", "modules/generated/tensorly.cp_tensor.cp_to_tensor.rst", "modules/generated/tensorly.cp_tensor.cp_to_unfolded.rst", "modules/generated/tensorly.cp_tensor.cp_to_vec.rst", "modules/generated/tensorly.datasets.load_IL2data.rst", "modules/generated/tensorly.datasets.load_covid19_serology.rst", "modules/generated/tensorly.datasets.load_indian_pines.rst", "modules/generated/tensorly.datasets.load_kinetic.rst", "modules/generated/tensorly.datasets.synthetic.gen_image.rst", "modules/generated/tensorly.decomposition.CP.rst", "modules/generated/tensorly.decomposition.CPPower.rst", "modules/generated/tensorly.decomposition.CP_NN_HALS.rst", "modules/generated/tensorly.decomposition.ConstrainedCP.rst", "modules/generated/tensorly.decomposition.Parafac2.rst", "modules/generated/tensorly.decomposition.RandomizedCP.rst", "modules/generated/tensorly.decomposition.SymmetricCP.rst", "modules/generated/tensorly.decomposition.TensorRing.rst", "modules/generated/tensorly.decomposition.TensorTrain.rst", "modules/generated/tensorly.decomposition.TensorTrainMatrix.rst", "modules/generated/tensorly.decomposition.Tucker.rst", "modules/generated/tensorly.decomposition.constrained_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac_hals.rst", "modules/generated/tensorly.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.decomposition.non_negative_tucker_hals.rst", "modules/generated/tensorly.decomposition.parafac.rst", "modules/generated/tensorly.decomposition.parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.partial_tucker.rst", "modules/generated/tensorly.decomposition.power_iteration.rst", "modules/generated/tensorly.decomposition.randomised_parafac.rst", "modules/generated/tensorly.decomposition.robust_pca.rst", "modules/generated/tensorly.decomposition.sample_khatri_rao.rst", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.symmetric_power_iteration.rst", "modules/generated/tensorly.decomposition.tensor_ring.rst", "modules/generated/tensorly.decomposition.tensor_train.rst", "modules/generated/tensorly.decomposition.tensor_train_matrix.rst", "modules/generated/tensorly.diag.rst", "modules/generated/tensorly.dot.rst", "modules/generated/tensorly.eps.rst", "modules/generated/tensorly.eye.rst", "modules/generated/tensorly.finfo.rst", "modules/generated/tensorly.get_backend.rst", "modules/generated/tensorly.index.rst", "modules/generated/tensorly.index_update.rst", "modules/generated/tensorly.is_tensor.rst", "modules/generated/tensorly.kr.rst", "modules/generated/tensorly.kron.rst", "modules/generated/tensorly.matmul.rst", "modules/generated/tensorly.max.rst", "modules/generated/tensorly.mean.rst", "modules/generated/tensorly.metrics.correlation_index.rst", "modules/generated/tensorly.metrics.factors.congruence_coefficient.rst", "modules/generated/tensorly.metrics.regression.MSE.rst", "modules/generated/tensorly.metrics.regression.RMSE.rst", "modules/generated/tensorly.min.rst", "modules/generated/tensorly.moveaxis.rst", "modules/generated/tensorly.ndim.rst", "modules/generated/tensorly.norm.rst", "modules/generated/tensorly.ones.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec.rst", "modules/generated/tensorly.plugins.use_cuquantum.rst", "modules/generated/tensorly.plugins.use_default_einsum.rst", "modules/generated/tensorly.plugins.use_opt_einsum.rst", "modules/generated/tensorly.preprocessing.svd_compress_tensor_slices.rst", "modules/generated/tensorly.preprocessing.svd_decompress_parafac2_tensor.rst", "modules/generated/tensorly.prod.rst", "modules/generated/tensorly.qr.rst", "modules/generated/tensorly.random.random_cp.rst", "modules/generated/tensorly.random.random_parafac2.rst", "modules/generated/tensorly.random.random_tt.rst", "modules/generated/tensorly.random.random_tt_matrix.rst", "modules/generated/tensorly.random.random_tucker.rst", "modules/generated/tensorly.regression.CP_PLSR.rst", "modules/generated/tensorly.regression.cp_regression.CPRegressor.rst", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor.rst", "modules/generated/tensorly.reshape.rst", "modules/generated/tensorly.set_backend.rst", "modules/generated/tensorly.shape.rst", "modules/generated/tensorly.sign.rst", "modules/generated/tensorly.solve.rst", "modules/generated/tensorly.sort.rst", "modules/generated/tensorly.sqrt.rst", "modules/generated/tensorly.stack.rst", "modules/generated/tensorly.sum.rst", "modules/generated/tensorly.tenalg.backend_context.rst", "modules/generated/tensorly.tenalg.batched_outer.rst", "modules/generated/tensorly.tenalg.get_backend.rst", "modules/generated/tensorly.tenalg.higher_order_moment.rst", "modules/generated/tensorly.tenalg.inner.rst", "modules/generated/tensorly.tenalg.khatri_rao.rst", "modules/generated/tensorly.tenalg.kronecker.rst", "modules/generated/tensorly.tenalg.mode_dot.rst", "modules/generated/tensorly.tenalg.multi_mode_dot.rst", "modules/generated/tensorly.tenalg.outer.rst", "modules/generated/tensorly.tenalg.proximal.procrustes.rst", "modules/generated/tensorly.tenalg.proximal.soft_thresholding.rst", "modules/generated/tensorly.tenalg.proximal.svd_thresholding.rst", "modules/generated/tensorly.tenalg.set_backend.rst", "modules/generated/tensorly.tenalg.svd_interface.rst", "modules/generated/tensorly.tenalg.tensordot.rst", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao.rst", "modules/generated/tensorly.tensor.rst", "modules/generated/tensorly.tensordot.rst", "modules/generated/tensorly.to_numpy.rst", "modules/generated/tensorly.transpose.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec.rst", "modules/generated/tensorly.tt_tensor.pad_tt_rank.rst", "modules/generated/tensorly.tt_tensor.tt_to_tensor.rst", "modules/generated/tensorly.tt_tensor.tt_to_unfolded.rst", "modules/generated/tensorly.tt_tensor.tt_to_vec.rst", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_vec.rst", "modules/generated/tensorly.use_dynamic_dispatch.rst", "modules/generated/tensorly.use_static_dispatch.rst", "modules/generated/tensorly.where.rst", "modules/generated/tensorly.zeros.rst", "modules/generated/tensorly.zeros_like.rst", "modules/generated/tucker-function.rst", "sg_execution_times.rst", "user_guide/backend.rst", "user_guide/index.rst", "user_guide/quickstart.rst", "user_guide/sparse_backend.rst", "user_guide/tensor_basics.rst", "user_guide/tensor_decomposition.rst", "user_guide/tensor_regression.rst"], "titles": ["About us", "Practical applications of tensor methods", "Non-negative PARAFAC Decomposition of IL-2 Response Data", "COVID-19 Serology Dataset Analysis with CP", "Image compression via tensor decomposition", "Computation times", "Tensor decomposition", "Using line search with PARAFAC", "Constrained CP decomposition in Tensorly &gt;=0.7", "Non-negative CP decomposition in Tensorly &gt;=0.6", "Non-negative Tucker decomposition", "Demonstration of PARAFAC2", "Speeding up PARAFAC2 with SVD compression", "Permuting CP factors", "Computation times", "Gallery of examples", "Basic tensor operations", "Tensor regression with tensorly", "CP tensor regression", "Tucker tensor regression", "Computation times", "Computation times", "Backend System", "Contributing", "Writing documentation", "Development guide", "&lt;no title&gt;", "TensorLy: Tensor Learning in Python", "Installing tensorly", "API reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.abs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.all", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.arange", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmax", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.clip", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.concatenate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.conj", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_OI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_cross", "tensorly.contrib.sparse.decomposition.non_negative_parafac", "tensorly.contrib.sparse.decomposition.non_negative_tucker", "tensorly.contrib.sparse.decomposition.parafac", "tensorly.contrib.sparse.decomposition.partial_tucker", "tensorly.contrib.sparse.decomposition.robust_pca", "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "tensorly.contrib.sparse.decomposition.tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.copy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_permute_factors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_IL2data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_covid19_serology", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_indian_pines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_kinetic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets.synthetic</span></code>.gen_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CPPower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP_NN_HALS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.ConstrainedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.RandomizedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.SymmetricCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorRing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrainMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.constrained_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.partial_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.randomised_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.robust_pca", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.sample_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_ring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.diag", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eps", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eye", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.finfo", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index_update", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.is_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.matmul", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.max", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics</span></code>.correlation_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.factors</span></code>.congruence_coefficient", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.MSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.RMSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.moveaxis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ndim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ones", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slice", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_cuquantum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_default_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_opt_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.preprocessing</span></code>.svd_compress_tensor_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.preprocessing</span></code>.svd_decompress_parafac2_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.prod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.qr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_cp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression</span></code>.CP_PLSR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.cp_regression</span></code>.CPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.tucker_regression</span></code>.TuckerRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.reshape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.shape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sign", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.solve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sort", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sqrt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.stack", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.batched_outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.higher_order_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.inner", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.kronecker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.multi_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.procrustes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.soft_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.svd_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.svd_interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.unfolding_dot_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.to_numpy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.transpose", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.pad_tt_rank", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.use_dynamic_dispatch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.use_static_dispatch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.where", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros_like", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tucker", "Computation times", "<span class=\"section-number\">2. </span>TensorLy\u2019s backend system", "User guide", "<span class=\"section-number\">1. </span>Quick-Start", "<span class=\"section-number\">6. </span>Sparse Backend", "<span class=\"section-number\">3. </span>Tensor basics", "<span class=\"section-number\">4. </span>Tensor decomposition", "<span class=\"section-number\">5. </span>Tensor regression"], "terms": {"tensorli": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 24, 27, 190, 192, 194, 195, 196, 197], "wa": [0, 28, 30, 76, 101, 131, 134, 143, 148, 149, 173, 177, 194], "creat": [0, 18, 19, 23, 24, 29, 30, 31, 48, 59, 76, 80, 94, 99, 100, 123, 124, 125, 126, 127, 135, 137, 138, 139, 146, 148, 149, 188, 191, 192, 193, 194, 196], "2015": [0, 69], "jean": [0, 27], "kossaifi": [0, 27], "make": [0, 2, 9, 11, 23, 27, 28, 29, 51, 148, 166, 191, 194, 196], "tensor": [0, 2, 3, 5, 7, 8, 12, 20, 21, 22, 24, 25, 27, 30, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 107, 108, 114, 115, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 192, 194], "method": [0, 3, 4, 8, 9, 10, 13, 22, 23, 27, 29, 32, 59, 63, 69, 75, 83, 101, 112, 113, 114, 118, 133, 143, 145, 148, 151, 166, 172, 191, 193, 196, 197], "access": [0, 191, 193], "easi": [0, 16, 27, 191], "It": [0, 3, 8, 11, 12, 13, 22, 23, 28, 32, 34, 35, 64, 101, 111, 133, 143, 148, 151, 191, 194], "first": [0, 2, 3, 8, 9, 10, 11, 12, 23, 28, 29, 30, 32, 34, 35, 39, 40, 47, 51, 64, 76, 79, 80, 97, 99, 101, 110, 111, 112, 114, 118, 123, 124, 133, 134, 140, 143, 148, 150, 151, 156, 170, 191, 195, 196, 197], "present": [0, 2, 28, 112, 118, 196], "neurip": 0, "workshop": 0, "learn": [0, 18, 19, 27, 45, 52, 84, 140, 141, 142, 191, 193, 197], "why": [0, 12, 192, 193], "now": [0, 2, 3, 9, 11, 12, 13, 28, 111, 128, 130, 148, 191, 193, 194, 196], "how": [0, 1, 2, 3, 4, 7, 8, 11, 12, 13, 15, 16, 18, 19, 25, 33, 172, 176, 192, 194, 196], "later": [0, 23], "publish": 0, "jmlr": [0, 27], "paper": [0, 27], "titl": [0, 8, 9, 10, 11, 25, 27], "python": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 22, 24, 27, 33, 59, 111, 112, 118, 130, 151, 195], "yanni": [0, 27], "panagaki": [0, 27], "anima": [0, 27], "anandkumar": [0, 27], "maja": [0, 27], "pantic": [0, 27], "built": [0, 24, 33], "top": [0, 11], "numpi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 16, 22, 24, 25, 27, 32, 33, 36, 45, 94, 100, 101, 103, 111, 112, 113, 118, 122, 133, 134, 147, 148, 151, 152, 187, 191, 193, 194, 195, 196], "scipi": [0, 4, 11, 13, 63, 134, 147, 194], "onli": [0, 2, 8, 9, 10, 11, 12, 13, 22, 23, 24, 28, 29, 31, 34, 35, 36, 48, 50, 51, 54, 56, 58, 72, 74, 82, 88, 93, 94, 111, 112, 118, 134, 143, 146, 149, 151, 152, 157, 176, 186, 189, 191, 193, 194], "In": [0, 2, 3, 8, 9, 10, 24, 25, 27, 28, 29, 33, 34, 35, 37, 47, 52, 62, 75, 83, 84, 87, 101, 103, 110, 113, 114, 122, 131, 133, 134, 143, 148, 151, 168, 187, 191, 193, 194, 195, 196], "order": [0, 2, 8, 9, 13, 30, 31, 48, 50, 51, 55, 57, 58, 59, 63, 75, 76, 79, 81, 82, 83, 87, 90, 95, 96, 97, 98, 103, 111, 119, 121, 122, 130, 143, 146, 148, 149, 155, 156, 158, 170, 172, 187, 188, 189, 196], "combin": [0, 23, 29, 191, 193, 196], "deep": [0, 27, 191, 193], "run": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 23, 131, 191, 193], "them": [0, 3, 22, 24, 140, 191, 194], "multipl": [0, 2, 9, 10, 22, 32, 34, 35, 47, 52, 53, 54, 72, 74, 82, 84, 85, 86, 88, 101, 111, 112, 113, 118, 131, 148, 150, 193], "devic": [0, 29, 191], "cpu": [0, 29, 192], "gpu": [0, 27, 29, 192, 193], "flexibl": [0, 8, 27, 75, 83, 101], "backend": [0, 25, 27, 36, 105, 128, 129, 130, 144, 152, 154, 163, 165, 184, 185, 192], "system": [0, 2, 3, 8, 23, 25, 27, 30, 54, 68, 72, 74, 75, 83, 88, 128, 130, 147, 192, 193], "ad": [0, 23, 134, 148, 151, 172], "thi": [0, 2, 8, 9, 10, 11, 12, 13, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 47, 48, 51, 54, 55, 59, 61, 64, 69, 70, 72, 74, 75, 76, 79, 81, 83, 87, 88, 90, 97, 98, 100, 101, 103, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 131, 133, 134, 140, 143, 146, 148, 149, 150, 151, 152, 157, 168, 172, 174, 178, 185, 186, 187, 191, 193, 194, 195, 196, 197], "allow": [0, 2, 3, 22, 29, 30, 33, 51, 54, 72, 74, 76, 77, 79, 81, 88, 92, 97, 98, 103, 111, 112, 118, 122, 131, 187, 191, 193, 197], "algorithm": [0, 8, 9, 10, 11, 23, 29, 30, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 148, 166, 189, 192], "written": [0, 194], "ran": 0, "ani": [0, 8, 12, 23, 27, 29, 30, 32, 33, 70, 76, 112, 113, 118, 131, 133, 148, 149, 151, 157, 160, 181, 182, 183, 191], "major": [0, 103, 122, 131, 187], "framework": [0, 8, 27, 75, 83, 193], "pytorch": [0, 22, 23, 27, 29, 36, 128, 130, 152, 192, 193, 194], "mxnet": [0, 23, 27, 29, 36, 152, 191, 193], "tensorflow": [0, 22, 23, 27, 29, 36, 152, 191, 193, 194], "cupi": [0, 23, 27, 29, 36, 152, 191, 193], "jax": [0, 23, 27, 29, 191, 193], "i": [0, 2, 3, 8, 9, 10, 11, 13, 16, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 163, 165, 166, 168, 170, 172, 173, 176, 177, 180, 181, 182, 183, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197], "formost": 0, "commun": [0, 196], "aim": [0, 3], "With": [0, 27, 32, 34, 35, 112, 113, 118, 133, 151, 194], "robust": [0, 56, 57, 73, 78, 89, 91, 93, 95, 96, 194], "activ": [0, 2, 3, 27, 30, 54, 72, 74, 75, 76, 83, 87, 88], "group": 0, "contributor": 0, "we": [0, 2, 3, 9, 10, 11, 12, 13, 22, 23, 24, 29, 30, 51, 54, 56, 59, 65, 72, 74, 76, 87, 88, 93, 115, 123, 124, 125, 126, 127, 131, 132, 133, 134, 191, 193, 194, 195, 196, 197], "would": [0, 12, 40, 47, 101, 132, 150, 172, 194], "like": [0, 3, 8, 9, 10, 22, 23, 24, 33, 56, 93, 103, 111, 122, 130, 131, 134, 140, 143, 187, 191, 193, 197], "thank": 0, "all": [0, 10, 15, 23, 24, 27, 28, 29, 30, 36, 51, 53, 54, 55, 58, 59, 62, 64, 65, 66, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 88, 90, 92, 97, 98, 103, 112, 113, 114, 115, 118, 119, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 140, 144, 147, 148, 149, 151, 152, 157, 165, 184, 186, 189, 190, 191, 193, 194], "those": [0, 2, 185], "who": 0, "have": [0, 2, 4, 8, 9, 10, 11, 12, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 54, 59, 71, 72, 74, 75, 76, 83, 88, 101, 111, 113, 115, 124, 133, 143, 146, 148, 149, 150, 151, 160, 181, 182, 183, 191, 193, 194, 196], "contribut": [0, 25, 27], "includ": [0, 2, 3, 8, 10, 13, 23, 24, 29, 32, 33, 38, 41, 67, 113, 133, 151, 193], "alphabet": 0, "jeremi": 0, "cohen": 0, "julia": 0, "gusak": 0, "meraj": 0, "hashemizadeh": 0, "aaron": 0, "meurer": 0, "yngve": 0, "mardal": 0, "moe": 0, "meyer": [0, 3, 67, 68], "taylor": [0, 3, 68], "lee": 0, "patti": 0, "mari": 0, "roald": 0, "caglayan": 0, "tuna": 0, "For": [0, 2, 3, 11, 12, 22, 23, 24, 29, 31, 33, 40, 48, 51, 101, 111, 113, 134, 143, 146, 148, 149, 150, 151, 158, 159, 160, 172, 191, 193, 194, 195, 196, 197], "full": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 38, 41, 50, 64, 94, 122, 123, 124, 125, 126, 127, 134, 135, 136, 137, 138, 139, 147, 168, 173, 174, 177, 178, 181, 187, 191, 193, 195, 196], "list": [0, 8, 11, 13, 28, 30, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 114, 115, 123, 124, 125, 126, 127, 131, 132, 135, 136, 137, 138, 139, 140, 142, 148, 150, 157, 158, 160, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 189, 194, 196], "check": [0, 11, 23, 29, 32, 147], "github": [0, 23, 27], "page": [0, 8, 13, 23, 27], "The": [0, 8, 9, 10, 11, 12, 13, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 48, 51, 52, 54, 56, 59, 63, 69, 70, 72, 74, 75, 76, 83, 84, 85, 87, 88, 93, 94, 100, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 131, 133, 134, 136, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 156, 168, 170, 172, 176, 186, 187, 188, 191, 193, 194, 195, 196], "project": [0, 11, 23, 24, 30, 75, 76, 83, 123, 124, 125, 126, 127, 168, 194, 196], "ha": [0, 2, 4, 8, 9, 10, 11, 22, 34, 35, 53, 64, 65, 85, 86, 87, 110, 113, 133, 148, 149, 150, 151, 162, 163, 164, 194, 196], "been": [0, 2, 4, 22, 36, 148, 152, 162, 163, 164, 194], "variou": [0, 2, 10, 22, 148, 166, 193], "organ": [0, 110, 192], "univers": [0, 27, 30, 54, 69, 72, 74, 88], "inria": 0, "fund": 0, "time": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 28, 30, 53, 54, 58, 67, 72, 74, 76, 82, 85, 86, 87, 88, 123, 124, 125, 126, 127, 157, 158, 160, 168, 189, 194, 195, 196], "engin": [0, 2, 131], "work": [0, 2, 3, 4, 12, 25, 54, 64, 72, 74, 85, 88, 134, 148, 191, 194], "see": [1, 2, 3, 9, 12, 15, 27, 30, 31, 32, 33, 48, 52, 53, 54, 61, 72, 74, 75, 76, 83, 84, 85, 86, 87, 88, 100, 101, 111, 112, 113, 118, 124, 132, 133, 134, 146, 147, 149, 151, 157, 158, 172, 196], "you": [1, 8, 11, 12, 13, 15, 22, 23, 24, 27, 28, 29, 61, 70, 100, 112, 128, 130, 133, 134, 143, 151, 183, 185, 191, 193, 194, 195, 196, 197], "can": [1, 2, 3, 8, 9, 10, 11, 12, 13, 15, 22, 23, 24, 28, 29, 31, 32, 33, 59, 61, 62, 66, 69, 70, 110, 111, 112, 113, 128, 130, 131, 133, 134, 143, 148, 151, 157, 168, 170, 183, 186, 191, 193, 194, 195, 196, 197], "us": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 33, 36, 45, 47, 52, 53, 54, 55, 58, 59, 61, 67, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 97, 98, 99, 100, 101, 105, 106, 107, 111, 112, 113, 118, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 139, 143, 146, 147, 148, 151, 152, 154, 159, 160, 166, 168, 170, 172, 176, 183, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197], "dataset": [1, 2, 4, 5, 11, 12, 15, 18, 19, 131, 190, 192], "imag": [1, 5, 15, 18, 19, 69, 71, 146, 190, 191, 197], "compress": [1, 5, 6, 14, 15, 131, 132, 190], "via": [1, 5, 15, 22, 30, 31, 33, 48, 50, 51, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 88, 89, 90, 92, 93, 95, 97, 98, 103, 122, 131, 134, 146, 149, 187, 189, 190, 194], "decomposit": [1, 5, 7, 11, 12, 14, 23, 27, 67, 68, 69, 114, 123, 124, 125, 126, 127, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 157, 158, 173, 177, 182, 183, 190, 191, 192, 194, 195, 197], "non": [1, 5, 6, 8, 14, 15, 28, 30, 32, 33, 52, 53, 54, 67, 69, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 112, 113, 118, 133, 148, 149, 151, 166, 170, 190, 194, 196], "neg": [1, 3, 5, 6, 8, 14, 15, 30, 32, 52, 53, 67, 69, 74, 75, 76, 82, 83, 84, 85, 86, 87, 103, 133, 149, 151, 166, 170, 190, 196], "parafac": [1, 3, 4, 5, 6, 8, 14, 15, 23, 29, 30, 70, 72, 74, 75, 76, 83, 190, 192, 193, 194], "il": [1, 5, 15, 67, 190], "2": [1, 3, 4, 5, 8, 10, 11, 13, 15, 16, 18, 19, 20, 23, 24, 28, 30, 31, 33, 34, 35, 47, 48, 50, 51, 52, 53, 54, 56, 57, 59, 61, 64, 67, 68, 70, 72, 73, 74, 75, 76, 78, 80, 83, 84, 86, 87, 88, 89, 93, 95, 99, 100, 101, 103, 110, 111, 112, 113, 118, 119, 121, 122, 131, 133, 134, 140, 143, 145, 147, 148, 149, 150, 151, 163, 166, 170, 172, 174, 178, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197], "respons": [1, 3, 5, 15, 67, 140, 190], "data": [1, 3, 5, 9, 10, 11, 15, 18, 19, 29, 30, 33, 47, 50, 56, 59, 69, 70, 76, 93, 103, 104, 112, 113, 118, 122, 131, 132, 133, 134, 140, 141, 142, 143, 148, 150, 169, 187, 188, 190, 193, 194, 197], "covid": [1, 5, 15, 68, 190], "19": [1, 5, 8, 9, 15, 16, 59, 68, 75, 83, 113, 190, 194, 195], "serologi": [1, 5, 15, 68, 190], "analysi": [1, 5, 15, 30, 54, 68, 72, 74, 88, 190], "cp": [1, 4, 5, 6, 7, 11, 12, 14, 15, 17, 20, 23, 30, 52, 53, 54, 57, 60, 61, 63, 67, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 92, 95, 135, 140, 141, 190, 192, 193, 197], "go": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 191, 196], "end": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 33, 38, 39, 40, 41, 51, 56, 93, 148, 191, 195], "download": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 69, 70], "exampl": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 27, 31, 32, 33, 34, 35, 36, 47, 48, 51, 59, 68, 100, 101, 103, 106, 110, 111, 112, 113, 118, 119, 122, 128, 130, 133, 134, 143, 145, 146, 147, 148, 149, 150, 151, 152, 163, 170, 172, 186, 187, 188, 190, 192, 195], "code": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 27, 29, 51, 168, 191, 193], "here": [2, 3, 8, 9, 10, 11, 12, 13, 23, 24, 28, 30, 33, 76, 114, 128, 130, 146, 191, 194, 196], "provid": [2, 3, 8, 9, 22, 27, 29, 31, 34, 35, 47, 48, 55, 58, 70, 82, 90, 111, 113, 115, 121, 134, 140, 141, 142, 146, 149, 150, 151, 160, 166, 172, 181, 182, 183, 186, 189, 191, 193], "an": [2, 3, 8, 9, 10, 11, 12, 13, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 56, 59, 64, 65, 68, 71, 72, 73, 74, 75, 76, 83, 85, 87, 93, 100, 101, 103, 106, 111, 112, 113, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 143, 145, 146, 148, 149, 150, 151, 170, 172, 182, 186, 187, 188, 191, 194, 195, 196], "reduc": [2, 12, 32, 34, 35, 112, 113, 118, 133, 134, 151], "dimension": [2, 3, 29, 34, 35, 122, 133, 134, 187, 191, 195, 196], "experiment": [2, 192], "insight": 2, "about": [2, 10, 12, 23, 27, 104, 132, 194], "underli": [2, 3, 24, 143, 176], "structur": [2, 3, 8, 11, 24, 68, 110, 131, 148, 193, 194], "To": [2, 3, 8, 10, 11, 23, 28, 29, 30, 59, 76, 112, 118, 123, 124, 125, 126, 127, 131, 132, 172, 191, 193], "do": [2, 3, 23, 24, 192], "measur": [2, 3, 191, 193], "cell": [2, 3, 67, 68], "signal": [2, 3, 8, 12, 67, 75, 83], "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 31, 36, 59, 111, 128, 130, 152, 163, 185, 191, 193, 194, 195, 196], "np": [2, 3, 4, 7, 8, 9, 10, 11, 16, 22, 23, 30, 31, 32, 33, 34, 35, 45, 47, 48, 51, 52, 53, 54, 55, 58, 59, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 88, 90, 92, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 133, 134, 135, 136, 137, 138, 139, 143, 145, 146, 147, 148, 149, 150, 151, 157, 170, 172, 186, 187, 188, 189, 191, 194, 195, 196], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "plt": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "from": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 35, 47, 50, 51, 62, 69, 76, 94, 103, 110, 111, 114, 123, 124, 125, 126, 127, 128, 130, 132, 133, 140, 143, 146, 149, 150, 151, 163, 174, 178, 186, 190, 191, 193, 194, 195, 196, 197], "load_il2data": 2, "non_negative_parafac": [2, 9, 194], "cp_tensor": [2, 9, 13, 168, 191, 193, 194], "cp_normal": 2, "load": [2, 12, 25, 29, 67, 68, 69, 70, 114, 131, 132, 144, 165, 193], "cellular": 2, "stimul": 2, "natur": 2, "occur": [2, 13, 33, 47, 63, 150, 151], "immun": [2, 3], "molecul": 2, "which": [2, 8, 9, 11, 12, 13, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 47, 48, 51, 52, 54, 55, 58, 59, 60, 71, 72, 74, 75, 76, 82, 83, 84, 85, 88, 90, 102, 103, 104, 107, 111, 112, 113, 114, 118, 122, 131, 133, 134, 135, 137, 138, 146, 148, 149, 150, 151, 159, 162, 163, 164, 167, 168, 172, 173, 177, 180, 186, 187, 189, 191, 193, 194, 196], "pharmaceut": 2, "compani": [2, 27], "drug": 2, "design": 2, "attempt": [2, 101, 113, 194], "act": [2, 8], "effect": [2, 12, 54, 72, 74, 88], "immunotherapi": 2, "therapi": 2, "alter": [2, 3, 68], "": [2, 3, 12, 23, 24, 25, 27, 28, 32, 45, 53, 67, 68, 70, 86, 112, 118, 122, 128, 130, 131, 143, 151, 156, 166, 170, 187, 192, 193, 194, 195, 196], "increas": [2, 8, 56, 93, 176], "decreas": [2, 8, 30, 75, 76, 77, 83, 92], "its": [2, 8, 13, 23, 29, 31, 32, 48, 51, 100, 101, 111, 114, 143, 146, 149, 172, 174, 175, 176, 178, 179, 193, 195, 196], "interact": [2, 3, 22], "particular": [2, 9, 11, 22, 23, 24, 28, 101], "type": [2, 3, 22, 24, 30, 32, 33, 54, 67, 72, 74, 75, 76, 83, 88, 101, 103, 104, 112, 113, 118, 122, 133, 134, 148, 151, 187, 188, 193, 197], "through": [2, 29, 32, 59, 112, 113, 118, 133, 151, 191, 193, 197], "jak": 2, "stat": 2, "pathwai": 2, "transmit": 2, "phosphoryl": 2, "stat5": 2, "pstat5": 2, "when": [2, 9, 10, 22, 23, 29, 30, 33, 47, 52, 54, 55, 58, 59, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 101, 111, 112, 115, 118, 131, 132, 133, 134, 148, 149, 151, 170, 172, 186, 189, 191, 194], "caus": [2, 3, 113, 151, 194], "prolifer": 2, "depend": [2, 8, 27, 100, 111, 113, 134, 147, 148, 151, 186, 191, 193, 194], "whether": [2, 27, 30, 32, 53, 54, 58, 72, 82, 85, 86, 87, 88, 100, 103, 115, 122, 134, 140, 148, 166, 187, 189, 191, 193, 194], "regulatori": 2, "t": [2, 3, 10, 11, 12, 13, 23, 30, 36, 47, 51, 54, 61, 68, 72, 74, 75, 76, 82, 83, 87, 88, 110, 112, 115, 118, 123, 124, 125, 126, 127, 131, 134, 152, 157, 158, 163, 168, 172, 191, 193, 194, 195, 196], "treg": 2, "effector": 2, "helper": 2, "killer": 2, "cytotox": 2, "thelper": 2, "nk": 2, "cd8": 2, "respond": 2, "result": [2, 3, 9, 10, 13, 23, 24, 28, 31, 32, 33, 34, 35, 47, 48, 71, 85, 87, 100, 103, 111, 112, 113, 118, 119, 122, 133, 134, 143, 146, 149, 150, 151, 156, 166, 168, 170, 183, 187, 188, 194], "immunosuppress": 2, "immunostimul": 2, "respect": [2, 85, 87, 111, 156, 191], "thu": [2, 8, 131, 194], "meant": 2, "repress": 2, "potenti": 2, "treatment": [2, 67], "autoimmun": 2, "diseas": 2, "primarili": 2, "enact": 2, "desir": [2, 54, 65, 72, 74, 88, 113, 122, 187, 191], "convers": [2, 113], "cancer": 2, "achiev": [2, 119, 172], "either": [2, 8, 23, 30, 75, 83, 101, 111, 134, 147, 191, 193], "bia": 2, "variant": [2, 168, 194], "affin": [2, 67], "receptor": [2, 3, 67, 68], "il2r\u03b1": 2, "il2r\u03b2": 2, "furthermor": 2, "bind": [2, 3], "domain": 2, "multival": [2, 67], "mai": [2, 8, 10, 11, 22, 29, 30, 32, 33, 47, 51, 59, 76, 113, 131, 133, 134, 150, 151, 194], "more": [2, 3, 12, 23, 30, 32, 33, 47, 76, 100, 112, 113, 118, 132, 134, 146, 150, 151, 157, 158, 168, 170, 191, 193, 194, 195, 196], "therapeut": 2, "understand": 2, "mutat": 2, "affect": [2, 33, 36, 131, 152], "mutant": [2, 67], "perform": [2, 4, 9, 12, 16, 18, 19, 23, 30, 32, 50, 51, 54, 55, 72, 76, 88, 90, 101, 113, 128, 133, 140, 148, 151, 191, 193, 194, 195, 196, 197], "our": [2, 9, 10, 23, 29, 131, 191, 193, 194, 196], "contain": [2, 29, 30, 31, 50, 52, 54, 57, 59, 67, 72, 73, 74, 76, 78, 84, 85, 88, 89, 94, 95, 113, 123, 124, 125, 126, 127, 131, 134, 148, 149, 166, 170, 172, 193, 194], "8": [2, 8, 11, 12, 16, 30, 33, 53, 75, 76, 83, 85, 86, 87, 100, 133, 134, 147, 148, 170, 186, 194, 195], "differ": [2, 3, 9, 10, 11, 29, 30, 59, 67, 76, 111, 112, 146, 148, 149, 191, 195], "13": [2, 8, 9, 11, 16, 30, 34, 35, 67, 76, 101, 111, 113, 190, 194, 195], "4": [2, 8, 9, 10, 11, 12, 13, 16, 18, 19, 32, 33, 34, 35, 47, 51, 59, 80, 85, 99, 100, 101, 106, 110, 111, 112, 113, 118, 119, 131, 133, 143, 145, 146, 148, 149, 150, 163, 170, 172, 186, 188, 193, 194, 195], "timepoint": 2, "12": [2, 4, 8, 9, 10, 16, 34, 35, 67, 69, 101, 113, 133, 148, 186, 194, 195, 196], "standard": [2, 172], "concentr": [2, 67], "therefor": [2, 8, 9, 10, 23, 29, 38, 40, 43, 101, 115, 195, 196], "shape": [2, 11, 12, 13, 16, 18, 19, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 157, 158, 159, 161, 162, 163, 166, 168, 170, 172, 173, 180, 181, 186, 187, 188, 189, 191, 193, 194, 195, 196], "x": [2, 11, 12, 18, 19, 28, 30, 31, 34, 35, 40, 48, 56, 59, 61, 76, 80, 93, 99, 100, 119, 123, 124, 125, 126, 127, 131, 133, 134, 140, 141, 142, 145, 146, 147, 149, 186, 187, 188, 194, 195, 197], "dimens": [2, 32, 33, 34, 35, 38, 39, 40, 41, 47, 51, 71, 101, 110, 111, 112, 113, 114, 118, 119, 133, 134, 139, 140, 142, 143, 145, 150, 151, 170, 172, 176, 188, 195, 196, 197], "repres": [2, 3, 10, 22, 136, 173, 176, 177, 191, 194, 196], "dose": [2, 67], "each": [2, 3, 9, 10, 11, 12, 13, 23, 29, 30, 31, 40, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 67, 72, 73, 74, 75, 76, 78, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 114, 115, 119, 131, 136, 139, 140, 141, 142, 149, 150, 151, 157, 160, 168, 189, 196, 197], "quantiti": 2, "amount": [2, 3, 8], "phosphorly": 2, "given": [2, 8, 11, 22, 23, 30, 32, 33, 34, 35, 51, 59, 75, 76, 83, 94, 101, 102, 112, 115, 118, 122, 123, 124, 125, 126, 127, 131, 133, 140, 143, 149, 151, 157, 170, 172, 173, 174, 177, 178, 187, 188, 191, 195, 197], "popul": [2, 33], "follow": [2, 8, 9, 10, 11, 24, 29, 30, 76, 87, 111, 134, 148, 170, 194], "specifi": [2, 8, 23, 30, 32, 33, 34, 35, 37, 39, 40, 47, 60, 71, 76, 85, 100, 103, 106, 107, 113, 133, 144, 148, 150, 151, 159, 160, 165, 166, 167, 170, 172, 180, 191], "response_data": 2, "il2mut": 2, "tick": [2, 3], "0": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 64, 66, 70, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 100, 101, 103, 110, 111, 112, 113, 114, 118, 119, 122, 131, 133, 134, 137, 138, 140, 143, 145, 146, 147, 148, 149, 150, 151, 157, 158, 160, 163, 166, 168, 170, 172, 176, 181, 182, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196], "3": [2, 3, 4, 5, 7, 8, 11, 12, 13, 16, 18, 19, 22, 23, 30, 33, 34, 35, 47, 51, 54, 58, 59, 69, 72, 74, 75, 77, 79, 80, 81, 82, 83, 87, 88, 92, 97, 98, 99, 100, 101, 103, 106, 107, 110, 111, 112, 113, 118, 119, 122, 130, 133, 134, 143, 145, 147, 148, 149, 150, 157, 158, 163, 170, 172, 186, 187, 188, 189, 193, 194, 195, 196], "print": [2, 8, 9, 10, 11, 12, 13, 16, 19, 24, 33, 51, 85, 87, 194, 196], "dim": [2, 3], "ligand": [2, 67], "compon": [2, 13, 30, 52, 54, 56, 57, 63, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 88, 89, 91, 92, 93, 95, 96, 131, 135, 139, 140, 168, 170], "normal": [2, 3, 8, 18, 19, 23, 30, 54, 62, 72, 74, 75, 76, 83, 88, 134, 193], "aid": 2, "futur": [2, 23, 28, 29], "comparison": [2, 7, 112, 118], "correl": 2, "across": [2, 149], "must": [2, 9, 10, 23, 24, 31, 32, 33, 47, 48, 50, 57, 63, 95, 96, 101, 111, 112, 113, 115, 118, 119, 133, 134, 136, 137, 138, 146, 147, 149, 150, 151, 170, 172], "preprocess": [2, 12], "readi": [2, 28], "factor": [2, 3, 4, 6, 8, 9, 10, 11, 14, 15, 30, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 114, 123, 124, 125, 126, 127, 132, 134, 135, 137, 138, 139, 140, 157, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 193, 194, 196], "few": [2, 8, 9], "miss": [2, 54, 55, 56, 58, 70, 72, 74, 88, 90, 93, 163, 166, 189, 192], "valu": [2, 8, 9, 10, 12, 22, 23, 29, 30, 31, 32, 33, 34, 35, 48, 52, 54, 55, 56, 58, 59, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 93, 97, 98, 99, 103, 106, 107, 111, 112, 113, 115, 116, 117, 118, 122, 131, 133, 134, 140, 141, 142, 143, 146, 147, 148, 149, 151, 163, 164, 166, 186, 187, 188, 189, 191, 192, 196], "so": [2, 10, 11, 12, 23, 29, 30, 63, 76, 114, 132, 134, 149, 166, 170, 176, 191, 194, 196], "gener": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 23, 24, 28, 33, 51, 71, 94, 123, 124, 134, 135, 136, 137, 138, 139, 148, 151, 153, 161, 193, 194], "mask": [2, 47, 52, 54, 55, 56, 58, 64, 70, 72, 74, 82, 84, 88, 90, 93, 109, 157, 163, 166, 189, 194], "mark": 2, "where": [2, 10, 11, 12, 29, 30, 31, 32, 33, 36, 47, 48, 54, 55, 56, 58, 62, 64, 65, 66, 72, 74, 75, 76, 83, 88, 90, 93, 101, 103, 110, 112, 113, 118, 123, 124, 125, 126, 127, 131, 133, 134, 136, 140, 146, 148, 149, 151, 152, 157, 158, 166, 172, 189, 194], "tensor_mask": 2, "isfinit": [2, 3], "ve": 2, "finit": [2, 8], "regener": 2, "without": [2, 7, 30, 76, 85, 87, 91, 96, 101, 131, 143, 176, 193, 194], "response_data_fin": 2, "nan_to_num": [2, 3], "decompos": [2, 9, 10, 11, 51, 55, 56, 57, 58, 72, 73, 74, 75, 76, 79, 80, 81, 82, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 135, 136, 137, 138, 139, 189, 191, 193, 194, 196], "three": [2, 11, 18, 19, 24, 68, 170, 186], "also": [2, 3, 9, 10, 12, 13, 22, 23, 28, 29, 33, 40, 54, 55, 58, 72, 74, 81, 88, 90, 94, 98, 115, 119, 131, 133, 151, 176, 189, 191, 193, 194, 195, 196, 197], "easier": 2, "made": [2, 27, 110, 134], "between": [2, 3, 9, 10, 12, 22, 33, 85, 87, 114, 115, 116, 117, 140, 156, 167], "mean": [2, 9, 10, 11, 23, 59, 115, 116, 117, 133, 143, 151, 185, 188, 191, 193, 196], "magnitud": 2, "sig_tensor_fact": 2, "init": [2, 4, 9, 30, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 189, 191, 194], "random": [2, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 23, 30, 45, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 131, 134, 148, 150, 189, 191, 192, 194], "rank": [2, 3, 4, 7, 8, 9, 10, 13, 18, 19, 23, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 114, 123, 124, 125, 126, 127, 131, 135, 136, 137, 138, 139, 140, 141, 142, 147, 157, 166, 168, 176, 189, 191, 193, 194, 196, 197], "n_iter_max": [2, 3, 7, 10, 11, 12, 18, 19, 30, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 140, 141, 142, 189], "5000": 2, "tol": [2, 3, 4, 7, 10, 11, 18, 19, 30, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 114, 140, 141, 142, 189], "1e": [2, 3, 10, 11, 12, 30, 52, 54, 56, 72, 74, 75, 76, 77, 83, 84, 85, 87, 88, 92, 93, 140, 141, 142], "9": [2, 3, 7, 8, 11, 12, 16, 68, 80, 99, 100, 111, 113, 131, 134, 148, 149, 163, 170, 186, 194, 195], "random_st": [2, 4, 7, 11, 12, 30, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 135, 136, 137, 138, 139, 140, 141, 142, 189], "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 21, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 103, 106, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 130, 131, 133, 134, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 157, 158, 159, 163, 166, 168, 170, 172, 173, 175, 176, 179, 180, 181, 186, 187, 188, 189, 193, 194, 195, 196, 197], "name": [2, 22, 24, 36, 105, 115, 144, 148, 152, 154, 165, 193], "thei": [2, 9, 29, 111, 148, 170, 191, 196], "ar": [2, 3, 8, 9, 10, 11, 12, 13, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 40, 47, 54, 55, 56, 58, 59, 62, 63, 64, 70, 71, 72, 74, 75, 76, 83, 87, 88, 90, 93, 100, 101, 103, 110, 111, 112, 113, 114, 118, 122, 123, 124, 125, 126, 127, 133, 134, 147, 148, 149, 150, 151, 160, 163, 166, 170, 172, 181, 182, 183, 186, 187, 189, 191, 193, 194, 196], "origin": [2, 4, 9, 10, 11, 12, 16, 18, 19, 31, 37, 38, 41, 48, 70, 114, 119, 128, 129, 130, 132, 143, 146, 149, 162, 172, 194, 196], "refer": [2, 13, 25, 30, 32, 33, 50, 51, 52, 53, 54, 58, 59, 63, 67, 68, 69, 70, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 92, 97, 98, 103, 113, 122, 130, 131, 133, 140, 143, 147, 148, 149, 151, 157, 158, 187, 189, 191, 192, 193], "specif": [2, 3, 9, 10, 12, 22, 23, 29, 67, 101, 133], "amino": 2, "acid": 2, "sequenc": [2, 9, 10, 47, 51, 79, 81, 97, 98, 119, 122, 150, 170, 188], "well": [2, 3, 11, 12, 22, 23, 70, 112, 118, 133, 147, 193], "valenc": 2, "format": [2, 9, 10, 16, 18, 19, 23, 24, 29, 67, 68, 80, 99, 138, 173, 174, 175, 177, 178, 179, 193], "monoval": 2, "bival": [2, 67], "final": [2, 11, 12, 23, 64, 131, 195], "label": [2, 3, 7, 11, 18, 19, 140, 141, 142, 197], "plot": [2, 3, 4, 8, 9, 10, 11, 12, 13, 18, 19, 31], "analyz": 2, "f": [2, 3, 9, 10, 11, 12, 13, 30, 59, 69, 76, 85, 103, 122, 143, 168, 187, 188, 196], "ax": [2, 3, 4, 7, 11, 13, 18, 19, 32, 34, 35, 101, 111, 112, 113, 118, 119, 133, 134, 147, 151, 170, 172], "subplot": [2, 3, 11, 13], "figsiz": [2, 3, 11], "5": [2, 3, 4, 8, 10, 11, 12, 13, 16, 18, 19, 30, 32, 33, 34, 47, 51, 54, 55, 56, 72, 76, 81, 88, 90, 93, 98, 100, 101, 106, 107, 110, 111, 112, 113, 118, 119, 122, 133, 143, 145, 146, 147, 150, 151, 163, 166, 170, 172, 186, 187, 188, 191, 193, 194, 195], "width": 2, "25": [2, 4, 8, 9, 18, 19, 51], "lig_fac": 2, "x_lig": 2, "arang": [2, 3, 9, 16, 34, 35, 47, 51, 100, 101, 110, 111, 112, 118, 143, 170, 186, 188, 194, 195], "len": [2, 3, 11, 18, 19, 50, 53, 55, 58, 82, 86, 87, 90, 94, 112, 118, 137, 138, 145, 157, 189, 196], "lig_rects_comp1": 2, "bar": 2, "lig_rects_comp2": 2, "lig_rects_comp3": 2, "set": [2, 9, 11, 12, 22, 31, 32, 34, 35, 36, 40, 48, 59, 69, 85, 87, 94, 112, 113, 118, 122, 131, 133, 140, 141, 142, 144, 146, 149, 151, 152, 165, 187, 188, 191, 192, 193, 194], "xlabel": [2, 3], "ylabel": [2, 3], "weight": [2, 3, 4, 9, 11, 13, 18, 19, 30, 52, 54, 57, 62, 64, 65, 66, 72, 73, 74, 75, 76, 78, 83, 84, 85, 88, 89, 95, 109, 113, 123, 124, 125, 126, 127, 140, 141, 142, 157, 197], "ylim": 2, "set_xtick": [2, 3, 11], "set_xticklabel": [2, 3], "get_xticklabel": 2, "rotat": 2, "60": [2, 170, 186], "right": [2, 10, 11, 12, 30, 51, 76, 101, 131, 157, 158, 166, 195], "fontsiz": [2, 11], "legend": [2, 7, 8, 9, 10, 11], "cell_fac": 2, "x_cell": 2, "cell_rects_comp1": 2, "cell_rects_comp2": 2, "cell_rects_comp3": 2, "45": 2, "tight_layout": [2, 4, 11], "show": [2, 4, 7, 8, 9, 11, 13, 18, 19, 23, 27, 31], "observ": [2, 13, 50, 197], "both": [2, 3, 7, 8, 9, 10, 12, 23, 27, 30, 67, 76, 101, 111, 134, 143, 148, 170, 186, 194, 196, 197], "interepret": 2, "look": [2, 3, 9, 10, 11, 24, 28], "pattern": [2, 3, 18, 19, 53, 86], "among": [2, 13, 30, 76, 114], "higher": [2, 10, 55, 58, 82, 87, 90, 113, 114, 151, 155, 189], "two": [2, 3, 10, 11, 13, 22, 33, 87, 101, 110, 111, 112, 114, 115, 116, 117, 118, 119, 133, 153, 161, 167, 170, 194, 196], "infer": [2, 33, 143], "than": [2, 9, 10, 30, 33, 51, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 112, 118, 131, 133, 134, 146, 148, 150, 151, 166, 170, 189, 194, 195, 196], "relationship": 2, "strengthen": 2, "avail": [2, 9, 10, 23, 69, 134, 148, 196, 197], "one": [2, 3, 11, 13, 23, 24, 29, 30, 32, 34, 35, 41, 47, 50, 57, 60, 73, 76, 78, 85, 89, 94, 95, 103, 112, 113, 115, 118, 133, 144, 146, 150, 151, 157, 159, 160, 163, 165, 170, 180, 187, 191, 193, 194, 195, 196], "subunit": 2, "just": [2, 11, 12, 27, 128, 130, 134, 160, 191], "By": [2, 12, 34, 35, 112, 113, 118, 133, 193], "could": [2, 8, 9, 10, 12, 29, 69, 168], "addition": [2, 9, 22, 56, 93, 197], "dynam": [2, 22, 184, 185, 191, 193], "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 190], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "716": [2, 5, 190], "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 29, 30, 76, 101, 110, 111, 112, 114, 118, 124, 136, 148, 170, 196], "jupyt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19], "notebook": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19], "plot_il2": [2, 5, 190], "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "sourc": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 27, 30, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114, 115, 116, 117, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 24, 190], "galleri": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 24, 190], "sphinx": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 24], "sphinx_gallery_thumbnail_numb": 3, "extrem": 3, "reduct": [3, 32, 140], "u": [3, 9, 23, 27, 28, 62, 64, 65, 66, 85, 87, 131, 166, 191], "develop": [3, 23, 27, 28], "model": [3, 9, 11, 12, 23, 30, 54, 70, 72, 74, 76, 88, 131, 132, 136, 140, 141, 142, 197], "compact": 3, "while": [3, 8, 9, 10, 24, 28, 29, 33, 39, 40, 51, 62, 66, 85, 133, 148, 151, 191, 196], "retain": [3, 31, 48, 146, 148, 149], "crucial": 3, "subject": [3, 56, 93], "biomed": 3, "research": [3, 27, 69], "new": [3, 9, 22, 23, 28, 29, 32, 33, 34, 35, 47, 59, 103, 111, 112, 113, 118, 119, 122, 133, 134, 140, 141, 142, 143, 147, 148, 150, 151, 172, 187, 188, 191, 193, 194], "technologi": 3, "examin": 3, "antibodi": 3, "patient": 3, "serum": 3, "comprehens": 3, "profil": 3, "fc": [3, 67], "alongsid": [3, 166], "other": [3, 8, 13, 22, 23, 29, 30, 31, 33, 37, 48, 63, 64, 85, 111, 114, 119, 133, 134, 146, 148, 149, 151, 191, 193, 194, 196], "immunolog": 3, "demograph": 3, "438": 3, "sampl": [3, 18, 19, 40, 51, 68, 77, 92, 94, 140, 141, 142, 192, 197], "collect": [3, 67], "were": [3, 47, 67, 111, 134, 150, 194], "systemat": 3, "behavior": [3, 111, 112, 118], "sar": [3, 68], "cov": [3, 68], "viru": 3, "antigen": [3, 68], "statu": 3, "detail": [3, 24, 32, 100, 112, 113, 118, 133, 147, 148, 151, 157, 158, 196, 197], "depth": [3, 47], "implic": 3, "found": [3, 11, 54, 72, 74, 75, 83, 88, 131], "hiv": 3, "predict": [3, 116, 117, 140, 141, 142, 193, 197], "panel": 3, "tl": [3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 36, 50, 51, 57, 58, 60, 61, 73, 78, 80, 89, 91, 95, 96, 99, 121, 128, 130, 132, 152, 163, 167, 168, 180, 181, 182, 183, 189, 191, 193, 195, 196], "data_import": 3, "load_covid19_serologi": 3, "cm": [3, 18, 19], "scalarmapp": 3, "comp": 3, "7": [3, 6, 11, 12, 14, 15, 16, 18, 19, 22, 32, 33, 100, 110, 111, 112, 113, 118, 133, 148, 151, 170, 186, 190, 194, 195, 196], "cmtffac": 3, "cc": 3, "10": [3, 4, 7, 8, 9, 10, 11, 12, 16, 23, 28, 31, 34, 35, 53, 57, 59, 69, 73, 75, 78, 83, 86, 89, 91, 95, 96, 110, 111, 112, 113, 114, 118, 131, 133, 150, 151, 186, 191, 193, 194, 195, 196], "1000": [3, 10, 12, 18, 19, 30, 76, 194], "linesearch": [3, 7, 30, 54, 72, 76, 88], "true": [3, 7, 8, 9, 10, 11, 12, 13, 30, 31, 32, 34, 35, 36, 40, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 110, 111, 112, 113, 115, 118, 123, 124, 133, 134, 135, 136, 137, 138, 139, 146, 147, 149, 151, 152, 158, 159, 160, 166, 168, 170, 176, 181, 182, 183, 186, 188, 189, 193, 194], "orthogonalis": [3, 54, 72, 88], "evalu": [3, 11, 32, 51, 170], "explain": [3, 11], "varianc": 3, "percent": 3, "reconstruct": [3, 4, 9, 11, 12, 30, 50, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 176, 189, 191, 196], "r2x": 3, "rang": [3, 8, 11, 12, 13, 16, 33, 38, 40, 43, 150, 157, 168, 170, 172], "def": [3, 4, 9, 10, 12, 23, 24, 183, 191], "reconstructed_vari": 3, "tfac": 3, "tin": 3, "none": [3, 11, 30, 31, 32, 33, 34, 35, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 64, 71, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 101, 103, 106, 109, 111, 112, 113, 116, 117, 118, 121, 122, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 146, 148, 149, 150, 151, 156, 157, 158, 160, 166, 168, 169, 172, 181, 182, 183, 187, 188, 189], "function": [3, 4, 8, 9, 10, 11, 13, 23, 25, 27, 30, 31, 33, 45, 47, 52, 54, 55, 58, 59, 68, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 100, 103, 110, 111, 112, 118, 124, 131, 134, 146, 147, 149, 151, 166, 184, 185, 186, 189, 192, 193, 194, 195, 196], "calcul": [3, 7, 9, 10, 11, 31, 87, 131, 133, 140, 149], "captur": 3, "tmask": 3, "vtop": 3, "sum": [3, 8, 11, 13, 30, 54, 56, 63, 64, 72, 74, 76, 88, 93, 100, 101, 111, 113, 170, 196], "squar": [3, 8, 9, 10, 30, 51, 54, 70, 72, 74, 75, 76, 83, 85, 87, 88, 116, 117, 134, 140, 147, 149], "cp_to_tensor": [3, 4, 7, 9, 54, 61, 72, 74, 88, 194, 196], "vbottom": 3, "return": [3, 4, 10, 12, 13, 24, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 196], "fig1": 3, "figur": [3, 4, 7, 8, 9, 10, 11, 18, 19], "cmtfr2x": 3, "arrai": [3, 10, 11, 13, 16, 30, 31, 32, 33, 34, 35, 42, 44, 47, 48, 51, 54, 55, 56, 58, 59, 60, 71, 72, 74, 75, 76, 83, 85, 87, 88, 90, 93, 100, 101, 103, 106, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 157, 159, 163, 166, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 193, 194, 195], "bo": 3, "number": [3, 10, 11, 12, 13, 27, 30, 31, 32, 33, 38, 39, 40, 41, 48, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 103, 110, 113, 131, 134, 140, 141, 142, 146, 148, 149, 151, 157, 166, 172, 188, 189, 191, 194, 196, 197], "gca": 3, "set_xlim": [3, 11], "amax": [3, 34, 35, 118], "set_ylim": 3, "eventu": 3, "wish": [3, 11, 22, 100], "bring": 3, "case": [3, 9, 10, 12, 29, 32, 33, 34, 35, 47, 62, 103, 110, 122, 131, 133, 134, 143, 148, 151, 160, 170, 181, 182, 183, 186, 187, 192, 193, 194, 196], "reveal": 3, "trend": [3, 131], "level": [3, 22, 30, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 141, 142, 189], "ensur": [3, 22, 23, 33, 59, 103, 122, 187], "most": [3, 8, 9, 10, 23, 111, 114], "direct": [3, 8, 9, 10, 11, 30, 75, 76, 83, 140], "fig2": 3, "16": [3, 8, 11, 14, 16, 111, 114, 133, 190, 194, 195, 196], "6": [3, 4, 6, 8, 10, 11, 12, 14, 15, 16, 27, 30, 33, 34, 35, 47, 50, 54, 68, 69, 72, 74, 75, 76, 83, 88, 100, 101, 110, 112, 118, 134, 143, 145, 150, 151, 170, 186, 188, 190, 194, 195], "ii": [3, 7], "fac": [3, 7], "scale": [3, 18, 19, 110, 114, 134, 148], "linalg": [3, 11, 101, 111, 134, 147, 194], "norm": [3, 7, 8, 11, 12, 22, 30, 52, 53, 54, 61, 72, 74, 75, 76, 83, 84, 85, 86, 87, 88, 191], "ord": [3, 168], "inf": [3, 11, 12, 149], "axi": [3, 11, 32, 34, 35, 47, 101, 111, 112, 113, 116, 117, 118, 121, 133, 143, 148, 150, 151, 168, 170, 172, 195], "imshow": [3, 4, 18, 19, 31], "cmap": [3, 18, 19, 31], "piyg": 3, "vmin": 3, "vmax": 3, "set_ytick": 3, "set_yticklabel": 3, "els": [3, 54, 55, 56, 58, 72, 74, 88, 90, 93, 146, 166, 168, 186, 189], "set_titl": [3, 4, 11, 13, 18, 19], "set_aspect": 3, "auto": [3, 128, 130], "colorbar": 3, "object": [3, 11, 22, 23, 32, 33, 47, 59, 103, 122, 134, 143, 170, 187, 193, 194, 197], "0x7f20056a1ea0": 3, "separ": [3, 11, 192], "distinct": [3, 194], "clear": [3, 59], "acut": 3, "igg3": 3, "igm": 3, "iga": 3, "long": [3, 12, 170], "term": [3, 8], "igg1": 3, "symptom": 3, "distinguish": 3, "indic": [3, 23, 29, 34, 35, 51, 53, 58, 63, 82, 85, 86, 87, 94, 106, 107, 112, 114, 118, 146, 172, 189], "great": 3, "tool": 3, "find": [3, 8, 11, 13, 51, 115, 128, 148, 197], "signific": [3, 151], "tan": [3, 68], "z": [3, 32, 59, 68], "c": [3, 9, 10, 11, 28, 30, 59, 67, 68, 69, 76, 101, 103, 110, 111, 122, 123, 124, 125, 126, 127, 143, 170, 186, 187, 188], "murphi": [3, 68], "m": [3, 30, 59, 67, 68, 69, 70, 76, 87, 94, 101, 103, 111, 113, 134, 147, 157, 158, 195], "alpai": [3, 68], "h": [3, 30, 68, 76, 134], "d": [3, 8, 30, 47, 56, 57, 68, 69, 73, 75, 78, 83, 89, 93, 95, 100, 101, 103, 110, 111, 143, 145, 151, 166, 170, 172, 174, 175, 178, 179, 186, 196], "A": [3, 4, 8, 10, 11, 16, 22, 27, 29, 30, 31, 32, 48, 50, 51, 52, 54, 56, 59, 61, 67, 68, 69, 72, 74, 75, 76, 77, 83, 84, 85, 87, 88, 91, 92, 93, 96, 111, 114, 123, 124, 125, 126, 127, 130, 132, 134, 136, 143, 146, 148, 149, 157, 166, 170, 172, 188, 191, 193, 194, 195, 196], "2021": [3, 30, 67, 68], "improv": [3, 28, 68, 151], "molecular": [3, 68], "biologi": [3, 68], "17": [3, 8, 16, 68, 112, 118, 133, 148, 151, 188, 194, 195, 196], "e10243": [3, 68], "http": [3, 9, 10, 27, 28, 69, 70, 114, 134], "www": [3, 69], "embopress": 3, "org": [3, 27, 114, 134], "doi": [3, 69, 114, 131], "15252": 3, "msb": 3, "202110243": 3, "zohar": [3, 68], "loo": [3, 68], "fisching": [3, 68], "atyeo": [3, 68], "wang": [3, 50, 68], "slein": [3, 68], "g": [3, 10, 22, 23, 29, 32, 54, 58, 64, 68, 72, 74, 75, 77, 80, 82, 83, 87, 88, 92, 99, 106, 122, 130, 147, 157, 158, 172, 187, 189, 191, 193, 195, 196], "2020": [3, 68], "compromis": [3, 68], "humor": [3, 68], "evolut": [3, 13, 68], "track": [3, 68], "mortal": [3, 68], "183": [3, 68], "1508": [3, 68], "1519": [3, 68], "sciencedirect": 3, "com": [3, 28, 70], "scienc": 3, "articl": [3, 9, 10, 27], "pii": 3, "s0092867420314598": 3, "724": [3, 5, 190], "plot_covid": [3, 5, 190], "tucker": [4, 6, 11, 14, 15, 17, 20, 53, 55, 86, 87, 90, 115, 139, 142, 180, 181, 182, 183, 190, 191, 192, 193, 197], "home": 4, "runner": 4, "applic": [4, 5, 9, 29, 30, 51, 52, 54, 58, 69, 72, 74, 75, 82, 83, 84, 87, 88, 147, 157, 158, 189, 190, 195, 196], "plot_image_compress": [4, 5, 190], "21": [4, 8, 9, 10, 16, 194, 195, 197], "deprecationwarn": 4, "misc": 4, "face": 4, "deprec": [4, 134], "v1": [4, 11], "complet": [4, 29, 134, 193], "remov": [4, 12, 34, 35, 54, 72, 74, 88, 111, 133, 151], "move": [4, 119, 172], "modul": [4, 22, 25, 29, 47, 191, 193, 197], "instead": [4, 11, 23, 29, 32, 47, 101, 111, 112, 113, 118, 124, 133, 148, 151, 193, 194, 195], "22": [4, 8, 16, 34, 35, 147, 194, 195], "zoom": 4, "dtype": [4, 9, 10, 29, 31, 32, 33, 34, 35, 47, 48, 59, 101, 102, 103, 104, 111, 112, 113, 118, 122, 133, 145, 146, 148, 149, 150, 151, 169, 170, 187, 188, 191, 194], "float64": [4, 22, 29, 113, 122, 151, 187, 194], "ndimag": 4, "math": [4, 151], "ceil": [4, 33], "12345": 4, "to_imag": 4, "conveni": [4, 22, 23, 29, 106, 128, 130], "convert": [4, 24, 29, 32, 34, 35, 66, 166, 172, 181, 182, 183], "float": [4, 10, 12, 30, 32, 33, 51, 52, 54, 55, 56, 58, 71, 72, 74, 75, 76, 77, 80, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 99, 102, 103, 104, 112, 113, 114, 115, 116, 117, 118, 121, 131, 134, 140, 141, 142, 148, 151, 156, 163, 164, 187, 188, 189, 194], "back": [4, 44, 131, 143, 191, 195], "uint8": [4, 133], "im": 4, "to_numpi": [4, 18, 19], "min": [4, 23, 35, 114, 134, 191], "max": [4, 34, 114, 118, 163, 191, 193], "255": 4, "astyp": 4, "cp_rank": 4, "tucker_rank": 4, "100": [4, 10, 18, 19, 30, 51, 52, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 93, 110, 140, 141, 142, 189, 194], "10e": [4, 18, 19, 56, 93, 196], "cp_reconstruct": 4, "core": [4, 10, 22, 27, 51, 53, 55, 58, 60, 61, 82, 86, 87, 90, 128, 130, 139, 142, 173, 177, 180, 181, 182, 183, 189, 193, 196], "tucker_factor": 4, "tucker_reconstruct": 4, "tucker_to_tensor": [4, 10, 196], "fig": [4, 7, 8, 9, 10, 11, 13, 18, 19], "add_subplot": [4, 7, 18, 19], "set_axis_off": [4, 18, 19], "334": [4, 5, 190], "00": [5, 14, 20, 21, 190, 196], "11": [5, 8, 12, 16, 34, 35, 113, 119, 186, 194, 195], "775": 5, "execut": [5, 14, 20, 21, 22, 24, 27, 29, 67, 190, 191, 193], "file": [5, 14, 20, 21, 24, 190], "auto_exampl": [5, 14, 20, 21], "mem": [5, 14, 20, 21, 190], "mb": [5, 14, 20, 21, 190], "06": [5, 8, 14, 20, 52, 56, 75, 83, 84, 93, 141, 142, 190], "03": [5, 8, 190], "01": [5, 8, 14, 20, 190], "permut": [6, 11, 14, 15, 63, 114, 115, 119, 172, 190], "line": [6, 14, 15, 24, 30, 54, 72, 88, 190], "search": [6, 12, 14, 15, 30, 54, 72, 88, 190], "constrain": [6, 14, 15, 30, 69, 75, 76, 83, 131, 190], "demonstr": [6, 14, 15, 67, 190, 196], "parafac2": [6, 14, 15, 123, 124, 125, 126, 127, 131, 132, 136, 190], "speed": [6, 9, 10, 14, 15, 131, 148, 151, 190], "up": [6, 14, 15, 131, 148, 190, 194], "svd": [6, 14, 15, 29, 30, 50, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 97, 98, 99, 131, 132, 162, 163, 166, 189, 190, 194, 196], "acceler": [7, 9, 10, 30, 85], "converg": [7, 9, 10, 30, 51, 56, 76, 93, 140, 141, 142], "random_cp": [7, 13, 193], "logspac": 7, "err": [7, 11, 12], "empty_lik": [7, 188], "err_l": 7, "tt": [7, 50, 51, 80, 81, 98, 99, 137, 138, 173, 174, 175, 177, 178, 179, 193, 196], "tt_l": 7, "1234": 7, "get": [7, 11, 12, 23, 27, 102, 104, 131, 132, 191, 193], "high": [7, 10, 50, 51, 85, 87, 196], "accuraci": [7, 51], "2000000": 7, "0e": 7, "15": [7, 8, 11, 12, 13, 16, 34, 35, 112, 113, 118, 133, 148, 151, 194, 195], "err_min": 7, "toll": 7, "enumer": [7, 12, 18, 19, 168], "start": [7, 11, 12, 27, 28, 31, 33, 38, 40, 43, 133, 151, 192, 195], "fals": [7, 30, 31, 32, 36, 40, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 112, 113, 118, 133, 135, 136, 137, 138, 139, 140, 144, 146, 149, 151, 152, 158, 159, 160, 165, 166, 176, 180, 181, 182, 183, 186, 189, 194], "fit_transform": [7, 72, 73, 74, 75, 76, 140, 191], "fac_l": 7, "error": [7, 9, 10, 11, 12, 29, 30, 50, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 111, 116, 117, 133, 151, 189, 191, 193], "loglog": 7, "No": [7, 134], "r": [7, 11, 12, 30, 50, 54, 62, 64, 65, 66, 70, 72, 74, 76, 88, 123, 124, 125, 126, 127, 134, 140, 148, 157, 168, 195, 196, 197], "set_ylabel": [7, 11], "set_xlabel": [7, 11], "420": [7, 14, 190], "plot_cp_line_search": [7, 14, 190], "On": [8, 13, 51, 148, 192], "sinc": [8, 9, 10, 11, 12, 23, 51, 124, 131], "version": [8, 9, 10, 11, 28, 30, 32, 33, 34, 35, 47, 59, 64, 76, 100, 103, 111, 112, 113, 118, 119, 122, 131, 133, 134, 147, 148, 149, 150, 151, 187, 188, 193, 194, 196], "penal": [8, 75, 83], "chosen": [8, 148, 186], "user": [8, 9, 10, 23, 27, 29, 75, 83, 103, 148, 191], "propos": [8, 10, 30, 54, 72, 88], "implement": [8, 10, 22, 29, 30, 32, 33, 64, 111, 112, 113, 114, 118, 131, 132, 133, 148, 151, 157, 191, 192, 193, 194, 197], "altern": [8, 9, 10, 30, 32, 51, 54, 64, 72, 74, 75, 76, 83, 85, 88, 111, 112, 113, 118, 123, 124, 125, 126, 127, 133, 146, 151, 191], "optim": [8, 11, 27, 29, 50, 75, 83, 101, 111, 115, 128, 130, 191], "multipli": [8, 12, 60, 75, 83, 101, 111, 131, 132, 133, 134, 159, 168, 180], "ao": [8, 75, 83], "admm": [8, 75, 83], "solv": [8, 10, 56, 75, 83, 87, 93, 131, 134, 194], "convex": 8, "problem": [8, 10, 56, 87, 93, 134, 196], "primal": 8, "dual": 8, "auxilliari": [8, 75, 83], "introduc": [8, 29, 75, 83, 111], "regular": [8, 75, 83], "oper": [8, 15, 21, 22, 27, 101, 111, 112, 118, 128, 130, 162, 163, 164, 190, 193], "call": [8, 9, 10, 13, 22, 23, 24, 29, 33, 34, 35, 60, 75, 83, 111, 114, 134, 159, 180, 185, 186, 191, 193, 195, 196], "proxim": 8, "chang": [8, 23, 29, 30, 48, 59, 76, 143, 144, 148, 165, 176, 184, 185, 192, 193], "accord": [8, 9, 10, 75, 83, 148], "select": [8, 12, 112, 114, 118, 133, 148, 193, 194], "sever": [8, 9, 10, 24, 27, 29, 60, 159, 160, 180, 191, 193], "correspond": [8, 22, 34, 35, 47, 57, 73, 78, 89, 95, 112, 118, 145, 157, 170, 172, 173, 177, 193, 197], "appli": [8, 23, 34, 35, 64, 75, 83, 115, 117, 140, 147, 162, 163, 164, 166, 170, 194, 196], "non_neg": [8, 9, 75, 82, 83, 139, 166], "signatur": [8, 22, 31, 48, 111, 146, 149], "prevent": 8, "l1": [8, 75, 83], "l1_reg": [8, 75, 83], "add": [8, 11, 23, 29, 151, 193], "cost": [8, 85, 87], "promot": [8, 111], "sparsiti": [8, 54, 72, 74, 85, 87, 88], "choos": [8, 9, 11, 51, 148, 186, 194], "l2": [8, 61, 75, 83], "l2_reg": [8, 54, 72, 75, 83, 88], "l2_square_reg": [8, 75, 83], "unimod": [8, 75, 83], "columnwis": [8, 87], "impos": [8, 30, 75, 76, 83, 85, 87, 197], "column": [8, 13, 47, 51, 57, 62, 63, 64, 65, 66, 73, 75, 78, 83, 85, 89, 94, 95, 103, 114, 115, 122, 131, 134, 147, 157, 172, 187], "local": [8, 11, 12, 22, 75, 83], "maximum": [8, 30, 34, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 97, 98, 112, 118, 131, 140, 141, 142, 189], "gaussian": 8, "simplex": [8, 75, 83], "live": 8, "defin": [8, 22, 30, 33, 75, 76, 83, 87, 103, 115, 122, 148, 175, 179, 187, 188, 195], "radiu": 8, "entri": [8, 9, 10, 30, 51, 76, 123, 124, 125, 126, 127, 196], "nonneg": [8, 9, 10, 85], "posit": [8, 32, 33, 52, 53, 77, 84, 85, 86, 87, 92, 103, 119, 149, 172], "paramet": [8, 11, 18, 19, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 193, 194, 197], "largest": 8, "absolut": [8, 30, 31, 75, 76, 83, 115], "elementwis": 8, "normalized_spars": [8, 75, 83], "k": [8, 11, 12, 30, 31, 48, 51, 59, 60, 65, 70, 76, 79, 81, 97, 98, 100, 101, 103, 110, 111, 123, 124, 125, 126, 127, 134, 146, 147, 149, 157, 158, 159, 168, 170, 173, 180, 188, 195], "spars": [8, 72, 74, 88, 90, 93, 189, 192, 193], "nonzero": [8, 30, 76, 123, 124, 125, 126, 127, 131, 186], "per": [8, 9, 10, 77, 92, 160, 163], "soft": [8, 163], "soft_spars": [8, 75, 83], "bound": [8, 75, 83], "threshold": [8, 10, 12, 51, 75, 83, 114, 131, 162, 163, 164], "smooth": [8, 75, 83], "favor": 8, "fact": [8, 9, 23, 61, 65], "band": [8, 69, 75, 83], "monoton": [8, 12, 75, 83], "alwai": [8, 23, 134, 143, 151, 193, 195], "base": [8, 9, 18, 19, 22, 23, 24, 51, 59, 188, 195, 196], "isoton": 8, "regress": [8, 9, 10, 20, 27, 70, 71, 190, 192], "hard": [8, 75, 83], "hard_spars": [8, 75, 83], "requir": [8, 9, 22, 23, 149, 191, 194], "boolean": [8, 32, 53, 54, 55, 56, 58, 72, 74, 79, 80, 81, 82, 85, 86, 87, 88, 90, 93, 97, 98, 99, 166, 189, 194], "enough": [8, 111, 148], "support": [8, 11, 22, 23, 27, 29, 33, 56, 93, 103, 122, 187, 191, 193, 194], "constrained_parafac": 8, "set_printopt": 8, "precis": [8, 30, 33, 76, 85, 87, 113, 114, 133, 151], "rand": 8, "itself": [8, 69, 194], "tenalg": [8, 24, 55, 90, 128, 130, 193], "validate_constraint": 8, "process": [8, 9, 10, 12, 75, 83, 197], "If": [8, 11, 12, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 48, 54, 59, 72, 74, 75, 76, 83, 85, 87, 88, 94, 100, 101, 103, 110, 111, 112, 113, 115, 118, 121, 122, 131, 133, 134, 143, 144, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 163, 165, 166, 170, 172, 186, 187, 188, 191], "want": [8, 12, 23, 24, 28, 29, 191, 193, 197], "same": [8, 9, 10, 11, 30, 32, 34, 35, 47, 48, 51, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 72, 74, 76, 79, 80, 81, 82, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 101, 110, 111, 112, 113, 114, 115, 118, 119, 123, 124, 125, 126, 127, 133, 134, 139, 140, 143, 148, 149, 150, 151, 157, 162, 166, 168, 170, 172, 183, 188, 189, 191, 193, 194, 196], "bool": [8, 30, 32, 34, 35, 36, 40, 50, 54, 56, 57, 59, 72, 73, 74, 75, 76, 78, 82, 83, 88, 89, 91, 92, 93, 94, 95, 96, 112, 113, 115, 118, 133, 135, 136, 137, 138, 139, 140, 144, 151, 152, 158, 159, 160, 165, 166, 176, 181, 182, 183, 186, 188], "should": [8, 10, 12, 13, 22, 23, 24, 29, 33, 34, 35, 53, 54, 55, 56, 58, 64, 72, 74, 80, 82, 85, 86, 87, 88, 90, 93, 99, 103, 107, 119, 131, 134, 143, 160, 166, 170, 176, 181, 182, 183, 186, 189, 191, 193, 194], "assum": [8, 110, 160, 191], "doe": [8, 11, 32, 33, 111, 112, 113, 118, 133, 134, 148, 151, 172, 194], "write": [8, 25, 27, 28, 29, 65, 100, 143, 191, 193], "_": [8, 10, 11, 30, 56, 76, 93, 150, 195], "loc": [8, 9, 10, 11, 18, 19], "upper": [8, 9, 10, 11, 100, 103, 134], "left": [8, 9, 11, 12, 30, 32, 34, 35, 51, 76, 112, 113, 118, 131, 132, 133, 151, 157, 158, 166, 195], "similarli": [8, 24, 29, 191], "05": [8, 20, 190], "coeffici": [8, 9, 11, 85, 87, 115, 140, 147, 196], "induc": 8, "larg": [8, 12, 33, 151, 194], "histogram": 8, "hist": 8, "flatten": [8, 34, 35, 40, 47, 100, 112, 113, 118, 148], "As": [8, 9, 10, 12, 13, 23, 196], "option": [8, 9, 10, 24, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 97, 98, 99, 100, 101, 103, 111, 112, 113, 114, 118, 122, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 157, 158, 160, 165, 166, 172, 181, 182, 183, 187, 188, 189], "dictionari": [8, 22, 75, 83, 140, 141, 142, 191], "n": [8, 9, 10, 11, 16, 19, 29, 30, 33, 34, 35, 37, 54, 56, 58, 60, 70, 72, 74, 75, 76, 82, 83, 85, 87, 88, 93, 101, 103, 110, 111, 131, 134, 140, 141, 142, 145, 148, 157, 158, 159, 160, 168, 170, 172, 180, 189, 193, 195, 196, 197], "49": [8, 51], "77": [8, 9], "79": [8, 24, 51], "95": 8, "33": [8, 9, 12, 81, 98], "65": 8, "37": 8, "23": [8, 16, 194, 195], "14": [8, 16, 34, 35, 103, 113, 194, 195], "42": [8, 9], "81": 8, "99": [8, 51], "47": [8, 9], "27": 8, "09": [8, 10, 14, 140, 190], "73": [8, 9], "34": [8, 12], "36": 8, "26": [8, 27, 130], "62": [8, 11], "57": 8, "28": 8, "59": [8, 131], "43": 8, "58": [8, 9, 14, 190], "last": [8, 10, 32, 33, 39, 50, 52, 54, 72, 74, 75, 80, 83, 84, 88, 99, 101, 111, 123, 124, 133, 143, 148, 150, 151, 156, 170, 191, 195], "One": [8, 9, 10, 24, 143, 196], "prefer": [8, 33, 59, 101, 186], "possibl": [8, 23, 31, 48, 59, 64, 101, 111, 114, 134, 143, 146, 149, 151, 172, 188, 191], "02": 8, "kei": [8, 22, 148], "86": [8, 9], "66": [8, 11], "38": [8, 14, 148], "96": 8, "72": 8, "20": [8, 9, 11, 16, 24, 27, 32, 33, 47, 71, 77, 92, 103, 110, 113, 122, 187, 194, 195], "74": [8, 51], "98": [8, 9, 111], "68": [8, 11, 50], "82": 8, "63": [8, 9], "53": 8, "39": [8, 10], "56": [8, 190], "76": [8, 9], "67": [8, 9, 69], "07": [8, 74, 85], "04": [8, 14, 190], "l_1": 8, "l_2": 8, "huang": [8, 75, 83], "kejun": [8, 75, 83], "nichola": [8, 75, 83], "sidiropoulo": [8, 75, 83], "athanasio": [8, 75, 83], "p": [8, 67, 70, 75, 83, 123, 124, 134, 172], "liava": [8, 75, 83], "effici": [8, 75, 83], "matrix": [8, 9, 10, 11, 29, 30, 41, 51, 54, 60, 64, 72, 74, 75, 76, 80, 83, 85, 88, 94, 99, 101, 111, 114, 115, 123, 124, 125, 126, 127, 131, 134, 136, 138, 140, 147, 155, 157, 158, 159, 160, 162, 164, 166, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 192, 193, 195], "ieee": [8, 50, 53, 75, 83, 86, 131, 197], "transact": [8, 50, 75, 83, 197], "64": [8, 11, 75, 83], "2016": [8, 75, 79, 83, 97], "5052": [8, 75, 83], "5065": [8, 75, 83], "onlin": [8, 11], "630": [8, 14, 190], "plot_guide_for_constrained_cp": [8, 14, 190], "comput": [9, 10, 12, 23, 29, 30, 52, 53, 54, 55, 58, 64, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 97, 98, 99, 110, 112, 113, 114, 115, 118, 121, 123, 124, 125, 126, 127, 131, 134, 147, 155, 166, 170, 174, 178, 189, 191, 196], "ncp": 9, "updat": [9, 10, 23, 28, 51, 52, 53, 64, 75, 82, 83, 84, 85, 86, 87, 106, 107], "mu": [9, 10, 56, 93], "alreadi": [9, 10, 22, 23, 27, 36, 148, 152, 191], "least": [9, 10, 30, 51, 54, 70, 72, 74, 76, 85, 87, 88, 112, 114, 118, 134, 140, 147, 191], "al": [9, 10, 11, 30, 54, 72, 74, 76, 77, 79, 85, 88, 92, 97, 114], "hierarch": [9, 10, 85], "constraint": [9, 10, 11, 30, 75, 76, 83, 85, 123, 124, 125, 126, 127, 131], "handl": [9, 10, 11, 33, 111, 149, 191, 193, 194], "expect": [9, 10, 11, 13, 23, 24, 32, 47, 112, 113, 118, 133, 151], "after": [9, 10, 11, 12, 13, 24, 75, 83, 111, 131, 185, 196], "obtain": [9, 10, 12, 22, 48, 91, 96, 114, 132, 183, 195, 196, 197], "non_negative_parafac_h": 9, "_cp": 9, "initialize_cp": 9, "cptensor": [9, 30, 54, 60, 61, 62, 64, 65, 66, 72, 73, 74, 75, 76, 83, 88], "copi": [9, 60, 100, 143, 148, 180], "deepcopi": [9, 59], "There": [9, 10, 13, 29, 64, 146, 191, 193], "wai": [9, 10, 22, 23, 29, 30, 54, 70, 72, 74, 88, 111, 170, 191, 193, 195, 196], "chose": [9, 10], "integ": [9, 10, 30, 33, 76, 85, 87, 113, 133, 143, 148, 151], "24000": 9, "reshap": [9, 11, 16, 34, 35, 51, 80, 99, 100, 101, 110, 111, 112, 118, 170, 188, 191, 194, 195], "30": [9, 10, 11, 12, 13], "40": [9, 10, 11, 13, 33], "float32": [9, 29, 113, 151, 191], "goal": [9, 191], "produc": [9, 33], "approxim": [9, 10, 50, 51, 54, 72, 74, 85, 87, 88, 131, 140, 166, 193, 196], "abov": [9, 13, 24, 30, 76, 100, 113, 123, 124, 125, 126, 127, 133, 134, 149, 194], "low": [9, 10, 56, 93, 114, 140, 141, 142, 166, 193], "befor": [9, 12, 13, 23, 24, 32, 37, 47, 112, 113, 115, 118, 133, 148, 151, 194, 196], "good": 9, "initi": [9, 11, 30, 51, 52, 54, 55, 56, 57, 72, 73, 74, 75, 76, 78, 83, 84, 88, 89, 90, 91, 93, 95, 96, 112, 118, 133, 151, 191], "guess": 9, "compar": [9, 10, 12, 13, 63, 112, 114, 118, 140, 148], "fair": 9, "idea": [9, 168, 196], "transform": [9, 140], "instanc": [9, 11, 23, 24, 29, 33, 40, 45, 104, 191, 193, 194, 195, 197], "class": [9, 24, 25, 27, 32, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 103, 106, 112, 113, 118, 133, 140, 141, 142, 144, 151, 165, 188], "weights_init": 9, "factors_init": 9, "cp_init": 9, "let": [9, 23, 27, 134, 143, 191, 193, 195, 196], "tic": [9, 10], "tensor_mu": [9, 10], "errors_mu": 9, "return_error": [9, 10, 11, 12, 23, 30, 50, 52, 53, 54, 56, 58, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 92, 93, 189], "cp_reconstruction_mu": 9, "time_mu": [9, 10], "output": [9, 10, 11, 13, 31, 32, 33, 48, 50, 101, 103, 112, 113, 114, 115, 118, 133, 143, 146, 149, 151, 170], "input": [9, 10, 13, 23, 30, 31, 32, 33, 34, 35, 47, 48, 56, 57, 59, 72, 73, 74, 75, 76, 80, 83, 89, 91, 93, 95, 96, 99, 100, 111, 112, 113, 115, 118, 119, 122, 133, 134, 145, 146, 149, 150, 151, 170, 172, 187, 188, 191, 194], "inde": 9, "quit": 9, "coars": 9, "8580": 9, "8393": 9, "8491": 9, "8256": 9, "9142": 9, "9072": 9, "9207": 9, "51": [9, 54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "9138": 9, "8210": 9, "8211": 9, "8230": 9, "8231": 9, "9010": 9, "9011": 9, "9030": 9, "9031": 9, "tensor_h": 9, "errors_h": 9, "cp_reconstruction_h": 9, "time_h": 9, "again": [9, 12], "8244": 9, "8241": 9, "8221": 9, "9040": 9, "93": 9, "9038": 9, "9012": 9, "9022": 9, "huge": 9, "gap": 9, "solut": [9, 10, 85, 87, 147], "subproblem": 9, "rather": [9, 33, 51], "faster": [9, 10, 51, 112, 118, 148, 168], "note": [9, 13, 22, 23, 24, 29, 30, 31, 32, 34, 35, 36, 45, 47, 48, 51, 54, 55, 56, 58, 59, 61, 64, 65, 72, 74, 76, 80, 87, 88, 90, 93, 99, 110, 111, 112, 113, 118, 131, 133, 134, 143, 146, 147, 148, 149, 151, 152, 157, 158, 160, 168, 170, 172, 181, 182, 183, 186, 189, 193, 194, 196], "overal": 9, "still": [9, 28, 148, 185, 193], "need": [9, 10, 12, 22, 23, 28, 29, 51, 85, 148, 186, 191, 193, 194], "longer": [9, 10, 24, 185, 194], "reach": 9, "subroutin": [9, 87], "simpli": [9, 16, 28, 29, 134, 172, 191, 193], "tensorhals_exact": 9, "errors_exact": 9, "cp_reconstruction_exact_h": 9, "time_exact_h": 9, "str": [9, 10, 30, 47, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 105, 114, 131, 144, 148, 150, 154, 165, 166, 189], "2f": [9, 10], "118": 9, "48": 9, "take": [9, 12, 23, 115, 143, 156, 168, 170, 191, 193, 194, 195, 197], "much": [9, 10, 12, 33, 87, 131, 176, 183, 194], "gain": 9, "often": [9, 11, 33, 151], "void": 9, "recommend": [9, 10, 24], "avoid": [9, 11, 194], "unless": [9, 32, 133, 151], "appear": [9, 10, 24], "similar": [9, 10, 11, 30, 59, 114, 115, 134, 147], "runtim": [9, 51, 184], "howev": [9, 10, 11, 12, 29, 32, 112, 113, 118, 131, 132, 133, 134, 151, 191, 194, 195], "closer": 9, "suggest": 9, "behav": [9, 186], "tell": 9, "stori": 9, "better": [9, 10, 23, 29, 33, 128, 130, 148, 151, 194, 195], "root": [9, 10, 117, 149], "rmse": [9, 10], "metric": [9, 10, 192], "229": 9, "04341": 9, "125057": 9, "8711648": 9, "lower": [9, 10, 100, 103, 114, 151, 166], "appreci": [9, 10], "iter": [9, 10, 11, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 112, 118, 140, 141, 142, 166, 189], "each_iter": [9, 10], "b": [9, 10, 11, 30, 31, 34, 35, 47, 54, 58, 59, 61, 67, 72, 74, 75, 76, 82, 83, 87, 88, 101, 110, 111, 112, 118, 123, 124, 125, 126, 127, 132, 134, 147, 150, 157, 158, 170, 189, 195, 196], "set_size_inch": [9, 10, 13], "get_figheight": [9, 10, 13], "forward": [9, 10, 13, 23, 148], "conclus": [9, 10], "quick": [9, 10, 192], "test": [9, 10, 16, 18, 19, 25, 27, 29, 32, 69, 71, 193, 194, 197], "give": [9, 10, 23, 85, 87, 143, 145, 194], "default": [9, 10, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 112, 113, 114, 118, 122, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 165, 166, 170, 172, 176, 181, 182, 183, 187, 188, 189, 191, 193], "resort": [9, 10], "encount": [9, 10], "expert": [9, 10], "gilli": [9, 10, 85], "glineur": [9, 10, 85], "2012": [9, 10, 85, 197], "neural": [9, 10, 85], "24": [9, 10, 16, 34, 35, 51, 85, 110, 133, 150, 170, 194, 195], "1085": [9, 10, 85], "1105": [9, 10, 85], "link": [9, 10], "mit": [9, 10], "edu": [9, 10], "neco": [9, 10], "7755": [9, 10], "978": [9, 14, 190], "plot_nn_cp_hal": [9, 14, 190], "e": [10, 22, 23, 28, 29, 32, 56, 62, 64, 66, 67, 75, 80, 83, 91, 93, 94, 96, 99, 106, 114, 122, 131, 147, 156, 157, 172, 182, 187, 191, 193, 194], "min_": [10, 56, 87, 93], "geq": 10, "t_": 10, "g_": 10, "_f": [10, 11], "ith": 10, "mode": [10, 11, 12, 16, 28, 29, 30, 37, 38, 40, 43, 52, 53, 54, 55, 58, 60, 64, 65, 66, 68, 72, 74, 75, 76, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 97, 123, 124, 126, 131, 134, 139, 140, 142, 156, 159, 160, 167, 168, 174, 178, 180, 181, 182, 183, 189, 191, 193, 194, 195, 196], "unfold": [10, 16, 24, 37, 38, 40, 64, 65, 66, 126, 168, 174, 178, 182, 191, 192, 193, 194], "vector": [10, 11, 12, 60, 64, 66, 101, 111, 115, 127, 131, 140, 159, 160, 166, 172, 175, 179, 180, 181, 182, 183, 193, 194, 196, 197], "AS": 10, "fast": [10, 27, 51, 131, 151], "shrinkag": [10, 163], "gradient": [10, 87], "unconstrain": 10, "wide": 10, "lawson": 10, "hanson": 10, "1974": 10, "non_negative_tuck": [10, 193, 196], "non_negative_tucker_h": 10, "randint": 10, "size": [10, 11, 12, 18, 19, 32, 33, 34, 35, 47, 53, 55, 57, 58, 73, 78, 80, 82, 86, 87, 89, 90, 95, 96, 99, 101, 111, 112, 113, 115, 118, 124, 133, 134, 148, 150, 151, 155, 157, 158, 170, 189, 193, 195, 196], "error_mu": 10, "tucker_reconstruction_mu": 10, "ticnew": 10, "tensor_hals_fista": 10, "error_fista": 10, "tucker_reconstruction_fista": 10, "time_fista": 10, "tensor_hals_a": 10, "error_a": 10, "active_set": [10, 87], "tucker_reconstruction_a": 10, "time_a": 10, "nntucker": 10, "glanc": 10, "complex": [10, 30, 31, 48, 101, 111, 134, 146, 148, 149, 159, 160], "287": 10, "28211836593533": 10, "283": 10, "6447947588468": 10, "281": 10, "9476192173711": 10, "besid": [10, 51], "experi": [10, 18, 19, 28], "veri": [10, 12, 29, 59, 191], "782": [10, 14, 190], "plot_nn_tuck": [10, 14, 190], "la": 11, "linear_sum_assign": 11, "kier": [11, 30, 76], "et": [11, 79, 97, 114], "1999": [11, 30, 76], "mathcal": [11, 131], "mathbb": [11, 195], "j": [11, 12, 18, 19, 30, 48, 60, 76, 81, 87, 98, 101, 110, 114, 149, 157, 159, 170, 180, 195], "shift": 11, "form": [11, 30, 76, 123, 124, 125, 126, 127, 131, 192, 193], "ijk": [11, 30, 76, 123, 124, 125, 126, 127], "sum_": [11, 30, 56, 76, 93, 123, 124, 125, 126, 127, 195, 196], "a_": [11, 30, 56, 76, 93, 123, 124, 125, 126, 127], "ir": [11, 30, 76, 123, 124, 125, 126, 127], "b_": [11, 30, 76, 123, 124, 125, 126, 127], "sigma_i": 11, "c_": [11, 30, 76, 123, 124, 125, 126, 127], "kr": [11, 22, 30, 76, 123, 124, 125, 126, 127], "cyclic": 11, "element": [11, 24, 30, 31, 32, 33, 34, 35, 48, 52, 53, 54, 58, 59, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 92, 103, 110, 111, 112, 113, 118, 123, 124, 125, 126, 127, 133, 136, 143, 145, 146, 148, 149, 151, 163, 170, 186, 189, 195], "true_rank": 11, "noise_r": 11, "seed": [11, 45, 94], "matric": [11, 12, 30, 62, 64, 65, 66, 76, 94, 109, 111, 114, 115, 123, 124, 125, 126, 127, 131, 132, 134, 157, 158, 160, 168, 181, 182, 183, 194, 196], "a_factor_matrix": 11, "uniform": [11, 29, 191], "b_factor_matrix": 11, "c_factor_matrix": 11, "normalis": [11, 62], "a_normalis": 11, "b_normalis": 11, "c_normalis": 11, "b_factor_matric": 11, "roll": 11, "bs_normalis": 11, "construct": [11, 12, 100, 125, 126, 127, 194], "einsum": [11, 29, 101, 111, 128, 129, 130, 157, 168, 170, 193], "ijr": [11, 30, 76, 123, 124, 125, 126, 127], "nois": [11, 12, 30, 76], "standard_norm": [11, 12], "minima": [11, 12, 118], "initialis": [11, 12], "lowest": [11, 12], "best_err": 11, "train": [11, 29, 50, 51, 81, 98, 140, 176, 178, 192, 193], "trial_decomposit": 11, "trial_err": 11, "500": [11, 54, 58, 72, 74, 75, 82, 83, 87, 88, 110, 157, 158, 189, 195, 196], "best": [11, 91, 96, 134, 147, 148, 151], "92": 11, "09204691256270857": 11, "97": 11, "09204691443830902": 11, "126": [11, 18, 20, 190], "09269641747988852": 11, "09204691834914164": 11, "09204691374344776": 11, "217": 11, "09290488334817881": 11, "09204692065975402": 11, "09204691491864322": 11, "83": 11, "09204690965867544": 11, "117": 11, "09204691029003553": 11, "wrapper": [11, 25, 29, 191], "variabl": [11, 13, 22, 23, 24, 87, 140, 147, 194], "somewhat": 11, "b_i": [11, 12, 30, 76, 123, 124, 125, 126, 127, 131, 132], "p_i": [11, 30, 76, 123, 124, 125, 126, 127, 132], "cannot": [11, 12, 23, 30, 47, 52, 54, 72, 74, 75, 76, 83, 84, 88, 131, 150], "store": [11, 13, 31, 48, 103, 111, 122, 146, 149, 187], "along": [11, 32, 34, 35, 47, 55, 90, 100, 112, 113, 118, 123, 124, 133, 134, 148, 150, 151, 166, 170, 174, 178, 195], "blueprint": 11, "third": [11, 22, 30, 47, 71, 76, 170, 196], "tupl": [11, 31, 32, 34, 35, 37, 38, 41, 44, 48, 50, 80, 94, 99, 110, 112, 113, 118, 121, 133, 135, 136, 137, 138, 139, 140, 143, 145, 146, 149, 151, 167, 168, 172, 187], "extract": [11, 100], "inform": [11, 12, 29, 33, 50, 104, 132, 134, 193, 196], "parafac2_tensor": [11, 132, 193], "apply_projection_matric": 11, "anoth": [11, 13, 23, 29, 33, 63, 115, 194], "frontal": [11, 30, 76, 123, 124, 125, 126, 127, 195], "slice": [11, 12, 30, 76, 112, 118, 123, 124, 125, 126, 127, 131, 168, 195], "likewis": 11, "parafac2_to_tensor": [11, 124], "consist": [11, 24, 32, 148, 149, 170, 195], "uneven": [11, 125, 126, 127], "length": [11, 31, 33, 48, 57, 62, 73, 78, 85, 89, 94, 95, 112, 118, 143, 145, 146, 149, 157, 160, 170, 182, 183], "parafac2_to_slic": 11, "est_tensor": 11, "est_weight": 11, "est_a": 11, "est_b": 11, "est_c": 11, "apply_parafac2_project": 11, "reconstruction_error": 11, "recovery_r": 11, "recov": [11, 12, 196], "congruenc": [11, 115], "est_projected_b": 11, "sign": [11, 48, 133, 151, 163, 166], "ab": [11, 30, 76, 163], "newaxi": [11, 31, 172], "est_a_normalis": 11, "est_bs_normalis": 11, "est_c_normalis": 11, "b_corr": 11, "a_corr": 11, "c_corr": 11, "corr": 11, "old": [11, 134, 185], "maximis": 11, "pass": [11, 22, 23, 24, 32, 33, 36, 54, 59, 88, 103, 111, 112, 113, 118, 122, 133, 134, 151, 152, 166, 187, 194], "maxim": [11, 34, 56, 93, 140], "congruence_coeffici": 11, "averag": [11, 113, 148, 151], "91": 11, "9946799176083392": 11, "estim": [11, 18, 19, 91, 96, 116, 117, 131, 197], "argmax": [11, 35, 112], "what": [11, 12, 22, 28, 47, 100, 134, 150], "flip": 11, "a_sign": 11, "correct": [11, 22, 23, 33, 47, 116, 117, 147, 150, 191], "entir": [11, 36, 152], "get_legend_handles_label": 11, "center": [11, 131], "ncol": 11, "0x7f20058b2d10": 11, "interest": 11, "loss": [11, 33], "sure": [11, 23], "stationari": 11, "point": [11, 22, 33, 67, 102, 104, 113, 134, 151, 185], "skip": [11, 38, 41, 94, 131, 157, 158, 160, 168, 181, 182, 183], "domin": 11, "rest": [11, 186, 191], "difficult": 11, "loss_fig": 11, "loss_ax": 11, "rel": [11, 30, 54, 72, 74, 75, 76, 83, 88, 148], "mathematical_expression_of_loss": 11, "frac": [11, 115], "hat": [11, 30, 76], "xtick": 11, "get_xtick": 11, "ten": [11, 30, 76], "berg": [11, 30, 76], "jm": 11, "bro": [11, 30, 54, 70, 72, 74, 76, 88, 140], "part": [11, 12, 24, 28, 30, 48, 56, 76, 93, 148], "journal": [11, 27, 130, 131], "chemometr": [11, 30, 54, 72, 74, 76, 88, 140], "societi": 11, "275": [11, 30, 76], "94": 11, "927": [11, 14, 190], "plot_parafac2": [11, 14, 190], "consum": [12, 168], "greatli": 12, "exce": [12, 131], "consider": 12, "procedur": 12, "singular": [12, 131, 147, 164, 166, 194, 196], "Then": [12, 23, 28, 87, 114, 131, 157, 158], "decompress": [12, 131, 132], "mathemat": [12, 132, 157, 158, 159, 183], "equival": [12, 28, 32, 33, 59, 64, 101, 103, 107, 132, 133, 143, 145, 146, 147, 151, 168, 170, 172, 183, 186, 196], "uncompress": [12, 131, 132], "document": [12, 23, 25, 27, 100, 147, 186], "svd_compress_tensor_slic": [12, 132], "rng": [12, 18, 19], "check_random_st": [12, 18, 19], "create_random_data": 12, "noise_level": 12, "noqa": 12, "e741": 12, "pf2": 12, "random_parafac2": 12, "to_tensor": [12, 191], "x_norm": 12, "xi": 12, "e_i": 12, "x_i": [12, 30, 76, 123, 124, 125, 126, 127, 131, 197], "zip": [12, 15, 186], "n_init": 12, "10_000": 12, "uncompressed_data": 12, "baselin": 12, "prone": 12, "five": 12, "t1": 12, "lowest_error": 12, "nn_mode": [12, 30, 74, 76, 85], "pf2_full": 12, "errs_ful": 12, "t2": 12, "took": 12, "1f": 12, "50": [12, 13, 51, 110, 112, 118, 186, 194], "10000": [12, 33], "abl": [12, 191], "save": 12, "lot": [12, 28], "main": [12, 22, 51, 100, 103, 191], "bottleneck": 12, "begin": [12, 24, 38, 39, 40, 41, 56, 93, 195], "luckili": 12, "independ": [12, 147], "onc": [12, 22, 27, 191], "grid": [12, 33], "whole": [12, 51, 163], "score": [12, 114, 131, 140], "pf2_compress": 12, "errs_compress": 12, "pf2_decompress": 12, "svd_decompress_parafac2_tensor": 12, "t3": 12, "try": [12, 23, 188], "even": [12, 23, 29, 133, 148, 194], "further": 12, "accept": [12, 30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 166, 189], "slight": 12, "discrep": 12, "truncat": [12, 131], "some": [12, 22, 24, 29, 30, 33, 76, 134, 186, 194, 196], "essenti": [12, 23, 131], "strength": 12, "pf2_compressed_lossi": 12, "errs_compressed_lossi": 12, "pf2_decompressed_lossi": 12, "Of": 12, "didn": 12, "becaus": [12, 23, 30, 32, 33, 134, 193, 194], "typic": [12, 22, 24], "neglig": [12, 191], "simul": 12, "2_000": 12, "110": 12, "2000": [12, 30, 76], "next": 12, "104": [12, 51], "ofrow": 12, "equal": [12, 13, 30, 31, 32, 47, 48, 63, 76, 103, 123, 124, 125, 126, 127, 134, 146, 148, 149, 150], "losslessli": 12, "18": [12, 16, 27, 148, 194, 195], "speedup": [12, 27], "below": [12, 24, 30, 33, 100, 113, 114], "your": [12, 23, 24, 27, 28, 29, 80, 99, 128, 130, 191, 193], "might": [12, 23, 33, 124, 191, 193], "624": [12, 14, 190], "plot_parafac2_compress": [12, 14, 190], "cp_permute_factor": 13, "match": [13, 47, 59, 63, 111, 150, 170, 188], "minim": [13, 27, 63, 191], "cosin": [13, 63, 115], "distanc": [13, 33, 63], "linear": [13, 51, 63, 140, 147, 196], "assign": [13, 25, 63], "simultan": 13, "manual": [13, 29], "cp_tensor_1": 13, "cp_tensor_2": 13, "cp_copi": 13, "cp_tensor_3": 13, "col_order_1": 13, "col_order_2": 13, "manipul": [13, 192], "limit": [13, 22, 104, 148, 151], "won": 13, "predefin": 13, "subplots_adjust": 13, "hspace": 13, "text": [13, 24, 30, 56, 76, 93, 131, 157, 158, 159, 160, 195], "166": [13, 14, 190], "plot_permute_factor": [13, 14, 190], "08": [14, 30, 54, 72, 75, 76, 77, 83, 87, 88, 92, 190], "525": 14, "usag": [15, 22, 27, 106, 192], "basic": [15, 21, 163, 190, 192, 193], "auto_examples_python": 15, "auto_examples_jupyt": 15, "assert_array_equ": 16, "ndim": [16, 38, 40, 43, 53, 55, 58, 80, 82, 86, 87, 90, 99, 110, 112, 118, 156, 160, 168, 172, 181, 182, 183, 189], "re": [16, 34, 35, 38, 47, 168, 173, 177], "fold": [16, 22, 38, 44, 192, 193], "005": [16, 21, 190], "plot_tensor": [16, 21, 190], "cp_regress": 18, "cpregressor": 18, "tensor_to_vec": [18, 19, 183], "partial_tensor_to_vec": [18, 19], "synthet": [18, 19, 29], "gen_imag": [18, 19], "image_height": [18, 19, 71], "image_width": [18, 19, 71], "rectangl": [18, 19, 71], "swiss": [18, 19, 71, 196], "circl": [18, 19], "deduc": [18, 19], "n_row": [18, 19, 157, 158], "n_column": [18, 19, 157, 158], "weight_img": [18, 19], "region": [18, 19, 71], "y": [18, 19, 48, 50, 59, 111, 134, 140, 141, 142, 145, 146, 149, 186, 187, 188, 197], "dot": [18, 19, 65, 111, 134, 147, 168, 170, 183, 193], "skip_begin": [18, 19, 38, 39, 40, 41], "orrd": [18, 19], "interpol": [18, 19], "nearest": [18, 19], "nweight": [18, 19], "regressor": [18, 19], "weight_rank": [18, 19, 141, 142], "reg_w": [18, 19, 141, 142], "verbos": [18, 19, 30, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 140, 141, 142, 189], "fit": [18, 19, 23, 30, 76, 77, 92, 131, 132, 140, 141, 142, 191, 193, 197], "weight_tensor_": [18, 19], "nrank": [18, 19], "suptitl": [18, 19], "plot_cp_regress": [18, 20, 190], "tucker_regress": 19, "tuckerregressor": 19, "236": [19, 20, 190], "plot_tucker_regress": [19, 20, 190], "362": 20, "switch": [22, 29, 148, 185, 191, 193], "thread": [22, 36, 144, 152, 165], "current": [22, 29, 54, 72, 74, 75, 83, 85, 88, 105, 129, 134, 148, 154, 191, 193, 194], "being": [22, 33, 148, 194], "get_backend": [22, 23], "global": [22, 36, 45, 54, 72, 74, 88, 152], "set_backend": [22, 29, 36, 128, 130, 152, 191, 193], "enabl": [22, 27, 29, 184], "parti": 22, "packag": [22, 28, 130, 194], "dask": 22, "parallel": 22, "over": [22, 29, 30, 31, 32, 48, 64, 76, 101, 111, 112, 113, 118, 133, 134, 146, 149, 151, 160, 170, 196], "inherit": 22, "spawn": 22, "context": [22, 25, 36, 135, 136, 137, 138, 139, 152, 192], "manag": [22, 29, 36, 152], "backend_context": [22, 29], "safe": [22, 47, 150, 194], "approach": [22, 114, 131, 151], "librari": [22, 24, 29, 101, 111, 191], "matter": 22, "transpos": [22, 119, 134, 159, 160, 168, 181, 182, 183, 193], "clip": [22, 75, 83], "etc": [22, 23, 29, 148, 191, 193], "staticmethod": 22, "common": [22, 110, 134, 146, 149, 170, 193], "api": [22, 27, 148, 191, 193], "kron": 22, "subclass": [22, 134, 186], "logic": [22, 32], "__init__": [22, 191], "cach": [22, 29, 128, 130], "maintain": [22, 27, 134], "_loaded_backend": 22, "actual": [22, 33, 80, 99, 128, 148, 194], "_backend": 22, "importlib": 22, "register_backend": 22, "grab": 22, "intern": [22, 33, 52, 84, 131], "_state": 22, "storag": [22, 196], "farm": 22, "out": [22, 23, 31, 32, 33, 34, 35, 47, 48, 100, 101, 110, 111, 112, 113, 118, 122, 133, 134, 146, 149, 150, 151, 186, 187, 188], "mechan": 22, "wrap": [22, 23], "docstr": [22, 23, 25], "minutia": 22, "themselv": 22, "certain": 22, "properti": [22, 134, 148, 166, 191], "descriptor": 22, "int32": [22, 33, 151], "tf": 22, "compat": [22, 25, 28, 33, 103, 122, 134, 143, 148, 187], "varaibl": 22, "override_module_dispatch": 22, "done": [22, 28, 166, 168, 191, 195], "_getattr__": 22, "__dir__": 22, "pep": [22, 111], "562": 22, "overwrit": 22, "sy": 22, "module_nam": 22, "__class__": 22, "custom": [22, 187], "moduletyp": 22, "overrridden": 22, "__getitem__": 22, "welcom": 23, "cool": 23, "spot": 23, "bug": 23, "typo": 23, "mistak": 23, "pleas": [23, 27, 70, 112, 118, 197], "report": 23, "open": [23, 27, 33, 130], "pull": 23, "request": 23, "relev": 23, "issu": [23, 27, 33, 113], "talk": 23, "gitter": 23, "fix": [23, 29, 52, 54, 58, 62, 64, 65, 66, 72, 74, 75, 82, 83, 84, 85, 88, 189, 195], "repositori": [23, 69], "help": 23, "unit": [23, 62], "especi": [23, 113, 151, 191], "refactor": 23, "exis": 23, "broken": 23, "submit": 23, "adher": 23, "guid": [23, 27], "easiest": 23, "black": 23, "pip": 23, "instal": [23, 27, 191], "exist": [23, 47, 148, 150], "don": [23, 112, 118], "hesit": 23, "contact": 23, "unsur": 23, "transpar": [23, 29, 128, 130, 191, 193], "never": 23, "directli": [23, 28, 29, 51, 54, 88, 94, 151, 157, 186], "torch": [23, 27, 193], "tensordot": [23, 101, 111], "doesn": [23, 51], "ones": [23, 30, 54, 72, 74, 76, 88, 103, 110, 111, 151, 172, 187, 188, 194, 196], "otherwis": [23, 30, 34, 35, 50, 54, 59, 72, 74, 76, 80, 82, 88, 99, 101, 113, 135, 136, 137, 138, 139, 140, 143, 156, 186, 188], "statement": 23, "min_valu": [23, 191], "NOT": 23, "reason": 23, "restrict": 23, "ndarrai": [23, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 71, 72, 74, 75, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 158, 159, 160, 162, 163, 164, 170, 172, 173, 177, 180, 186, 187, 188, 189, 191], "fail": [23, 134, 149], "aspect": 23, "new_tensor": [23, 191], "express": [23, 30, 76, 123, 124, 125, 126, 127, 130, 168, 195, 196], "unfortun": 23, "index_upd": [23, 29, 106], "previou": [23, 54, 72, 74, 75, 83, 85, 88, 134, 148], "becom": [23, 36, 64, 87, 151, 152], "orient": 23, "automat": [23, 24, 29, 128, 130, 148, 194], "util": [23, 27, 29, 193], "assert_class_wrapper_correctly_passes_argu": 23, "keyword": [23, 31, 48, 111, 113, 143, 146, 148, 149, 172], "argument": [23, 31, 33, 47, 48, 59, 101, 103, 111, 112, 113, 118, 122, 146, 148, 149, 150, 166, 170, 172, 186, 187, 191], "test_cp": 23, "monkeypatch": 23, "ignore_arg": 23, "except": [23, 32, 33, 47, 71, 101, 103, 112, 113, 118, 133, 134, 140, 148, 151, 196], "notic": [23, 24, 112, 118], "pytest": [23, 28], "know": [23, 131], "plan": 23, "purpos": [23, 29], "behind": 23, "scene": 23, "inspect": 23, "down": 23, "mock": 23, "word": [23, 33, 37, 114, 191], "temporarili": 23, "replac": [23, 70], "assert": 23, "everi": [23, 151, 157, 158], "placehold": 23, "send": [23, 191], "reset": 23, "behaviour": [23, 33, 148], "crutial": 24, "cover": [24, 148, 186], "syntax": 24, "restructuredtext": 24, "rst": 24, "come": [24, 28, 148], "style": [24, 25, 103, 122, 187], "arg": 24, "descript": [24, 193], "possibli": 24, "space": [24, 33, 131, 148], "colon": 24, "explan": [24, 134, 197], "singl": [24, 30, 32, 76, 91, 96, 112, 113, 118, 123, 133, 148, 151, 170], "backtick": 24, "doubl": [24, 134, 170], "inlin": 24, "block": [24, 29, 47, 110, 150], "leav": [24, 38, 39, 40, 41], "white": 24, "indent": 24, "said": [24, 195], "mod": 24, "algebra": [24, 27, 128, 130, 147, 192], "func": 24, "hierarchi": 24, "determin": [24, 112, 118, 134, 147, 148], "tabl": 24, "content": 24, "rubric": 24, "locat": [24, 31, 48, 111, 146, 149, 193], "everytim": 24, "short": [24, 28, 191, 193], "plot_xyz": 24, "remaind": 24, "comment": 24, "displai": 24, "myvari": 24, "my": 24, "section": [24, 33], "header": 24, "render": 24, "underlin": 24, "emb": 24, "symbol": 24, "splitter": 24, "guidelin": 25, "practic": [25, 51, 77, 92, 134, 191], "index": [25, 34, 35, 38, 40, 43, 79, 94, 97, 103, 107, 111, 143, 150, 157, 158, 160, 168, 181, 182, 183, 195], "interfac": [25, 134, 191, 194], "dispatch": [25, 29, 128, 130, 166, 184, 185, 192, 193], "simpl": 27, "bsd": 27, "licens": 27, "pure": 27, "apach": 27, "thorough": 27, "discov": 27, "easili": [27, 29, 128, 130, 191, 193, 196], "advanc": [27, 29, 193], "anywher": 27, "multi": [27, 29, 30, 54, 70, 72, 74, 88, 122, 187, 191, 195], "machin": [27, 30, 52, 76, 84, 102, 104, 193], "extens": 27, "Its": [27, 58, 82, 147, 189], "suitabl": 27, "industri": [27, 30, 54, 72, 74, 88], "academia": 27, "lab": 27, "around": 27, "world": 27, "instruct": [27, 191], "friendli": 27, "meet": 27, "team": 27, "consid": [27, 30, 54, 72, 74, 75, 76, 83, 88, 140], "cite": [27, 70], "year": [27, 28], "2019": 27, "volum": [27, 51], "v20": 27, "277": 27, "html": [27, 28], "emsp": 27, "author": 27, "bibtex": 27, "python3": 28, "python2": 28, "probabl": 28, "upgrad": 28, "pain": 28, "free": [28, 30, 76], "anaconda": 28, "distribiut": 28, "ship": 28, "termin": [28, 54, 72, 74, 75, 83, 85, 88], "channel": 28, "And": [28, 191], "cd": 28, "git": 28, "edit": 28, "uni": 28, "vital": 28, "slimit": 28, "minifi": 28, "rcssmin": 28, "build": [28, 114], "doc": [28, 31, 48, 111, 146, 149], "_build": 28, "answer": [28, 134], "2018": [28, 130], "releas": 28, "ago": 28, "break": [28, 148], "thing": 28, "quot": 28, "wiki": [28, 134], "legaci": 28, "languag": 28, "strengh": 29, "weak": 29, "loos": 29, "popular": 29, "thin": 29, "known": [29, 81, 98, 173, 194, 196], "product": [29, 30, 60, 64, 65, 66, 76, 94, 101, 110, 111, 115, 123, 124, 125, 126, 127, 133, 153, 156, 157, 158, 159, 160, 161, 168, 170, 177, 180, 192, 193], "state": [29, 131, 177, 192], "whose": [29, 30, 76, 103, 113, 119, 123, 124, 125, 126, 127, 149, 173, 177, 197], "evolv": [29, 30, 76, 123, 124, 125, 126, 127], "khatri": [29, 61, 64, 65, 66, 94, 157, 168], "rao": [29, 61, 94, 157, 168], "kroneck": [29, 110, 157, 168, 183, 193], "own": 29, "candecomp": [29, 54, 72, 74, 75, 83, 88, 192], "contract": [29, 128, 130, 167, 170], "path": [29, 128, 130], "quickli": [29, 193], "necessarili": 29, "tensor_slic": [30, 76, 131], "truncated_svd": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 166, 189, 191], "normalize_factor": [30, 52, 53, 54, 72, 74, 76, 84, 85, 86, 87, 88], "absolute_tol": [30, 76], "n_iter_parafac": [30, 76], "th": [30, 58, 76, 82, 100, 103, 123, 124, 125, 126, 127, 157, 172, 189], "diag": [30, 76, 103, 123, 124, 125, 126, 127], "a_i": [30, 76, 123, 124, 125, 126, 127], "diagon": [30, 76, 100, 103, 123, 124, 125, 126, 127, 196], "row": [30, 47, 76, 94, 103, 122, 123, 124, 125, 126, 127, 131, 147, 157, 187], "j_i": [30, 56, 76, 93, 123, 124, 125, 126, 127], "cross": [30, 51, 76, 123, 124, 125, 126, 127, 193, 196], "i_1": [30, 42, 44, 60, 76, 123, 124, 125, 126, 127, 159, 180, 195, 196], "constant": [30, 62, 76, 123, 124, 125, 126, 127, 136], "reformul": [30, 76, 123, 124, 125, 126, 127], "orthogon": [30, 50, 55, 58, 76, 82, 90, 123, 124, 125, 126, 127, 131, 134, 135, 139, 189], "formul": [30, 76, 123, 124, 125, 126, 127], "x_": [30, 76, 123, 124, 125, 126, 127, 195], "hold": [30, 62, 76, 123, 124, 125, 126, 127], "int": [30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 112, 113, 118, 119, 121, 122, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 148, 150, 151, 155, 156, 157, 158, 159, 160, 166, 167, 168, 170, 172, 174, 176, 178, 180, 181, 182, 183, 187, 188, 189], "previous": [30, 59, 76, 195, 196], "parafac2tensor": [30, 76, 123, 124, 125, 126, 127, 132], "initialize_factor": [30, 54, 72, 74, 75, 76, 83, 88], "svd_fun": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 166, 189], "aggreg": [30, 52, 53, 54, 72, 74, 76, 84, 85, 86, 87, 88], "1d": [30, 42, 44, 52, 54, 60, 72, 74, 75, 76, 83, 84, 85, 88, 123, 124, 125, 126, 127, 141, 157, 159, 180, 183], "inaccuraci": [30, 76], "toler": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 189], "epsilon": [30, 76, 102], "That": [30, 76, 128, 130, 133, 196], "less": [30, 51, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 131, 133, 148, 151, 189], "stop": [30, 31, 33, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 189], "condit": [30, 31, 48, 50, 76, 80, 99, 101, 137, 138, 146, 149, 186], "epsilon_": [30, 76], "necessari": [30, 76, 110, 113, 133, 134, 151, 191, 194], "warn": [30, 33, 76], "shown": [30, 76], "info": [30, 76], "randomst": [30, 45, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 88, 90, 92, 94, 135, 136, 137, 138, 139, 140, 141, 142, 189], "hi": 30, "phd": [30, 54, 72, 74, 88], "dissert": 30, "plstoolbox": 30, "describ": [30, 123, 124, 125, 126, 127, 132], "projection_matric": [30, 76, 123, 124, 125, 126, 127], "slightli": [30, 76], "li": [30, 76], "wherea": [30, 76], "nd": [30, 54, 72, 74, 76, 88, 135, 137, 138, 139, 150, 155], "reorder": [30, 76, 119], "consequ": [30, 148], "unlik": [30, 112, 118], "l": [30, 50, 69, 76, 121], "294": [30, 76], "food": [30, 54, 72, 74, 88], "amsterdam": [30, 54, 72, 74, 88], "1998": [30, 54, 72, 74, 88], "yu": 30, "augustijn": 30, "intellig": [30, 54, 72, 74, 88], "laboratori": [30, 54, 72, 74, 88], "214": 30, "104312": 30, "cast": [31, 33, 47, 48, 111, 113, 133, 146, 149, 150, 151], "same_kind": [31, 47, 48, 111, 146, 149, 150], "subok": [31, 48, 59, 111, 146, 149, 188], "extobj": [31, 48, 111, 146, 149], "wise": [31, 47, 48, 85, 112, 114, 118, 146, 149, 157], "shorthand": [31, 111, 186], "array_lik": [31, 32, 33, 34, 35, 47, 48, 59, 100, 101, 103, 110, 111, 112, 113, 118, 122, 133, 134, 143, 145, 146, 147, 148, 149, 150, 151, 170, 172, 186, 187, 188], "broadcast": [31, 32, 34, 35, 48, 64, 111, 112, 113, 118, 133, 146, 147, 149, 151, 186], "freshli": [31, 48, 111, 146, 149], "alloc": [31, 48, 111, 146, 149], "At": [31, 48, 146, 149], "ufunc": [31, 32, 48, 111, 112, 113, 118, 133, 146, 149, 151], "elsewher": [31, 48, 103, 146, 149, 186], "uniniti": [31, 48, 122, 146, 149, 187], "within": [31, 33, 48, 59, 146, 149], "remain": [31, 48, 119, 143, 146, 149], "kwarg": [31, 48, 111, 140, 141, 142, 146, 149, 166, 169], "ib": 31, "sqrt": [31, 146], "scalar": [31, 48, 101, 111, 112, 118, 133, 146, 147, 149, 151, 170], "1j": [31, 48], "5620499351813308": 31, "linspac": [31, 33], "num": 31, "101": 31, "plane": [31, 149], "xx": 31, "extent": 31, "grai": [31, 130], "keepdim": [32, 34, 35, 112, 113, 118, 133, 151], "AND": 32, "count": [32, 133, 151], "place": [32, 47, 112, 113, 118, 133, 143, 148, 150, 151], "preserv": [32, 47, 134], "correctli": [32, 34, 35, 112, 113, 118, 133, 151, 186], "against": [32, 34, 35, 112, 113, 118, 133, 140, 151, 194], "sub": [32, 47, 59, 112, 113, 118, 133, 150, 151, 188, 194, 196], "rais": [32, 101, 111, 112, 113, 118, 133, 134, 147, 151, 194], "Not": 32, "nan": [32, 112, 118, 133, 146, 148, 149, 151], "infin": 32, "zero": [32, 54, 56, 71, 72, 74, 77, 88, 92, 93, 103, 113, 119, 122, 125, 126, 127, 131, 151, 157, 170, 188, 195, 196], "o": [32, 51, 148], "id": [32, 196], "28293632": 32, "vari": [32, 33, 62, 64, 66, 113, 124, 133, 148, 151], "step": [33, 77, 92, 151], "evenli": 33, "interv": [33, 149], "half": 33, "exclud": 33, "roughli": 33, "real": [33, 134, 146, 148, 149, 196], "round": [33, 151, 196], "off": 33, "adjac": 33, "creation": [33, 103, 122, 187, 191], "__array_function__": [33, 103, 122, 187], "protocol": [33, 103, 122, 187], "overflow": [33, 133, 151], "rule": [33, 111, 147, 151], "greater": [33, 131, 134], "numer": [33, 151, 191, 196], "stabl": [33, 148], "stabil": 33, "due": [33, 52, 54, 72, 74, 75, 83, 84, 88, 196], "larger": 33, "lead": [33, 59, 151], "unexpect": 33, "arbitrari": [33, 101, 111], "int64": 33, "incorrect": 33, "power": [33, 57, 73, 78, 89, 91, 95, 96, 196], "modulo": 33, "x1": [33, 111, 147], "x2": [33, 111], "7776": 33, "8801": 33, "6176": 33, "625": 33, "6576": 33, "4001": 33, "7185": 33, "5969": 33, "4816": 33, "3361": 33, "care": [33, 194], "endpoint": 33, "ogrid": [33, 186], "mgrid": 33, "partit": [33, 148], "insert": [34, 35, 143], "appropri": [34, 35, 131, 194], "index_arrai": [34, 35], "argmin": [34, 118], "unravel_index": [34, 35], "flat": [34, 35], "take_along_axi": [34, 35], "expand_dim": [34, 35], "occurr": [34, 35], "ind": [34, 35], "squeez": [34, 35], "minimum": [35, 54, 72, 74, 75, 83, 88, 112, 118], "amin": [35, 112], "local_threadsaf": [36, 144, 152, 165], "hasn": [36, 152], "explicitli": [36, 110, 152], "session": [36, 152], "unfolded_tensor": [37, 43], "refold": [37, 41, 64, 193], "folded_tensor": 37, "skip_end": [38, 39, 40, 41], "partial": [38, 39, 40, 41, 51, 55, 70, 90, 140, 148, 151], "untouch": [38, 39, 40, 41], "vectoris": [39, 41, 42, 44, 66, 183], "ignor": [39, 40, 82, 112, 118, 163], "ravel_tensor": 40, "n_sampl": [40, 56, 77, 92, 93, 94, 116, 117, 140, 141, 142, 153, 155], "n_1": 40, "n_2": 40, "n_i": [40, 94, 157], "i_n": [42, 44, 60, 159, 180, 195], "i_2": [42, 44, 195, 196], "vec": [44, 160], "ful": 44, "valid": [45, 58, 82, 123, 124, 189], "inspir": 45, "scikit": [45, 193, 194, 197], "eponym": 45, "a_min": 46, "a_max": 46, "a1": 47, "a2": 47, "join": [47, 150, 168], "destin": [47, 119, 150], "togeth": [47, 111, 150, 186], "equiv": [47, 150], "unsaf": [47, 150], "control": [47, 59, 150], "kind": [47, 101, 104, 143, 148, 150], "ma": 47, "array_split": 47, "split": [47, 150, 196], "hsplit": 47, "horizont": 47, "vsplit": 47, "vertic": [47, 114], "dsplit": 47, "3rd": 47, "stack": [47, 111, 114, 134, 168], "assembl": [47, 150, 173, 177], "hstack": 47, "vstack": 47, "dstack": 47, "column_stack": 47, "maskedarrai": 47, "masked_arrai": 47, "fill_valu": [47, 194], "999999": 47, "conjug": [48, 101, 111, 159, 160], "imaginari": [48, 148], "alia": [48, 134], "2j": [48, 101, 111, 146], "ey": [48, 110, 145], "data_tensor": 50, "n_iter": [50, 57, 73, 78, 89, 91, 95, 96], "trajectori": 50, "ttoi": 50, "verifi": [50, 137, 138], "boundari": [50, 80, 99, 137, 138, 176], "full_tensor": 50, "zhou": 50, "zhang": 50, "zheng": 50, "2022": [50, 114, 131], "theori": 50, "3991": 50, "4019": 50, "input_tensor": [51, 79, 81, 97, 98], "0001": [51, 53, 55, 56, 58, 82, 86, 90, 93, 189], "ttcross": 51, "fiber": 51, "skeleton": 51, "sweep": 51, "submatrix": 51, "advantag": [51, 170, 194, 196], "tensor_shap": [51, 65], "tensor_ord": 51, "feasibl": 51, "disadvantag": 51, "accur": [51, 113], "underestim": 51, "contrast": [51, 151], "theoret": 51, "guarante": [51, 143, 196], "kth": [51, 79, 81, 97, 98], "outer": [51, 64, 75, 83, 110, 153, 196], "loop": [51, 75, 83], "pseudo": 51, "qr": 51, "maxvol": 51, "acknowledg": 51, "bodi": 51, "modifi": [51, 52, 54, 59, 67, 72, 74, 75, 83, 84, 88], "tensortoolbox": 51, "daniel": [51, 130], "bigoni": 51, "ivan": [51, 81, 98], "oseledet": [51, 81, 98], "eugen": 51, "tyrtyshnikov": 51, "multidimension": [51, 186], "linearalgebra": 51, "432": 51, "70": [51, 110, 186], "88": 51, "2010": 51, "sergei": 51, "dolgov": 51, "robert": 51, "scheichl": 51, "hybrid": 51, "parametricpd": 51, "arxiv": [51, 79, 97], "preprint": [51, 79, 97], "1707": 51, "04562": 51, "2017": [51, 131], "29": 51, "54": 51, "75": [51, 54, 72, 74, 88], "124": 51, "cvg_criterion": [52, 54, 72, 74, 75, 83, 84, 85, 88], "abs_rec_error": [52, 54, 72, 74, 75, 83, 84, 85, 88], "fixed_mod": [52, 54, 72, 74, 75, 83, 84, 85, 87, 88], "variat": [52, 55, 58, 77, 82, 84, 85, 87, 90, 92, 189], "amnon": [52, 84], "shashua": [52, 84], "tamir": [52, 84], "hazan": [52, 84], "statist": [52, 84], "vision": [52, 53, 84, 86], "proceed": [52, 84], "confer": [52, 53, 84, 86, 131], "icml": [52, 84], "pp": [52, 53, 54, 58, 72, 74, 75, 82, 83, 84, 86, 87, 88, 131, 157, 158, 189, 195, 196, 197], "792": [52, 84], "799": [52, 84], "2005": [52, 54, 72, 74, 84, 88], "yong": [53, 86], "deok": [53, 86], "kim": [53, 86], "seungjin": [53, 86], "choi": [53, 86], "recognit": [53, 86], "cvpr": [53, 86], "2007": [53, 86], "svd_mask_repeat": [54, 55, 72, 74, 88, 90], "callback": [54, 72, 77, 88, 92], "everywher": [54, 55, 56, 58, 72, 74, 88, 90, 93, 166, 189, 196], "fill": [54, 55, 58, 72, 74, 88, 90, 107, 122, 187, 188, 189], "rec_error": [54, 56, 72, 74, 75, 83, 85, 88, 93], "criterion": [54, 72, 74, 75, 83, 85, 88], "low_rank_compon": [54, 72, 74, 88], "sparse_compon": [54, 72, 74, 88], "denot": [54, 72, 74, 88, 195], "fraction": [54, 72, 74, 88], "kolda": [54, 58, 72, 74, 75, 77, 82, 83, 87, 88, 92, 157, 158, 189, 195, 196], "w": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196, 197], "bader": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "siam": [54, 58, 72, 74, 75, 81, 82, 83, 87, 88, 98, 157, 158, 189, 195, 196], "review": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "vol": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "455": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "2009": [54, 58, 72, 74, 75, 82, 83, 87, 88, 157, 158, 189, 195, 196], "tomasi": [54, 72, 74, 88], "giorgio": [54, 72, 74, 88], "rasmu": [54, 70, 72, 74, 88, 140], "163": [54, 72, 74, 88], "180": [54, 72, 74, 88], "hoi": [55, 58, 82, 90, 189], "exclus": [55, 90], "tuckertensor": [55, 90, 180, 181, 182, 183], "reg_": [56, 93], "reg_j": [56, 93], "mu_init": [56, 93], "mu_max": [56, 93], "10000000000": [56, 93], "learning_r": [56, 93], "pca": [56, 93, 131], "alm": [56, 93], "n1": [56, 93, 140, 141, 142], "regularis": [56, 93, 117, 141, 142], "10e9": [56, 93], "percentag": [56, 93], "tild": [56, 93, 195, 197], "equat": [56, 93, 134, 147], "align": [56, 93], "reg": [56, 93], "_j": [56, 93], "_e": [56, 93], "_1": [56, 93, 115], "cdot": [56, 93, 157, 158, 160, 170, 195, 196, 197], "n_repeat": [57, 73, 78, 89, 91, 95, 96], "symmetr": [57, 62, 78, 95, 96], "tri": [57, 73, 78, 89, 91, 95, 96], "eigenvalu": [57, 62, 73, 78, 89, 91, 95, 96], "eigenvector": [57, 73, 78, 89, 91, 95, 96], "fixed_factor": [58, 82, 189], "keep": [58, 82, 85, 148, 176, 188, 189, 191], "memori": [59, 103, 122, 143, 151, 168, 187, 188, 194], "layout": [59, 143, 188], "fortran": [59, 103, 122, 134, 143, 187, 188], "contigu": [59, 101, 143, 188], "close": [59, 188], "forc": 59, "arr": 59, "interpret": [59, 67], "writeabl": 59, "flag": 59, "shallow": 59, "mainli": 59, "surpris": 59, "mutabl": 59, "matrix_or_vector": [60, 159, 180], "keep_dim": [60, 180], "2d": [60, 135, 139, 140, 155, 157, 159, 166, 180, 181, 182], "i_k": [60, 157, 158, 159, 180, 195], "i_": [60, 159, 180, 195], "cp_multi_mode_dot": 60, "chain": [60, 101, 159, 180], "mode_dot": [60, 160, 180], "khatria": 61, "turn": [62, 64, 65, 66], "u_1": [62, 64, 65, 66, 157, 158], "u_n": [62, 64, 65, 66, 157, 158], "v_1": 62, "v_n": 62, "v_k": 62, "euclidean": 62, "u_k": [62, 65, 157, 158], "absorb": 62, "special": 62, "s_i": [62, 64, 66, 131], "normalisation_weight": 62, "normalised_factor": 62, "ref_cp_tensor": 63, "tensors_to_permut": 63, "serv": [63, 131], "permuted_tensor": 63, "lenght": 63, "factor_matric": [64, 65], "ie": 65, "s_u_i": 65, "exploit": 65, "khatri_rao": [65, 168], "ravel": [66, 143, 157], "mutein": 67, "eight": 67, "four": [67, 148], "mono": 67, "orcutt": 67, "jahn": 67, "emmel": 67, "snyder": 67, "posner": 67, "carlson": 67, "enhanc": 67, "cytokin": 67, "fusion": 67, "biorxiv": 67, "indian": 69, "pine": 69, "hyperspectr": 69, "bunch": 69, "classif": 69, "segment": 69, "ground": [69, 116, 117, 140], "truth": [69, 116, 117, 140], "ehu": 69, "eu": 69, "ccwintco": 69, "upload": 69, "c4": 69, "indian_pines_gt": 69, "mat": 69, "indian_pines_correct": 69, "baumgardn": 69, "biehl": 69, "landgreb": 69, "220": 69, "aviri": 69, "june": 69, "1992": 69, "site": 69, "purdu": 69, "4231": 69, "r7rx991c": 69, "kinet": 70, "fluoresc": 70, "x60t": 70, "suit": 70, "pl": [70, 140], "courtesi": 70, "collabor": 70, "ucphchemometr": 70, "nikolajsen": 70, "booksh": 70, "hansen": 70, "\u00e5": 70, "2003": 70, "quantifi": 70, "catecholamin": 70, "analytica": 70, "chimica": 70, "acta": 70, "475": 70, "137": 70, "150": 70, "n_channel": 71, "weight_valu": 71, "sparsity_coeffici": [74, 85, 87], "exact": [74, 85, 87, 101, 147, 151], "n_iter_max_inn": [75, 83], "tol_out": [75, 83], "tol_inn": [75, 83], "factor_aux": [75, 83], "inner": [75, 83, 101, 111], "dure": [75, 83, 140, 184, 191], "seper": [75, 83], "divid": [75, 83, 113], "distrbut": [75, 83], "tolearnc": 76, "self": [76, 140, 141, 142], "max_stagn": [77, 92], "randomis": [77, 92], "casei": [77, 92], "battaglino": [77, 92], "grei": [77, 92], "ballard": [77, 92], "tamara": [77, 92], "ring": [79, 97, 176], "recurs": [79, 81, 97, 98], "union": [79, 97], "tr": [79, 97], "qibin": [79, 97], "zhao": [79, 97], "1606": [79, 97], "05535": [79, 97], "tensorized_shap": [80, 99], "rank_2": [80, 99], "dictat": [80, 99], "tt_matrix": [80, 99, 193], "v": [81, 85, 87, 98, 100, 115, 131, 166, 191, 194], "scientif": [81, 98], "2295": [81, 98], "2317": [81, 98], "2011": [81, 98], "hal": [85, 87], "success": [85, 87], "core_sparsity_coeffici": 87, "fista": 87, "nnl": 87, "tensor_i": 87, "core_i": 87, "prod_": [87, 157, 158, 195], "neq": [87, 195], "delta": 87, "tm": 87, "tu": 87, "utu": 87, "utm": 87, "corecross": 87, "tensorcross": 87, "corecross_j": 87, "core_j": 87, "tensorcross_j": 87, "eigenv": [91, 96], "best_factor": [91, 96], "deflat": [91, 96], "skip_matrix": [94, 157, 158, 168], "indices_list": 94, "return_sampled_row": 94, "subsampl": 94, "taken": [94, 113], "random_sampl": 94, "returned_sampled_row": 94, "sampled_khatri_rao": 94, "matricis": 94, "indices_kr": 94, "view": [100, 119, 143, 172, 195], "question": 100, "diagflat": 100, "trace": 100, "triu": 100, "triangl": 100, "tril": 100, "matmul": [101, 134], "bla": [101, 111], "featur": [101, 192, 196], "met": 101, "valueerror": [101, 111], "vdot": [101, 111], "einstein": [101, 111], "summat": [101, 111, 151], "convent": [101, 111, 149], "multi_dot": 101, "neither": [101, 111, 191], "3j": [101, 111], "0j": [101, 111, 146], "499128": 101, "ident": [103, 147, 148], "almost": [103, 148, 196], "intput": 107, "composit": [110, 151], "prepend": [110, 111], "smallest": 110, "r0": 110, "r1": 110, "rn": 110, "s0": 110, "s1": 110, "sn": 110, "k0": 110, "k1": [110, 153, 161], "kn": 110, "i0": 110, "i1": [110, 196], "iN": 110, "j0": 110, "j1": [110, 153, 161], "jn": [110, 153, 161], "kt": 110, "st": 110, "jt": 110, "visual": 110, "600": 110, "700": 110, "extend": [110, 148, 170], "treat": 111, "resid": 111, "accordingli": 111, "append": [111, 168], "semant": 111, "465": 111, "mix": 111, "usual": [111, 194], "traceback": 111, "recent": 111, "operand": 111, "buffer": [112, 118], "empti": [112, 118, 122, 133, 151, 187, 188], "propag": [112, 118], "nanmax": [112, 118], "fmax": [112, 118], "nanmin": [112, 118], "fmin": [112, 118], "item": [112, 118, 148], "matlab": [112, 118], "maxima": 112, "isnan": [112, 118], "arithmet": [113, 133, 151], "intermedi": [113, 194], "std": 113, "var": 113, "nanmean": 113, "nanstd": 113, "nanvar": 113, "inaccur": 113, "accumul": [113, 133, 151, 157], "allevi": 113, "float16": 113, "extra": 113, "512": 113, "54999924": 113, "55000000074505806": 113, "factors_1": 114, "factors_2": 114, "5e": 114, "corrindex": 114, "assess": [114, 193], "sobhani": 114, "1016": 114, "sigpro": 114, "108457": 114, "invari": [114, 166], "wherein": 114, "a_1": 114, "a_n": 114, "concaten": [114, 150], "big": 114, "max_scor": 114, "pair": [114, 115, 131], "a_2": 114, "conserv": 114, "min_scor": 114, "avg_scor": 114, "avg": 114, "matrix1": [115, 193], "matrix2": [115, 193], "absolute_valu": 115, "mathbf": [115, 195], "_2": 115, "onto": 115, "closest": 115, "y_true": [116, 117], "y_pred": [116, 117], "target": [116, 117, 140], "mean_squared_error": 117, "isn": 118, "These": [119, 193], "uniqu": 119, "swapax": 119, "interchang": 119, "int8": [122, 133, 151, 187], "ones_lik": [122, 188], "slice_idx": 123, "pad": [125, 126, 127, 176], "hq": [128, 130], "cuquantum": 128, "precomput": [128, 130], "favourit": [128, 130], "opt": [128, 130], "revert": [128, 129, 130], "pluge": [128, 130], "use_default_einsum": [128, 130], "smith": 130, "johnni": 130, "opt_einsum": 130, "softwar": 130, "753": 130, "compression_threshold": 131, "max_rank": 131, "sped": 131, "massiv": 131, "think": [131, 143], "lie": 131, "mathscr": 131, "_i": 131, "basi": 131, "span": 131, "col": 131, "prior": 131, "whenev": [131, 172, 194], "moreov": 131, "v_i": 131, "u_i": 131, "addit": [131, 134, 166, 172, 194], "thought": 131, "simplifi": 131, "dpar": 131, "mani": [131, 151, 194], "helwig": 131, "latent": 131, "multivari": 131, "longitudin": 131, "biometr": 131, "783": 131, "803": 131, "1002": [131, 194], "bimj": 131, "201600045": 131, "jang": 131, "jg": 131, "kang": 131, "dpar2": 131, "scalabl": 131, "irregular": 131, "dens": [131, 194], "38th": 131, "icd": 131, "2454": 131, "2467": 131, "loading_matric": 132, "platform": [133, 151], "unsign": [133, 151], "product_along_axi": 133, "modular": [133, 151], "32": 133, "bit": 133, "536870910": 133, "neutral": [133, 151], "But": 133, "Or": [133, 170], "uint": 133, "q": 134, "orthonorm": 134, "triangular": 134, "raw": 134, "tau": 134, "backward": [134, 148], "earlier": [134, 193], "omit": [134, 186], "econom": 134, "letter": 134, "spell": 134, "namedtupl": 134, "attribut": [134, 140, 188], "unitari": 134, "cdoubl": 134, "household": 134, "reflector": 134, "linalgerror": [134, 147], "rq": 134, "lapack": [134, 147], "routin": [134, 147], "dgeqrf": 134, "zgeqrf": 134, "dorgqr": 134, "zungqr": 134, "en": 134, "wikipedia": 134, "qr_factor": 134, "too": [134, 151, 170, 186, 194], "expos": 134, "lapack_lit": 134, "await": 134, "randn": [134, 150], "allclos": [134, 147], "r2": 134, "illustr": 134, "y0": 134, "mx": 134, "graph": 134, "ll": 134, "gram": 134, "schmidt": 134, "inv": 134, "lstsq": [134, 147], "normalise_factor": [135, 136], "dict": [135, 137, 138, 191], "mp": [137, 177], "tt_tensor": [137, 138, 193], "3d": [137, 138, 174, 175, 177, 178, 179], "tucker_tensor": [139, 193], "n_compon": 140, "coupl": 140, "covari": 140, "multiwai": 140, "calibr": 140, "multilinear": 140, "1996": 140, "n_predict": 140, "associ": [140, 141, 142, 191], "x_factor": 140, "y_factor": 140, "coef_": 140, "n_featur": [140, 155], "predictor": 140, "n_target": 140, "x_score": 140, "y_score": 140, "get_param": [140, 141, 142], "set_param": [140, 141, 142], "newshap": 143, "read": [143, 195], "fastest": 143, "slowest": 143, "account": 143, "reshaped_arrai": 143, "fetch": 143, "sai": 143, "unspecifi": [143, 148], "i4": [145, 148, 187], "definit": 146, "ordin": 147, "_gesv": 147, "linearli": 147, "strang": 147, "2nd": 147, "ed": 147, "orlando": 147, "fl": 147, "academ": 147, "press": 147, "inc": 147, "1980": 147, "pg": 147, "x0": 147, "quicksort": 148, "mergesort": 148, "heapsort": 148, "timsort": 148, "radix": 148, "under": [148, 191], "field": 148, "string": 148, "ti": 148, "sorted_arrai": 148, "argsort": [148, 172], "indirect": 148, "lexsort": 148, "searchsort": 148, "character": 148, "worst": 148, "log": 148, "ye": 148, "datatyp": 148, "finer": 148, "temporari": 148, "lexicograph": 148, "led": 148, "undefin": 148, "rj": 148, "nanj": 148, "placement": 148, "introsort": 148, "progress": 148, "map": [148, 195], "abil": 148, "hardwir": 148, "nearli": [148, 194], "cpython": 148, "listsort": 148, "txt": 148, "nat": 148, "s10": 148, "height": 148, "ag": 148, "arthur": 148, "41": 148, "lancelot": 148, "galahad": 148, "8999999999999999": 148, "f8": 148, "emath": 149, "branch": 149, "cut": 149, "continu": 149, "curv": 149, "4j": 149, "nest": 150, "sum_along_axi": 151, "cumsum": 151, "cumul": 151, "trapz": 151, "integr": [151, 193], "trapezoid": 151, "individu": [151, 166], "pairwis": 151, "technic": 151, "fsum": 151, "slower": [151, 157, 170, 183, 194], "advis": 151, "small": [151, 196], "128": 151, "tensor1": [153, 156, 161, 167], "tensor2": [153, 156, 161, 167], "km": [153, 161], "momemt": 155, "d1": 155, "dn": 155, "moment": 155, "n_mode": 156, "generalis": [156, 196], "tradit": [156, 170], "inner_product": 156, "seen": [157, 196], "khatri_rao_product": 157, "prod": [157, 158, 194], "bigodot": 157, "intuit": 157, "kr_product": 157, "cum_prod": 157, "ij": 157, "revers": [158, 172], "kronecker_product": 158, "j_k": 158, "otim": [158, 170], "times_": 159, "multi_mode_dot": [159, 168], "matrix_or_vec_list": 160, "times_0": 160, "times_1": 160, "times_n": 160, "svd_threshold": [162, 163], "procrust": 164, "n_eigenvec": [166, 191], "flip_sign": 166, "u_based_flip_sign": 166, "n_iter_mask_imput": 166, "resolv": 166, "imput": 166, "callabl": 166, "eigen": 166, "indeterminaci": 166, "nn_type": 166, "nndsvd": 166, "noth": [166, 191, 195, 196], "repetit": 166, "batched_mod": 167, "batch": 167, "mttkrp": 168, "kr_factor": 168, "mttkrp2": 168, "mttkrp_part": 168, "tensor_idx": 168, "chr": 168, "op": 168, "tl_einsum": 168, "a_ax": 170, "b_ax": 170, "integer_lik": 170, "nth": 170, "0th": 170, "1th": 170, "forth": 170, "4400": 170, "4730": 170, "4532": 170, "4874": 170, "4664": 170, "5018": 170, "4796": 170, "5162": 170, "4928": 170, "5306": 170, "overload": 170, "abbcccdddd": 170, "aaaaabbbbbbcccccccdddddddd": 170, "acc": 170, "bdd": 170, "aaacccc": 170, "bbbdddd": 170, "aaaaacccccc": 170, "bbbbbdddddd": 170, "aaaaaaacccccccc": 170, "bbbbbbbdddddddd": 170, "incl": 170, "abbbbb": 170, "cddddd": 170, "aabbbbbb": 170, "ccdddddd": 170, "aaabbbbbbb": 170, "cccddddddd": 170, "aaaabbbbbbbb": 170, "ccccdddddddd": 170, "abb": 170, "cdd": 170, "aaabbbb": 170, "cccdddd": 170, "aaaaabbbbbb": 170, "cccccdddddd": 170, "aaaaaaabbbbbbbb": 170, "cccccccdddddddd": 170, "abbbcccccddddddd": 170, "aabbbbccccccdddddddd": 170, "acccbbdddd": 170, "aaaaacccccccbbbbbbdddddddd": 170, "unchang": [172, 188], "atleast2d": 172, "moveaxi": 172, "sort": 172, "invert": 172, "transposit": 172, "4d": 173, "rank_k": 173, "left_dim_k": 173, "right_dim_k": 173, "rank_": 173, "output_tensor": [173, 177], "reassembl": [174, 178], "factor_list": 176, "n_pad": 176, "pad_boundari": 176, "bond": 176, "padded_factor_list": 176, "tucker_multi_mode_dot": 180, "skip_factor": [181, 182, 183], "transpose_factor": [181, 182, 183], "lengh": 181, "static": [185, 192], "asarrai": 186, "yield": 186, "xv": 186, "yv": 186, "80": 186, "90": 186, "zeros_lik": 187, "overrid": 188, "newli": 188, "impli": 188, "full_lik": 188, "666": 190, "ubiquit": 191, "exactli": [191, 196], "hood": 191, "decid": 191, "introduct": 191, "default_backend": 191, "haven": 191, "complexifi": 191, "nor": 191, "tradition": [191, 195], "ctx": 191, "floattensor": 191, "cuda": 191, "characteris": 191, "trivial_fun": 191, "trivial": 191, "isol": 191, "random_tensor": [191, 193], "decomp": 191, "rec": 191, "everyth": 191, "post": 191, "posthoc": 191, "overhead": 191, "use_static_dispatch": 191, "use_dynamic_dispatch": 191, "studi": 192, "overview": 193, "familiar": 193, "submodul": 193, "contrib": [193, 194, 196], "plugin": 193, "plug": 193, "plai": 193, "ons": 193, "mention": 193, "anyth": 193, "adapt": [193, 194], "subtleti": 193, "regardless": 193, "10x10x10": 193, "explicit": [193, 194], "zeroth": 193, "random_tuck": 193, "3x4x5": 193, "tucker_to_vec": 193, "aptli": 193, "hand": 193, "crafter": 193, "craft": 193, "tg": 193, "set_tenalg_backend": 193, "liner": 193, "optimis": 193, "applyt": 193, "unseen": 193, "fulli": [193, 196], "pydata": [193, 194], "nativ": 194, "represent": [194, 196], "lack": 194, "opinion": 194, "decis": 194, "partial_tuck": 194, "robust_pca": 194, "mirror": 194, "coo": 194, "coord": 194, "rewritten": 194, "properli": 194, "densifi": 194, "watch": 194, "environ": 194, "sparse_auto_densifi": 194, "runtimeerror": 194, "awar": 194, "protect": 194, "caveat": 194, "proport": 194, "stl": 194, "1001": 194, "starting_weight": 194, "nnz": 194, "starting_factor": 194, "recompos": 194, "worri": 194, "5044": 194, "nbyte": 194, "1e9": 194, "gb": 194, "000161408": 194, "024016": 194, "dense_cp": 194, "3858051300048828": 194, "sparse_parafac": 194, "sparse_cp": 194, "053689002990723": 194, "spsolv": 194, "umfpack": 194, "x_1": 195, "x_2": 195, "matriz": 195, "i_0": 195, "classic": [195, 196], "i_m": 195, "substack": 195, "original_shap": 195, "greatest": 196, "compactli": 196, "tutori": 196, "Such": 196, "canon": 196, "polyad": 196, "super": 196, "smaller": 196, "000e": 196, "340e": 196, "617e": 196, "914e": 196, "475e": 196, "746e": 196, "physic": 196, "edg": 196, "connect": 196, "ldot": 196, "i_d": 196, "approx": 196, "alpha_1": 196, "alpha_": 196, "g_1": 196, "g_2": 196, "alpha_2": 196, "g_3": 196, "i_3": 196, "alpha_3": 196, "g_d": 196, "address": 196, "tensor_train": 196, "tensor_train_cross": 196, "matrix_product_st": 196, "tt_to_tensor": 196, "decim": 196, "seri": 197, "y_i": 197, "langl": 197, "rangl": 197, "r_1": 197, "r_n": 197, "krusal": 197, "cpregress": 197, "guo": 197, "kotsia": 197, "patra": 197, "816": 197, "827": 197}, "objects": {"": [[29, 0, 0, "-", "tensorly"]], "tensorly": [[31, 1, 1, "", "abs"], [32, 1, 1, "", "all"], [33, 1, 1, "", "arange"], [34, 1, 1, "", "argmax"], [35, 1, 1, "", "argmin"], [36, 1, 1, "", "backend_context"], [29, 0, 0, "-", "base"], [45, 1, 1, "", "check_random_state"], [46, 1, 1, "", "clip"], [47, 1, 1, "", "concatenate"], [48, 1, 1, "", "conj"], [49, 1, 1, "", "context"], [29, 0, 0, "-", "contrib"], [59, 1, 1, "", "copy"], [29, 0, 0, "-", "cp_tensor"], [29, 0, 0, "-", "datasets"], [29, 0, 0, "-", "decomposition"], [100, 1, 1, "", "diag"], [101, 1, 1, "", "dot"], [102, 1, 1, "", "eps"], [103, 1, 1, "", "eye"], [104, 1, 1, "", "finfo"], [105, 1, 1, "", "get_backend"], [106, 1, 1, "", "index"], [107, 1, 1, "", "index_update"], [108, 1, 1, "", "is_tensor"], [109, 1, 1, "", "kr"], [110, 1, 1, "", "kron"], [111, 1, 1, "", "matmul"], [112, 1, 1, "", "max"], [113, 1, 1, "", "mean"], [29, 0, 0, "-", "metrics"], [118, 1, 1, "", "min"], [119, 1, 1, "", "moveaxis"], [120, 1, 1, "", "ndim"], [121, 1, 1, "", "norm"], [122, 1, 1, "", "ones"], [29, 0, 0, "-", "parafac2_tensor"], [29, 0, 0, "-", "plugins"], [29, 0, 0, "-", "preprocessing"], [133, 1, 1, "", "prod"], [134, 1, 1, "", "qr"], [29, 0, 0, "-", "random"], [29, 0, 0, "-", "regression"], [143, 1, 1, "", "reshape"], [144, 1, 1, "", "set_backend"], [145, 1, 1, "", "shape"], [146, 1, 1, "", "sign"], [147, 1, 1, "", "solve"], [148, 1, 1, "", "sort"], [149, 1, 1, "", "sqrt"], [150, 1, 1, "", "stack"], [151, 1, 1, "", "sum"], [29, 0, 0, "-", "tenalg"], [169, 1, 1, "", "tensor"], [170, 1, 1, "", "tensordot"], [171, 1, 1, "", "to_numpy"], [172, 1, 1, "", "transpose"], [29, 0, 0, "-", "tt_matrix"], [29, 0, 0, "-", "tt_tensor"], [29, 0, 0, "-", "tucker_tensor"], [184, 1, 1, "", "use_dynamic_dispatch"], [185, 1, 1, "", "use_static_dispatch"], [186, 1, 1, "", "where"], [187, 1, 1, "", "zeros"], [188, 1, 1, "", "zeros_like"]], "tensorly.base": [[37, 1, 1, "", "fold"], [38, 1, 1, "", "partial_fold"], [39, 1, 1, "", "partial_tensor_to_vec"], [40, 1, 1, "", "partial_unfold"], [41, 1, 1, "", "partial_vec_to_tensor"], [42, 1, 1, "", "tensor_to_vec"], [43, 1, 1, "", "unfold"], [44, 1, 1, "", "vec_to_tensor"]], "tensorly.contrib.decomposition": [[50, 1, 1, "", "tensor_train_OI"], [51, 1, 1, "", "tensor_train_cross"]], "tensorly.contrib": [[29, 0, 0, "-", "sparse"]], "tensorly.contrib.sparse.decomposition": [[52, 1, 1, "", "non_negative_parafac"], [53, 1, 1, "", "non_negative_tucker"], [54, 1, 1, "", "parafac"], [55, 1, 1, "", "partial_tucker"], [56, 1, 1, "", "robust_pca"], [57, 1, 1, "", "symmetric_parafac_power_iteration"], [58, 1, 1, "", "tucker"]], "tensorly.cp_tensor": [[60, 1, 1, "", "cp_mode_dot"], [61, 1, 1, "", "cp_norm"], [62, 1, 1, "", "cp_normalize"], [63, 1, 1, "", "cp_permute_factors"], [64, 1, 1, "", "cp_to_tensor"], [65, 1, 1, "", "cp_to_unfolded"], [66, 1, 1, "", "cp_to_vec"]], "tensorly.datasets": [[67, 1, 1, "", "load_IL2data"], [68, 1, 1, "", "load_covid19_serology"], [69, 1, 1, "", "load_indian_pines"], [70, 1, 1, "", "load_kinetic"]], "tensorly.datasets.synthetic": [[71, 1, 1, "", "gen_image"]], "tensorly.decomposition": [[72, 2, 1, "", "CP"], [73, 2, 1, "", "CPPower"], [74, 2, 1, "", "CP_NN_HALS"], [75, 2, 1, "", "ConstrainedCP"], [76, 2, 1, "", "Parafac2"], [77, 2, 1, "", "RandomizedCP"], [78, 2, 1, "", "SymmetricCP"], [79, 2, 1, "", "TensorRing"], [80, 2, 1, "", "TensorTrain"], [81, 2, 1, "", "TensorTrainMatrix"], [82, 2, 1, "", "Tucker"], [83, 1, 1, "", "constrained_parafac"], [84, 1, 1, "", "non_negative_parafac"], [85, 1, 1, "", "non_negative_parafac_hals"], [86, 1, 1, "", "non_negative_tucker"], [87, 1, 1, "", "non_negative_tucker_hals"], [88, 1, 1, "", "parafac"], [30, 1, 1, "", "parafac2"], [89, 1, 1, "", "parafac_power_iteration"], [90, 1, 1, "", "partial_tucker"], [91, 1, 1, "", "power_iteration"], [92, 1, 1, "", "randomised_parafac"], [93, 1, 1, "", "robust_pca"], [94, 1, 1, "", "sample_khatri_rao"], [95, 1, 1, "", "symmetric_parafac_power_iteration"], [96, 1, 1, "", "symmetric_power_iteration"], [97, 1, 1, "", "tensor_ring"], [98, 1, 1, "", "tensor_train"], [99, 1, 1, "", "tensor_train_matrix"], [189, 1, 1, "", "tucker"]], "tensorly.decomposition.CP": [[72, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CPPower": [[73, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CP_NN_HALS": [[74, 3, 1, "", "fit_transform"]], "tensorly.decomposition.ConstrainedCP": [[75, 3, 1, "", "fit_transform"]], "tensorly.decomposition.Parafac2": [[76, 3, 1, "", "fit_transform"]], "tensorly.metrics": [[114, 1, 1, "", "correlation_index"]], "tensorly.metrics.factors": [[115, 1, 1, "", "congruence_coefficient"]], "tensorly.metrics.regression": [[116, 1, 1, "", "MSE"], [117, 1, 1, "", "RMSE"]], "tensorly.parafac2_tensor": [[123, 1, 1, "", "parafac2_to_slice"], [124, 1, 1, "", "parafac2_to_slices"], [125, 1, 1, "", "parafac2_to_tensor"], [126, 1, 1, "", "parafac2_to_unfolded"], [127, 1, 1, "", "parafac2_to_vec"]], "tensorly.plugins": [[128, 1, 1, "", "use_cuquantum"], [129, 1, 1, "", "use_default_einsum"], [130, 1, 1, "", "use_opt_einsum"]], "tensorly.preprocessing": [[131, 1, 1, "", "svd_compress_tensor_slices"], [132, 1, 1, "", "svd_decompress_parafac2_tensor"]], "tensorly.random": [[135, 1, 1, "", "random_cp"], [136, 1, 1, "", "random_parafac2"], [137, 1, 1, "", "random_tt"], [138, 1, 1, "", "random_tt_matrix"], [139, 1, 1, "", "random_tucker"]], "tensorly.regression": [[140, 2, 1, "", "CP_PLSR"]], "tensorly.regression.CP_PLSR": [[140, 3, 1, "", "fit"], [140, 3, 1, "", "fit_transform"], [140, 3, 1, "", "get_params"], [140, 3, 1, "", "predict"], [140, 3, 1, "", "score"], [140, 3, 1, "", "set_params"], [140, 3, 1, "", "transform"]], "tensorly.regression.cp_regression": [[141, 2, 1, "", "CPRegressor"]], "tensorly.regression.cp_regression.CPRegressor": [[141, 3, 1, "", "fit"], [141, 3, 1, "", "get_params"], [141, 3, 1, "", "predict"], [141, 3, 1, "", "set_params"]], "tensorly.regression.tucker_regression": [[142, 2, 1, "", "TuckerRegressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[142, 3, 1, "", "fit"], [142, 3, 1, "", "get_params"], [142, 3, 1, "", "predict"], [142, 3, 1, "", "set_params"]], "tensorly.tenalg": [[152, 1, 1, "", "backend_context"], [153, 1, 1, "", "batched_outer"], [154, 1, 1, "", "get_backend"], [155, 1, 1, "", "higher_order_moment"], [156, 1, 1, "", "inner"], [157, 1, 1, "", "khatri_rao"], [158, 1, 1, "", "kronecker"], [159, 1, 1, "", "mode_dot"], [160, 1, 1, "", "multi_mode_dot"], [161, 1, 1, "", "outer"], [165, 1, 1, "", "set_backend"], [166, 1, 1, "", "svd_interface"], [167, 1, 1, "", "tensordot"], [168, 1, 1, "", "unfolding_dot_khatri_rao"]], "tensorly.tenalg.proximal": [[162, 1, 1, "", "procrustes"], [163, 1, 1, "", "soft_thresholding"], [164, 1, 1, "", "svd_thresholding"]], "tensorly.tt_matrix": [[173, 1, 1, "", "tt_matrix_to_tensor"], [174, 1, 1, "", "tt_matrix_to_unfolded"], [175, 1, 1, "", "tt_matrix_to_vec"]], "tensorly.tt_tensor": [[176, 1, 1, "", "pad_tt_rank"], [177, 1, 1, "", "tt_to_tensor"], [178, 1, 1, "", "tt_to_unfolded"], [179, 1, 1, "", "tt_to_vec"]], "tensorly.tucker_tensor": [[180, 1, 1, "", "tucker_mode_dot"], [181, 1, 1, "", "tucker_to_tensor"], [182, 1, 1, "", "tucker_to_unfolded"], [183, 1, 1, "", "tucker_to_vec"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"about": 0, "u": 0, "origin": 0, "core": [0, 29], "develop": [0, 25], "support": 0, "practic": [1, 15, 23], "applic": [1, 15], "tensor": [1, 4, 6, 9, 10, 11, 13, 15, 16, 17, 18, 19, 23, 29, 79, 169, 191, 193, 195, 196, 197], "method": [1, 15], "non": [2, 9, 10], "neg": [2, 9, 10], "parafac": [2, 7, 9, 54, 88, 196], "decomposit": [2, 3, 4, 6, 8, 9, 10, 15, 29, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 189, 193, 196], "il": 2, "2": 2, "respons": 2, "data": [2, 12], "covid": 3, "19": 3, "serologi": 3, "dataset": [3, 29, 67, 68, 69, 70, 71, 193], "analysi": 3, "cp": [3, 8, 9, 13, 18, 29, 72, 196], "introduct": [3, 8, 9, 10, 13], "appli": 3, "thi": 3, "tensorli": [3, 8, 9, 15, 17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193], "inspect": [3, 11], "biolog": 3, "insight": 3, "from": 3, "compon": [3, 11], "refer": [3, 8, 9, 10, 11, 24, 29, 195, 196, 197], "imag": 4, "compress": [4, 12], "via": 4, "comput": [5, 11, 14, 20, 21, 190], "time": [5, 14, 20, 21, 190], "us": [7, 8, 191], "line": 7, "search": 7, "constrain": 8, "0": [8, 9], "7": 8, "one": 8, "constraint": 8, "all": [8, 32], "mode": 8, "some": 8, "differ": 8, "scalar": 8, "input": 8, "each": 8, "6": 9, "creat": [9, 10, 11, 12, 13, 195], "synthet": [9, 10, 11, 12, 13, 71], "hal": [9, 10], "exact": 9, "comparison": [9, 10], "tucker": [10, 19, 29, 58, 82, 189, 196], "fista": 10, "activ": 10, "set": [10, 29, 197], "demonstr": 11, "parafac2": [11, 12, 29, 30, 76], "fit": [11, 12], "perform": [11, 29], "metric": [11, 29, 114, 115, 116, 117, 193], "visual": 11, "converg": 11, "rate": 11, "speed": 12, "up": 12, "svd": 12, "function": [12, 22, 24, 29, 191], "mani": 12, "row": 12, "few": 12, "column": 12, "without": 12, "lossless": 12, "lossi": 12, "i": [12, 191], "approxim": 12, "low": 12, "rank": 12, "permut": 13, "factor": [13, 115], "target": 13, "cptensor": 13, "galleri": 15, "exampl": [15, 24, 194], "content": 15, "gener": 15, "regress": [15, 17, 18, 19, 29, 116, 117, 140, 141, 142, 193, 197], "basic": [16, 191, 195], "oper": [16, 29], "backend": [22, 23, 29, 191, 193, 194], "system": [22, 191], "how": [22, 23, 191], "work": [22, 23], "The": 22, "class": [22, 23, 29], "load": 22, "": [22, 191], "dispatch": [22, 191], "contribut": 23, "guidelin": 23, "compat": 23, "In": 23, "context": [23, 29, 49, 191], "index": [23, 29, 106], "assign": [23, 29], "numpi": [23, 29], "style": [23, 29], "test": [23, 28], "interfac": [23, 29], "wrapper": 23, "write": 24, "document": [24, 28], "docstr": 24, "modul": 24, "titl": 24, "guid": [25, 192], "instal": 28, "pre": 28, "requisit": 28, "pip": 28, "recommend": 28, "conda": 28, "clone": 28, "github": 28, "repositori": 28, "run": 28, "compil": 28, "why": [28, 191, 194], "python": 28, "3": 28, "api": 29, "unifi": 29, "avail": 29, "arrai": 29, "creation": 29, "manipul": [29, 193], "algebra": [29, 193], "base": [29, 37, 38, 39, 40, 41, 42, 43, 44], "form": [29, 196], "cp_tensor": [29, 60, 61, 62, 63, 64, 65, 66], "tucker_tensor": [29, 180, 181, 182, 183], "tt": 29, "mp": 29, "tt_tensor": [29, 176, 177, 178, 179], "matric": 29, "tt_matrix": [29, 173, 174, 175], "parafac2_tensor": [29, 123, 124, 125, 126, 127], "tenalg": [29, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "preprocess": [29, 131, 132], "measur": 29, "sampl": [29, 193], "random": [29, 135, 136, 137, 138, 139, 193], "plugin": [29, 128, 129, 130], "experiment": [29, 193], "featur": [29, 193], "contrib": [29, 50, 51, 52, 53, 54, 55, 56, 57, 58], "spars": [29, 52, 53, 54, 55, 56, 57, 58, 194], "ab": 31, "arang": 33, "argmax": 34, "argmin": 35, "backend_context": [36, 152], "fold": [37, 195], "partial_fold": 38, "partial_tensor_to_vec": 39, "partial_unfold": 40, "partial_vec_to_tensor": 41, "tensor_to_vec": 42, "unfold": [43, 195], "vec_to_tensor": 44, "check_random_st": 45, "clip": 46, "concaten": 47, "conj": 48, "tensor_train_oi": 50, "tensor_train_cross": 51, "non_negative_parafac": [52, 84], "non_negative_tuck": [53, 86], "partial_tuck": [55, 90], "robust_pca": [56, 93], "symmetric_parafac_power_iter": [57, 95], "copi": 59, "cp_mode_dot": 60, "cp_norm": 61, "cp_normal": 62, "cp_permute_factor": 63, "cp_to_tensor": 64, "cp_to_unfold": 65, "cp_to_vec": 66, "load_il2data": 67, "load_covid19_serologi": 68, "load_indian_pin": 69, "load_kinet": 70, "gen_imag": 71, "cppower": 73, "cp_nn_hal": 74, "constrainedcp": 75, "randomizedcp": 77, "symmetriccp": 78, "tensortrain": 80, "tensortrainmatrix": 81, "constrained_parafac": 83, "non_negative_parafac_h": 85, "non_negative_tucker_h": 87, "parafac_power_iter": 89, "power_iter": 91, "randomised_parafac": 92, "sample_khatri_rao": 94, "symmetric_power_iter": 96, "tensor_r": 97, "tensor_train": 98, "tensor_train_matrix": 99, "diag": 100, "dot": 101, "ep": 102, "ey": 103, "finfo": 104, "get_backend": [105, 154], "index_upd": 107, "is_tensor": 108, "kr": 109, "kron": 110, "matmul": 111, "max": 112, "mean": 113, "correlation_index": 114, "congruence_coeffici": 115, "mse": 116, "rmse": 117, "min": 118, "moveaxi": 119, "ndim": 120, "norm": 121, "ones": 122, "parafac2_to_slic": [123, 124], "parafac2_to_tensor": 125, "parafac2_to_unfold": 126, "parafac2_to_vec": 127, "use_cuquantum": 128, "use_default_einsum": 129, "use_opt_einsum": 130, "svd_compress_tensor_slic": 131, "svd_decompress_parafac2_tensor": 132, "prod": 133, "qr": 134, "random_cp": 135, "random_parafac2": 136, "random_tt": 137, "random_tt_matrix": 138, "random_tuck": 139, "cp_plsr": 140, "cp_regress": 141, "cpregressor": 141, "tucker_regress": 142, "tuckerregressor": 142, "reshap": 143, "set_backend": [144, 165], "shape": 145, "sign": 146, "solv": 147, "sort": 148, "sqrt": 149, "stack": 150, "sum": 151, "batched_out": 153, "higher_order_mo": 155, "inner": 156, "khatri_rao": 157, "kroneck": 158, "mode_dot": 159, "multi_mode_dot": 160, "outer": 161, "proxim": [162, 163, 164], "procrust": 162, "soft_threshold": 163, "svd_threshold": 164, "svd_interfac": 166, "tensordot": [167, 170], "unfolding_dot_khatri_rao": 168, "to_numpi": 171, "transpos": 172, "tt_matrix_to_tensor": 173, "tt_matrix_to_unfold": 174, "tt_matrix_to_vec": 175, "pad_tt_rank": 176, "tt_to_tensor": 177, "tt_to_unfold": 178, "tt_to_vec": 179, "tucker_mode_dot": 180, "tucker_to_tensor": 181, "tucker_to_unfold": 182, "tucker_to_vec": 183, "use_dynamic_dispatch": 184, "use_static_dispatch": 185, "where": 186, "zero": 187, "zeros_lik": 188, "do": 191, "chang": 191, "case": 191, "studi": 191, "pytorch": 191, "On": 191, "cpu": 191, "gpu": 191, "static": 191, "user": 192, "quick": 193, "start": 193, "organ": 193, "separ": 194, "algorithm": 194, "usag": 194, "miss": 194, "valu": 194, "candecomp": 196, "matrix": 196, "product": 196, "state": 196, "train": 196, "implement": 196}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "Origin": [[0, "origin"]], "Core developers": [[0, "core-developers"]], "Supporters": [[0, "supporters"]], "Practical applications of tensor methods": [[1, "practical-applications-of-tensor-methods"], [15, "practical-applications-of-tensor-methods"]], "Non-negative PARAFAC Decomposition of IL-2 Response Data": [[2, "non-negative-parafac-decomposition-of-il-2-response-data"]], "COVID-19 Serology Dataset Analysis with CP": [[3, "covid-19-serology-dataset-analysis-with-cp"]], "Introduction": [[3, "introduction"], [8, "introduction"], [9, "introduction"], [10, "introduction"], [13, "introduction"]], "Apply CP decomposition to this dataset with Tensorly": [[3, "apply-cp-decomposition-to-this-dataset-with-tensorly"]], "Inspect the biological insights from CP components": [[3, "inspect-the-biological-insights-from-cp-components"]], "References": [[3, "references"], [8, "references"], [9, "references"], [10, "references"], [11, "references"], [195, "references"], [196, "references"], [197, "references"]], "Image compression via tensor decomposition": [[4, "image-compression-via-tensor-decomposition"]], "Computation times": [[5, "computation-times"], [14, "computation-times"], [20, "computation-times"], [21, "computation-times"], [190, "computation-times"]], "Tensor decomposition": [[6, "tensor-decomposition"], [15, "tensor-decomposition"], [193, "tensor-decomposition"], [196, "tensor-decomposition"]], "Using line search with PARAFAC": [[7, "using-line-search-with-parafac"]], "Constrained CP decomposition in Tensorly >=0.7": [[8, "constrained-cp-decomposition-in-tensorly-0-7"]], "Using one constraint for all modes": [[8, "using-one-constraint-for-all-modes"]], "Using one constraint for some modes": [[8, "using-one-constraint-for-some-modes"]], "Using a constraint with the different scalar inputs for each mode": [[8, "using-a-constraint-with-the-different-scalar-inputs-for-each-mode"]], "Using different constraints for each mode": [[8, "using-different-constraints-for-each-mode"]], "Non-negative CP decomposition in Tensorly >=0.6": [[9, "non-negative-cp-decomposition-in-tensorly-0-6"]], "Create synthetic tensor": [[9, "create-synthetic-tensor"], [10, "create-synthetic-tensor"], [11, "create-synthetic-tensor"], [13, "create-synthetic-tensor"]], "Non-negative Parafac": [[9, "non-negative-parafac"]], "Non-negative Parafac with HALS": [[9, "non-negative-parafac-with-hals"]], "Non-negative Parafac with Exact HALS": [[9, "non-negative-parafac-with-exact-hals"]], "Comparison": [[9, "comparison"], [10, "comparison"]], "Non-negative Tucker decomposition": [[10, "non-negative-tucker-decomposition"]], "Non-negative Tucker": [[10, "non-negative-tucker"]], "Non-negative Tucker with HALS and FISTA": [[10, "non-negative-tucker-with-hals-and-fista"]], "Non-negative Tucker with HALS and Active Set": [[10, "non-negative-tucker-with-hals-and-active-set"]], "Demonstration of PARAFAC2": [[11, "demonstration-of-parafac2"]], "Fit a PARAFAC2 tensor": [[11, "fit-a-parafac2-tensor"]], "Compute performance metrics": [[11, "compute-performance-metrics"]], "Visualize the components": [[11, "visualize-the-components"]], "Inspect the convergence rate": [[11, "inspect-the-convergence-rate"]], "Speeding up PARAFAC2 with SVD compression": [[12, "speeding-up-parafac2-with-svd-compression"]], "Function to create synthetic data": [[12, "function-to-create-synthetic-data"]], "Compressing data with many rows and few columns": [[12, "compressing-data-with-many-rows-and-few-columns"]], "Fitting without compression": [[12, "fitting-without-compression"], [12, "id1"]], "Fitting with lossless compression": [[12, "fitting-with-lossless-compression"], [12, "id2"]], "Fitting with lossy compression": [[12, "fitting-with-lossy-compression"], [12, "id3"]], "Compressing data that is approximately low-rank": [[12, "compressing-data-that-is-approximately-low-rank"]], "Permuting CP factors": [[13, "permuting-cp-factors"]], "Permute target CPTensors": [[13, "permute-target-cptensors"]], "Gallery of examples": [[15, "gallery-of-examples"]], "Contents": [[15, "contents"]], "General examples": [[15, "general-examples"]], "Tensor regression with tensorly": [[15, "tensor-regression-with-tensorly"], [17, "tensor-regression-with-tensorly"]], "Basic tensor operations": [[16, "basic-tensor-operations"]], "CP tensor regression": [[18, "cp-tensor-regression"]], "Tucker tensor regression": [[19, "tucker-tensor-regression"]], "Backend System": [[22, "backend-system"]], "How the Backend System Works": [[22, "how-the-backend-system-works"]], "The Backend class": [[22, "the-backend-class"]], "Loading a backend": [[22, "loading-a-backend"]], "Backend function\u2019s dispatching": [[22, "backend-function-s-dispatching"]], "Contributing": [[23, "contributing"]], "How-to": [[23, "how-to"]], "Guidelines": [[23, "guidelines"]], "Backend compatibility": [[23, "backend-compatibility"]], "In practice": [[23, "in-practice"]], "Context of a tensor": [[23, "context-of-a-tensor"], [29, "context-of-a-tensor"], [191, "context-of-a-tensor"]], "Index assignment (\u201cNumPy style\u201d)": [[23, "index-assignment-numpy-style"]], "Testing the class interface": [[23, "testing-the-class-interface"]], "How the class wrapper test works": [[23, "how-the-class-wrapper-test-works"]], "Writing documentation": [[24, "writing-documentation"]], "Docstrings": [[24, "docstrings"]], "Refer to functions or modules": [[24, "refer-to-functions-or-modules"]], "Titles": [[24, "titles"]], "Examples": [[24, "examples"]], "Development guide": [[25, "development-guide"]], "Installing tensorly": [[28, "installing-tensorly"]], "Pre-requisite": [[28, "pre-requisite"]], "Installing with pip (recommended)": [[28, "installing-with-pip-recommended"]], "Installing with Conda": [[28, "installing-with-conda"]], "Cloning the github repository": [[28, "cloning-the-github-repository"]], "Running the tests": [[28, "running-the-tests"]], "Compiling the documentation": [[28, "compiling-the-documentation"]], "Why Python 3?": [[28, "why-python-3"]], "API reference": [[29, "api-reference"]], "Unified backend interface (tensorly)": [[29, "unified-backend-interface-tensorly"]], "Setting the backend": [[29, "setting-the-backend"]], "Index assignement (\u201cNumPy style\u201d)": [[29, "index-assignement-numpy-style"]], "Available backend functions": [[29, "available-backend-functions"]], "Array creation": [[29, "array-creation"]], "Array manipulation": [[29, "array-manipulation"]], "Algebraic operations": [[29, "algebraic-operations"]], "Core functions (tensorly.base)": [[29, "module-tensorly.base"]], "Tensors in CP form (tensorly.cp_tensor)": [[29, "module-tensorly.cp_tensor"]], "Tensors in Tucker form (tensorly.tucker_tensor)": [[29, "module-tensorly.tucker_tensor"]], "Tensors in TT (MPS) form (tensorly.tt_tensor)": [[29, "module-tensorly.tt_tensor"]], "Matrices in TT form (tensorly.tt_matrix)": [[29, "module-tensorly.tt_matrix"]], "Tensors in PARAFAC2 form (tensorly.parafac2_tensor)": [[29, "module-tensorly.parafac2_tensor"]], "Tensor Algebra (tensorly.tenalg)": [[29, "tensor-algebra-tensorly-tenalg"]], "Available functions": [[29, "available-functions"]], "Tensor Algebra Backend": [[29, "tensor-algebra-backend"]], "Tensor Decomposition (tensorly.decomposition)": [[29, "module-tensorly.decomposition"]], "Classes": [[29, "classes"]], "Functions": [[29, "functions"]], "Preprocessing (tensorly.preprocessing)": [[29, "module-tensorly.preprocessing"]], "Tensor Regression (tensorly.regression)": [[29, "module-tensorly.regression"]], "Performance measures (tensorly.metrics)": [[29, "module-tensorly.metrics"]], "Sampling tensors (tensorly.random)": [[29, "module-tensorly.random"]], "Datasets (tensorly.datasets)": [[29, "module-tensorly.datasets"]], "Plugin functionalities (tensorly.plugins)": [[29, "plugin-functionalities-tensorly-plugins"]], "Experimental features (tensorly.contrib)": [[29, "module-tensorly.contrib"]], "Sparse tensors": [[29, "sparse-tensors"]], "tensorly.decomposition.parafac2": [[30, "tensorly-decomposition-parafac2"]], "tensorly.abs": [[31, "tensorly-abs"]], "tensorly.all": [[32, "tensorly-all"]], "tensorly.arange": [[33, "tensorly-arange"]], "tensorly.argmax": [[34, "tensorly-argmax"]], "tensorly.argmin": [[35, "tensorly-argmin"]], "tensorly.backend_context": [[36, "tensorly-backend-context"]], "tensorly.base.fold": [[37, "tensorly-base-fold"]], "tensorly.base.partial_fold": [[38, "tensorly-base-partial-fold"]], "tensorly.base.partial_tensor_to_vec": [[39, "tensorly-base-partial-tensor-to-vec"]], "tensorly.base.partial_unfold": [[40, "tensorly-base-partial-unfold"]], "tensorly.base.partial_vec_to_tensor": [[41, "tensorly-base-partial-vec-to-tensor"]], "tensorly.base.tensor_to_vec": [[42, "tensorly-base-tensor-to-vec"]], "tensorly.base.unfold": [[43, "tensorly-base-unfold"]], "tensorly.base.vec_to_tensor": [[44, "tensorly-base-vec-to-tensor"]], "tensorly.check_random_state": [[45, "tensorly-check-random-state"]], "tensorly.clip": [[46, "tensorly-clip"]], "tensorly.concatenate": [[47, "tensorly-concatenate"]], "tensorly.conj": [[48, "tensorly-conj"]], "tensorly.context": [[49, "tensorly-context"]], "tensorly.contrib.decomposition.tensor_train_OI": [[50, "tensorly-contrib-decomposition-tensor-train-oi"]], "tensorly.contrib.decomposition.tensor_train_cross": [[51, "tensorly-contrib-decomposition-tensor-train-cross"]], "tensorly.contrib.sparse.decomposition.non_negative_parafac": [[52, "tensorly-contrib-sparse-decomposition-non-negative-parafac"]], "tensorly.contrib.sparse.decomposition.non_negative_tucker": [[53, "tensorly-contrib-sparse-decomposition-non-negative-tucker"]], "tensorly.contrib.sparse.decomposition.parafac": [[54, "tensorly-contrib-sparse-decomposition-parafac"]], "tensorly.contrib.sparse.decomposition.partial_tucker": [[55, "tensorly-contrib-sparse-decomposition-partial-tucker"]], "tensorly.contrib.sparse.decomposition.robust_pca": [[56, "tensorly-contrib-sparse-decomposition-robust-pca"]], "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration": [[57, "tensorly-contrib-sparse-decomposition-symmetric-parafac-power-iteration"]], "tensorly.contrib.sparse.decomposition.tucker": [[58, "tensorly-contrib-sparse-decomposition-tucker"]], "tensorly.copy": [[59, "tensorly-copy"]], "tensorly.cp_tensor.cp_mode_dot": [[60, "tensorly-cp-tensor-cp-mode-dot"]], "tensorly.cp_tensor.cp_norm": [[61, "tensorly-cp-tensor-cp-norm"]], "tensorly.cp_tensor.cp_normalize": [[62, "tensorly-cp-tensor-cp-normalize"]], "tensorly.cp_tensor.cp_permute_factors": [[63, "tensorly-cp-tensor-cp-permute-factors"]], "tensorly.cp_tensor.cp_to_tensor": [[64, "tensorly-cp-tensor-cp-to-tensor"]], "tensorly.cp_tensor.cp_to_unfolded": [[65, "tensorly-cp-tensor-cp-to-unfolded"]], "tensorly.cp_tensor.cp_to_vec": [[66, "tensorly-cp-tensor-cp-to-vec"]], "tensorly.datasets.load_IL2data": [[67, "tensorly-datasets-load-il2data"]], "tensorly.datasets.load_covid19_serology": [[68, "tensorly-datasets-load-covid19-serology"]], "tensorly.datasets.load_indian_pines": [[69, "tensorly-datasets-load-indian-pines"]], "tensorly.datasets.load_kinetic": [[70, "tensorly-datasets-load-kinetic"]], "tensorly.datasets.synthetic.gen_image": [[71, "tensorly-datasets-synthetic-gen-image"]], "tensorly.decomposition.CP": [[72, "tensorly-decomposition-cp"]], "tensorly.decomposition.CPPower": [[73, "tensorly-decomposition-cppower"]], "tensorly.decomposition.CP_NN_HALS": [[74, "tensorly-decomposition-cp-nn-hals"]], "tensorly.decomposition.ConstrainedCP": [[75, "tensorly-decomposition-constrainedcp"]], "tensorly.decomposition.Parafac2": [[76, "tensorly-decomposition-parafac2"]], "tensorly.decomposition.RandomizedCP": [[77, "tensorly-decomposition-randomizedcp"]], "tensorly.decomposition.SymmetricCP": [[78, "tensorly-decomposition-symmetriccp"]], "tensorly.decomposition.TensorRing": [[79, "tensorly-decomposition-tensorring"]], "tensorly.decomposition.TensorTrain": [[80, "tensorly-decomposition-tensortrain"]], "tensorly.decomposition.TensorTrainMatrix": [[81, "tensorly-decomposition-tensortrainmatrix"]], "tensorly.decomposition.Tucker": [[82, "tensorly-decomposition-tucker"]], "tensorly.decomposition.constrained_parafac": [[83, "tensorly-decomposition-constrained-parafac"]], "tensorly.decomposition.non_negative_parafac": [[84, "tensorly-decomposition-non-negative-parafac"]], "tensorly.decomposition.non_negative_parafac_hals": [[85, "tensorly-decomposition-non-negative-parafac-hals"]], "tensorly.decomposition.non_negative_tucker": [[86, "tensorly-decomposition-non-negative-tucker"]], "tensorly.decomposition.non_negative_tucker_hals": [[87, "tensorly-decomposition-non-negative-tucker-hals"]], "tensorly.decomposition.parafac": [[88, "tensorly-decomposition-parafac"]], "tensorly.decomposition.parafac_power_iteration": [[89, "tensorly-decomposition-parafac-power-iteration"]], "tensorly.decomposition.partial_tucker": [[90, "tensorly-decomposition-partial-tucker"]], "tensorly.decomposition.power_iteration": [[91, "tensorly-decomposition-power-iteration"]], "tensorly.decomposition.randomised_parafac": [[92, "tensorly-decomposition-randomised-parafac"]], "tensorly.decomposition.robust_pca": [[93, "tensorly-decomposition-robust-pca"]], "tensorly.decomposition.sample_khatri_rao": [[94, "tensorly-decomposition-sample-khatri-rao"]], "tensorly.decomposition.symmetric_parafac_power_iteration": [[95, "tensorly-decomposition-symmetric-parafac-power-iteration"]], "tensorly.decomposition.symmetric_power_iteration": [[96, "tensorly-decomposition-symmetric-power-iteration"]], "tensorly.decomposition.tensor_ring": [[97, "tensorly-decomposition-tensor-ring"]], "tensorly.decomposition.tensor_train": [[98, "tensorly-decomposition-tensor-train"]], "tensorly.decomposition.tensor_train_matrix": [[99, "tensorly-decomposition-tensor-train-matrix"]], "tensorly.diag": [[100, "tensorly-diag"]], "tensorly.dot": [[101, "tensorly-dot"]], "tensorly.eps": [[102, "tensorly-eps"]], "tensorly.eye": [[103, "tensorly-eye"]], "tensorly.finfo": [[104, "tensorly-finfo"]], "tensorly.get_backend": [[105, "tensorly-get-backend"]], "tensorly.index": [[106, "tensorly-index"]], "tensorly.index_update": [[107, "tensorly-index-update"]], "tensorly.is_tensor": [[108, "tensorly-is-tensor"]], "tensorly.kr": [[109, "tensorly-kr"]], "tensorly.kron": [[110, "tensorly-kron"]], "tensorly.matmul": [[111, "tensorly-matmul"]], "tensorly.max": [[112, "tensorly-max"]], "tensorly.mean": [[113, "tensorly-mean"]], "tensorly.metrics.correlation_index": [[114, "tensorly-metrics-correlation-index"]], "tensorly.metrics.factors.congruence_coefficient": [[115, "tensorly-metrics-factors-congruence-coefficient"]], "tensorly.metrics.regression.MSE": [[116, "tensorly-metrics-regression-mse"]], "tensorly.metrics.regression.RMSE": [[117, "tensorly-metrics-regression-rmse"]], "tensorly.min": [[118, "tensorly-min"]], "tensorly.moveaxis": [[119, "tensorly-moveaxis"]], "tensorly.ndim": [[120, "tensorly-ndim"]], "tensorly.norm": [[121, "tensorly-norm"]], "tensorly.ones": [[122, "tensorly-ones"]], "tensorly.parafac2_tensor.parafac2_to_slice": [[123, "tensorly-parafac2-tensor-parafac2-to-slice"]], "tensorly.parafac2_tensor.parafac2_to_slices": [[124, "tensorly-parafac2-tensor-parafac2-to-slices"]], "tensorly.parafac2_tensor.parafac2_to_tensor": [[125, "tensorly-parafac2-tensor-parafac2-to-tensor"]], "tensorly.parafac2_tensor.parafac2_to_unfolded": [[126, "tensorly-parafac2-tensor-parafac2-to-unfolded"]], "tensorly.parafac2_tensor.parafac2_to_vec": [[127, "tensorly-parafac2-tensor-parafac2-to-vec"]], "tensorly.plugins.use_cuquantum": [[128, "tensorly-plugins-use-cuquantum"]], "tensorly.plugins.use_default_einsum": [[129, "tensorly-plugins-use-default-einsum"]], "tensorly.plugins.use_opt_einsum": [[130, "tensorly-plugins-use-opt-einsum"]], "tensorly.preprocessing.svd_compress_tensor_slices": [[131, "tensorly-preprocessing-svd-compress-tensor-slices"]], "tensorly.preprocessing.svd_decompress_parafac2_tensor": [[132, "tensorly-preprocessing-svd-decompress-parafac2-tensor"]], "tensorly.prod": [[133, "tensorly-prod"]], "tensorly.qr": [[134, "tensorly-qr"]], "tensorly.random.random_cp": [[135, "tensorly-random-random-cp"]], "tensorly.random.random_parafac2": [[136, "tensorly-random-random-parafac2"]], "tensorly.random.random_tt": [[137, "tensorly-random-random-tt"]], "tensorly.random.random_tt_matrix": [[138, "tensorly-random-random-tt-matrix"]], "tensorly.random.random_tucker": [[139, "tensorly-random-random-tucker"]], "tensorly.regression.CP_PLSR": [[140, "tensorly-regression-cp-plsr"]], "tensorly.regression.cp_regression.CPRegressor": [[141, "tensorly-regression-cp-regression-cpregressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[142, "tensorly-regression-tucker-regression-tuckerregressor"]], "tensorly.reshape": [[143, "tensorly-reshape"]], "tensorly.set_backend": [[144, "tensorly-set-backend"]], "tensorly.shape": [[145, "tensorly-shape"]], "tensorly.sign": [[146, "tensorly-sign"]], "tensorly.solve": [[147, "tensorly-solve"]], "tensorly.sort": [[148, "tensorly-sort"]], "tensorly.sqrt": [[149, "tensorly-sqrt"]], "tensorly.stack": [[150, "tensorly-stack"]], "tensorly.sum": [[151, "tensorly-sum"]], "tensorly.tenalg.backend_context": [[152, "tensorly-tenalg-backend-context"]], "tensorly.tenalg.batched_outer": [[153, "tensorly-tenalg-batched-outer"]], "tensorly.tenalg.get_backend": [[154, "tensorly-tenalg-get-backend"]], "tensorly.tenalg.higher_order_moment": [[155, "tensorly-tenalg-higher-order-moment"]], "tensorly.tenalg.inner": [[156, "tensorly-tenalg-inner"]], "tensorly.tenalg.khatri_rao": [[157, "tensorly-tenalg-khatri-rao"]], "tensorly.tenalg.kronecker": [[158, "tensorly-tenalg-kronecker"]], "tensorly.tenalg.mode_dot": [[159, "tensorly-tenalg-mode-dot"]], "tensorly.tenalg.multi_mode_dot": [[160, "tensorly-tenalg-multi-mode-dot"]], "tensorly.tenalg.outer": [[161, "tensorly-tenalg-outer"]], "tensorly.tenalg.proximal.procrustes": [[162, "tensorly-tenalg-proximal-procrustes"]], "tensorly.tenalg.proximal.soft_thresholding": [[163, "tensorly-tenalg-proximal-soft-thresholding"]], "tensorly.tenalg.proximal.svd_thresholding": [[164, "tensorly-tenalg-proximal-svd-thresholding"]], "tensorly.tenalg.set_backend": [[165, "tensorly-tenalg-set-backend"]], "tensorly.tenalg.svd_interface": [[166, "tensorly-tenalg-svd-interface"]], "tensorly.tenalg.tensordot": [[167, "tensorly-tenalg-tensordot"]], "tensorly.tenalg.unfolding_dot_khatri_rao": [[168, "tensorly-tenalg-unfolding-dot-khatri-rao"]], "tensorly.tensor": [[169, "tensorly-tensor"]], "tensorly.tensordot": [[170, "tensorly-tensordot"]], "tensorly.to_numpy": [[171, "tensorly-to-numpy"]], "tensorly.transpose": [[172, "tensorly-transpose"]], "tensorly.tt_matrix.tt_matrix_to_tensor": [[173, "tensorly-tt-matrix-tt-matrix-to-tensor"]], "tensorly.tt_matrix.tt_matrix_to_unfolded": [[174, "tensorly-tt-matrix-tt-matrix-to-unfolded"]], "tensorly.tt_matrix.tt_matrix_to_vec": [[175, "tensorly-tt-matrix-tt-matrix-to-vec"]], "tensorly.tt_tensor.pad_tt_rank": [[176, "tensorly-tt-tensor-pad-tt-rank"]], "tensorly.tt_tensor.tt_to_tensor": [[177, "tensorly-tt-tensor-tt-to-tensor"]], "tensorly.tt_tensor.tt_to_unfolded": [[178, "tensorly-tt-tensor-tt-to-unfolded"]], "tensorly.tt_tensor.tt_to_vec": [[179, "tensorly-tt-tensor-tt-to-vec"]], "tensorly.tucker_tensor.tucker_mode_dot": [[180, "tensorly-tucker-tensor-tucker-mode-dot"]], "tensorly.tucker_tensor.tucker_to_tensor": [[181, "tensorly-tucker-tensor-tucker-to-tensor"]], "tensorly.tucker_tensor.tucker_to_unfolded": [[182, "tensorly-tucker-tensor-tucker-to-unfolded"]], "tensorly.tucker_tensor.tucker_to_vec": [[183, "tensorly-tucker-tensor-tucker-to-vec"]], "tensorly.use_dynamic_dispatch": [[184, "tensorly-use-dynamic-dispatch"]], "tensorly.use_static_dispatch": [[185, "tensorly-use-static-dispatch"]], "tensorly.where": [[186, "tensorly-where"]], "tensorly.zeros": [[187, "tensorly-zeros"]], "tensorly.zeros_like": [[188, "tensorly-zeros-like"]], "tensorly.decomposition.tucker": [[189, "tensorly-decomposition-tucker"]], "TensorLy\u2019s backend system": [[191, "tensorly-s-backend-system"]], "Backend?": [[191, "backend"]], "Why backends?": [[191, "why-backends"]], "How do I change the backend?": [[191, "how-do-i-change-the-backend"]], "Basic functions": [[191, "basic-functions"]], "Case study: TensorLy and PyTorch": [[191, "case-study-tensorly-and-pytorch"]], "On CPU": [[191, "on-cpu"]], "On GPU": [[191, "on-gpu"]], "Using static dispatching": [[191, "using-static-dispatching"]], "User guide": [[192, "user-guide"]], "Quick-Start": [[193, "quick-start"]], "Organization of TensorLy": [[193, "organization-of-tensorly"]], "TensorLy Backend": [[193, "tensorly-backend"]], "Tensor manipulation": [[193, "tensor-manipulation"]], "Tensor algebra": [[193, "tensor-algebra"]], "Tensor regressions": [[193, "tensor-regressions"]], "Metrics": [[193, "metrics"]], "Sampling random tensors": [[193, "sampling-random-tensors"]], "Experimental features": [[193, "experimental-features"]], "Datasets": [[193, "datasets"]], "Sparse Backend": [[194, "sparse-backend"]], "Why a separate sparse backend?": [[194, "why-a-separate-sparse-backend"]], "Algorithms": [[194, "algorithms"]], "Usage": [[194, "usage"]], "Missing Values": [[194, "missing-values"]], "Example": [[194, "example"]], "Tensor basics": [[195, "tensor-basics"]], "Creating a tensor": [[195, "creating-a-tensor"]], "Unfolding": [[195, "unfolding"]], "Folding": [[195, "folding"]], "CP form of a tensor": [[196, "cp-form-of-a-tensor"]], "CANDECOMP-PARAFAC decomposition": [[196, "candecomp-parafac-decomposition"]], "Tucker form of a tensor": [[196, "tucker-form-of-a-tensor"]], "Tucker decomposition": [[196, "tucker-decomposition"]], "Matrix-Product-State / Tensor-Train Decomposition": [[196, "matrix-product-state-tensor-train-decomposition"]], "Implementations": [[196, "implementations"]], "Tensor regression": [[197, "tensor-regression"]], "Setting": [[197, "setting"]]}, "indexentries": {"module": [[29, "module-tensorly"], [29, "module-tensorly.base"], [29, "module-tensorly.contrib"], [29, "module-tensorly.contrib.sparse"], [29, "module-tensorly.cp_tensor"], [29, "module-tensorly.datasets"], [29, "module-tensorly.decomposition"], [29, "module-tensorly.metrics"], [29, "module-tensorly.parafac2_tensor"], [29, "module-tensorly.plugins"], [29, "module-tensorly.preprocessing"], [29, "module-tensorly.random"], [29, "module-tensorly.regression"], [29, "module-tensorly.tenalg"], [29, "module-tensorly.tt_matrix"], [29, "module-tensorly.tt_tensor"], [29, "module-tensorly.tucker_tensor"]], "tensorly": [[29, "module-tensorly"]], "tensorly.base": [[29, "module-tensorly.base"]], "tensorly.contrib": [[29, "module-tensorly.contrib"]], "tensorly.contrib.sparse": [[29, "module-tensorly.contrib.sparse"]], "tensorly.cp_tensor": [[29, "module-tensorly.cp_tensor"]], "tensorly.datasets": [[29, "module-tensorly.datasets"]], "tensorly.decomposition": [[29, "module-tensorly.decomposition"]], "tensorly.metrics": [[29, "module-tensorly.metrics"]], "tensorly.parafac2_tensor": [[29, "module-tensorly.parafac2_tensor"]], "tensorly.plugins": [[29, "module-tensorly.plugins"]], "tensorly.preprocessing": [[29, "module-tensorly.preprocessing"]], "tensorly.random": [[29, "module-tensorly.random"]], "tensorly.regression": [[29, "module-tensorly.regression"]], "tensorly.tenalg": [[29, "module-tensorly.tenalg"]], "tensorly.tt_matrix": [[29, "module-tensorly.tt_matrix"]], "tensorly.tt_tensor": [[29, "module-tensorly.tt_tensor"]], "tensorly.tucker_tensor": [[29, "module-tensorly.tucker_tensor"]], "parafac2() (in module tensorly.decomposition)": [[30, "tensorly.decomposition.parafac2"]], "abs() (in module tensorly)": [[31, "tensorly.abs"]], "all() (in module tensorly)": [[32, "tensorly.all"]], "arange() (in module tensorly)": [[33, "tensorly.arange"]], "argmax() (in module tensorly)": [[34, "tensorly.argmax"]], "argmin() (in module tensorly)": [[35, "tensorly.argmin"]], "backend_context() (in module tensorly)": [[36, "tensorly.backend_context"]], "fold() (in module tensorly.base)": [[37, "tensorly.base.fold"]], "partial_fold() (in module tensorly.base)": [[38, "tensorly.base.partial_fold"]], "partial_tensor_to_vec() (in module tensorly.base)": [[39, "tensorly.base.partial_tensor_to_vec"]], "partial_unfold() (in module tensorly.base)": [[40, "tensorly.base.partial_unfold"]], "partial_vec_to_tensor() (in module tensorly.base)": [[41, "tensorly.base.partial_vec_to_tensor"]], "tensor_to_vec() (in module tensorly.base)": [[42, "tensorly.base.tensor_to_vec"]], "unfold() (in module tensorly.base)": [[43, "tensorly.base.unfold"]], "vec_to_tensor() (in module tensorly.base)": [[44, "tensorly.base.vec_to_tensor"]], "check_random_state() (in module tensorly)": [[45, "tensorly.check_random_state"]], "clip() (in module tensorly)": [[46, "tensorly.clip"]], "concatenate() (in module tensorly)": [[47, "tensorly.concatenate"]], "conj() (in module tensorly)": [[48, "tensorly.conj"]], "context() (in module tensorly)": [[49, "tensorly.context"]], "tensor_train_oi() (in module tensorly.contrib.decomposition)": [[50, "tensorly.contrib.decomposition.tensor_train_OI"]], "tensor_train_cross() (in module tensorly.contrib.decomposition)": [[51, "tensorly.contrib.decomposition.tensor_train_cross"]], "non_negative_parafac() (in module tensorly.contrib.sparse.decomposition)": [[52, "tensorly.contrib.sparse.decomposition.non_negative_parafac"]], "non_negative_tucker() (in module tensorly.contrib.sparse.decomposition)": [[53, "tensorly.contrib.sparse.decomposition.non_negative_tucker"]], "parafac() (in module tensorly.contrib.sparse.decomposition)": [[54, "tensorly.contrib.sparse.decomposition.parafac"]], "partial_tucker() (in module tensorly.contrib.sparse.decomposition)": [[55, "tensorly.contrib.sparse.decomposition.partial_tucker"]], "robust_pca() (in module tensorly.contrib.sparse.decomposition)": [[56, "tensorly.contrib.sparse.decomposition.robust_pca"]], "symmetric_parafac_power_iteration() (in module tensorly.contrib.sparse.decomposition)": [[57, "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration"]], "tucker() (in module tensorly.contrib.sparse.decomposition)": [[58, "tensorly.contrib.sparse.decomposition.tucker"]], "copy() (in module tensorly)": [[59, "tensorly.copy"]], "cp_mode_dot() (in module tensorly.cp_tensor)": [[60, "tensorly.cp_tensor.cp_mode_dot"]], "cp_norm() (in module tensorly.cp_tensor)": [[61, "tensorly.cp_tensor.cp_norm"]], "cp_normalize() (in module tensorly.cp_tensor)": [[62, "tensorly.cp_tensor.cp_normalize"]], "cp_permute_factors() (in module tensorly.cp_tensor)": [[63, "tensorly.cp_tensor.cp_permute_factors"]], "cp_to_tensor() (in module tensorly.cp_tensor)": [[64, "tensorly.cp_tensor.cp_to_tensor"]], "cp_to_unfolded() (in module tensorly.cp_tensor)": [[65, "tensorly.cp_tensor.cp_to_unfolded"]], "cp_to_vec() (in module tensorly.cp_tensor)": [[66, "tensorly.cp_tensor.cp_to_vec"]], "load_il2data() (in module tensorly.datasets)": [[67, "tensorly.datasets.load_IL2data"]], "load_covid19_serology() (in module tensorly.datasets)": [[68, "tensorly.datasets.load_covid19_serology"]], "load_indian_pines() (in module tensorly.datasets)": [[69, "tensorly.datasets.load_indian_pines"]], "load_kinetic() (in module tensorly.datasets)": [[70, "tensorly.datasets.load_kinetic"]], "gen_image() (in module tensorly.datasets.synthetic)": [[71, "tensorly.datasets.synthetic.gen_image"]], "cp (class in tensorly.decomposition)": [[72, "tensorly.decomposition.CP"]], "fit_transform() (cp method)": [[72, "tensorly.decomposition.CP.fit_transform"]], "cppower (class in tensorly.decomposition)": [[73, "tensorly.decomposition.CPPower"]], "fit_transform() (cppower method)": [[73, "tensorly.decomposition.CPPower.fit_transform"]], "cp_nn_hals (class in tensorly.decomposition)": [[74, "tensorly.decomposition.CP_NN_HALS"]], "fit_transform() (cp_nn_hals method)": [[74, "tensorly.decomposition.CP_NN_HALS.fit_transform"]], "constrainedcp (class in tensorly.decomposition)": [[75, "tensorly.decomposition.ConstrainedCP"]], "fit_transform() (constrainedcp method)": [[75, "tensorly.decomposition.ConstrainedCP.fit_transform"]], "parafac2 (class in tensorly.decomposition)": [[76, "tensorly.decomposition.Parafac2"]], "fit_transform() (parafac2 method)": [[76, "tensorly.decomposition.Parafac2.fit_transform"]], "randomizedcp (class in tensorly.decomposition)": [[77, "tensorly.decomposition.RandomizedCP"]], "symmetriccp (class in tensorly.decomposition)": [[78, "tensorly.decomposition.SymmetricCP"]], "tensorring (class in tensorly.decomposition)": [[79, "tensorly.decomposition.TensorRing"]], "tensortrain (class in tensorly.decomposition)": [[80, "tensorly.decomposition.TensorTrain"]], "tensortrainmatrix (class in tensorly.decomposition)": [[81, "tensorly.decomposition.TensorTrainMatrix"]], "tucker (class in tensorly.decomposition)": [[82, "tensorly.decomposition.Tucker"]], "constrained_parafac() (in module tensorly.decomposition)": [[83, "tensorly.decomposition.constrained_parafac"]], "non_negative_parafac() (in module tensorly.decomposition)": [[84, "tensorly.decomposition.non_negative_parafac"]], "non_negative_parafac_hals() (in module tensorly.decomposition)": [[85, "tensorly.decomposition.non_negative_parafac_hals"]], "non_negative_tucker() (in module tensorly.decomposition)": [[86, "tensorly.decomposition.non_negative_tucker"]], "non_negative_tucker_hals() (in module tensorly.decomposition)": [[87, "tensorly.decomposition.non_negative_tucker_hals"]], "parafac() (in module tensorly.decomposition)": [[88, "tensorly.decomposition.parafac"]], "parafac_power_iteration() (in module tensorly.decomposition)": [[89, "tensorly.decomposition.parafac_power_iteration"]], "partial_tucker() (in module tensorly.decomposition)": [[90, "tensorly.decomposition.partial_tucker"]], "power_iteration() (in module tensorly.decomposition)": [[91, "tensorly.decomposition.power_iteration"]], "randomised_parafac() (in module tensorly.decomposition)": [[92, "tensorly.decomposition.randomised_parafac"]], "robust_pca() (in module tensorly.decomposition)": [[93, "tensorly.decomposition.robust_pca"]], "sample_khatri_rao() (in module tensorly.decomposition)": [[94, "tensorly.decomposition.sample_khatri_rao"]], "symmetric_parafac_power_iteration() (in module tensorly.decomposition)": [[95, "tensorly.decomposition.symmetric_parafac_power_iteration"]], "symmetric_power_iteration() (in module tensorly.decomposition)": [[96, "tensorly.decomposition.symmetric_power_iteration"]], "tensor_ring() (in module tensorly.decomposition)": [[97, "tensorly.decomposition.tensor_ring"]], "tensor_train() (in module tensorly.decomposition)": [[98, "tensorly.decomposition.tensor_train"]], "tensor_train_matrix() (in module tensorly.decomposition)": [[99, "tensorly.decomposition.tensor_train_matrix"]], "diag() (in module tensorly)": [[100, "tensorly.diag"]], "dot() (in module tensorly)": [[101, "tensorly.dot"]], "eps() (in module tensorly)": [[102, "tensorly.eps"]], "eye() (in module tensorly)": [[103, "tensorly.eye"]], "finfo() (in module tensorly)": [[104, "tensorly.finfo"]], "get_backend() (in module tensorly)": [[105, "tensorly.get_backend"]], "index() (in module tensorly)": [[106, "tensorly.index"]], "index_update() (in module tensorly)": [[107, "tensorly.index_update"]], "is_tensor() (in module tensorly)": [[108, "tensorly.is_tensor"]], "kr() (in module tensorly)": [[109, "tensorly.kr"]], "kron() (in module tensorly)": [[110, "tensorly.kron"]], "pep 465": [[111, "index-0"]], "python enhancement proposals": [[111, "index-0"]], "matmul() (in module tensorly)": [[111, "tensorly.matmul"]], "max() (in module tensorly)": [[112, "tensorly.max"]], "mean() (in module tensorly)": [[113, "tensorly.mean"]], "correlation_index() (in module tensorly.metrics)": [[114, "tensorly.metrics.correlation_index"]], "congruence_coefficient() (in module tensorly.metrics.factors)": [[115, "tensorly.metrics.factors.congruence_coefficient"]], "mse() (in module tensorly.metrics.regression)": [[116, "tensorly.metrics.regression.MSE"]], "rmse() (in module tensorly.metrics.regression)": [[117, "tensorly.metrics.regression.RMSE"]], "min() (in module tensorly)": [[118, "tensorly.min"]], "moveaxis() (in module tensorly)": [[119, "tensorly.moveaxis"]], "ndim() (in module tensorly)": [[120, "tensorly.ndim"]], "norm() (in module tensorly)": [[121, "tensorly.norm"]], "ones() (in module tensorly)": [[122, "tensorly.ones"]], "parafac2_to_slice() (in module tensorly.parafac2_tensor)": [[123, "tensorly.parafac2_tensor.parafac2_to_slice"]], "parafac2_to_slices() (in module tensorly.parafac2_tensor)": [[124, "tensorly.parafac2_tensor.parafac2_to_slices"]], "parafac2_to_tensor() (in module tensorly.parafac2_tensor)": [[125, "tensorly.parafac2_tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (in module tensorly.parafac2_tensor)": [[126, "tensorly.parafac2_tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (in module tensorly.parafac2_tensor)": [[127, "tensorly.parafac2_tensor.parafac2_to_vec"]], "use_cuquantum() (in module tensorly.plugins)": [[128, "tensorly.plugins.use_cuquantum"]], "use_default_einsum() (in module tensorly.plugins)": [[129, "tensorly.plugins.use_default_einsum"]], "use_opt_einsum() (in module tensorly.plugins)": [[130, "tensorly.plugins.use_opt_einsum"]], "svd_compress_tensor_slices() (in module tensorly.preprocessing)": [[131, "tensorly.preprocessing.svd_compress_tensor_slices"]], "svd_decompress_parafac2_tensor() (in module tensorly.preprocessing)": [[132, "tensorly.preprocessing.svd_decompress_parafac2_tensor"]], "prod() (in module tensorly)": [[133, "tensorly.prod"]], "qr() (in module tensorly)": [[134, "tensorly.qr"]], "random_cp() (in module tensorly.random)": [[135, "tensorly.random.random_cp"]], "random_parafac2() (in module tensorly.random)": [[136, "tensorly.random.random_parafac2"]], "random_tt() (in module tensorly.random)": [[137, "tensorly.random.random_tt"]], "random_tt_matrix() (in module tensorly.random)": [[138, "tensorly.random.random_tt_matrix"]], "random_tucker() (in module tensorly.random)": [[139, "tensorly.random.random_tucker"]], "cp_plsr (class in tensorly.regression)": [[140, "tensorly.regression.CP_PLSR"]], "fit() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.fit"]], "fit_transform() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.fit_transform"]], "get_params() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.get_params"]], "predict() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.predict"]], "score() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.score"]], "set_params() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.set_params"]], "transform() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.transform"]], "cpregressor (class in tensorly.regression.cp_regression)": [[141, "tensorly.regression.cp_regression.CPRegressor"]], "fit() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.fit"]], "get_params() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.get_params"]], "predict() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.predict"]], "set_params() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.set_params"]], "tuckerregressor (class in tensorly.regression.tucker_regression)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor"]], "fit() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.fit"]], "get_params() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.get_params"]], "predict() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.predict"]], "set_params() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.set_params"]], "reshape() (in module tensorly)": [[143, "tensorly.reshape"]], "set_backend() (in module tensorly)": [[144, "tensorly.set_backend"]], "shape() (in module tensorly)": [[145, "tensorly.shape"]], "sign() (in module tensorly)": [[146, "tensorly.sign"]], "solve() (in module tensorly)": [[147, "tensorly.solve"]], "sort() (in module tensorly)": [[148, "tensorly.sort"]], "sqrt() (in module tensorly)": [[149, "tensorly.sqrt"]], "stack() (in module tensorly)": [[150, "tensorly.stack"]], "sum() (in module tensorly)": [[151, "tensorly.sum"]], "backend_context() (in module tensorly.tenalg)": [[152, "tensorly.tenalg.backend_context"]], "batched_outer() (in module tensorly.tenalg)": [[153, "tensorly.tenalg.batched_outer"]], "get_backend() (in module tensorly.tenalg)": [[154, "tensorly.tenalg.get_backend"]], "higher_order_moment() (in module tensorly.tenalg)": [[155, "tensorly.tenalg.higher_order_moment"]], "inner() (in module tensorly.tenalg)": [[156, "tensorly.tenalg.inner"]], "khatri_rao() (in module tensorly.tenalg)": [[157, "tensorly.tenalg.khatri_rao"]], "kronecker() (in module tensorly.tenalg)": [[158, "tensorly.tenalg.kronecker"]], "mode_dot() (in module tensorly.tenalg)": [[159, "tensorly.tenalg.mode_dot"]], "multi_mode_dot() (in module tensorly.tenalg)": [[160, "tensorly.tenalg.multi_mode_dot"]], "outer() (in module tensorly.tenalg)": [[161, "tensorly.tenalg.outer"]], "procrustes() (in module tensorly.tenalg.proximal)": [[162, "tensorly.tenalg.proximal.procrustes"]], "soft_thresholding() (in module tensorly.tenalg.proximal)": [[163, "tensorly.tenalg.proximal.soft_thresholding"]], "svd_thresholding() (in module tensorly.tenalg.proximal)": [[164, "tensorly.tenalg.proximal.svd_thresholding"]], "set_backend() (in module tensorly.tenalg)": [[165, "tensorly.tenalg.set_backend"]], "svd_interface() (in module tensorly.tenalg)": [[166, "tensorly.tenalg.svd_interface"]], "tensordot() (in module tensorly.tenalg)": [[167, "tensorly.tenalg.tensordot"]], "unfolding_dot_khatri_rao() (in module tensorly.tenalg)": [[168, "tensorly.tenalg.unfolding_dot_khatri_rao"]], "tensor() (in module tensorly)": [[169, "tensorly.tensor"]], "tensordot() (in module tensorly)": [[170, "tensorly.tensordot"]], "to_numpy() (in module tensorly)": [[171, "tensorly.to_numpy"]], "transpose() (in module tensorly)": [[172, "tensorly.transpose"]], "tt_matrix_to_tensor() (in module tensorly.tt_matrix)": [[173, "tensorly.tt_matrix.tt_matrix_to_tensor"]], "tt_matrix_to_unfolded() (in module tensorly.tt_matrix)": [[174, "tensorly.tt_matrix.tt_matrix_to_unfolded"]], "tt_matrix_to_vec() (in module tensorly.tt_matrix)": [[175, "tensorly.tt_matrix.tt_matrix_to_vec"]], "pad_tt_rank() (in module tensorly.tt_tensor)": [[176, "tensorly.tt_tensor.pad_tt_rank"]], "tt_to_tensor() (in module tensorly.tt_tensor)": [[177, "tensorly.tt_tensor.tt_to_tensor"]], "tt_to_unfolded() (in module tensorly.tt_tensor)": [[178, "tensorly.tt_tensor.tt_to_unfolded"]], "tt_to_vec() (in module tensorly.tt_tensor)": [[179, "tensorly.tt_tensor.tt_to_vec"]], "tucker_mode_dot() (in module tensorly.tucker_tensor)": [[180, "tensorly.tucker_tensor.tucker_mode_dot"]], "tucker_to_tensor() (in module tensorly.tucker_tensor)": [[181, "tensorly.tucker_tensor.tucker_to_tensor"]], "tucker_to_unfolded() (in module tensorly.tucker_tensor)": [[182, "tensorly.tucker_tensor.tucker_to_unfolded"]], "tucker_to_vec() (in module tensorly.tucker_tensor)": [[183, "tensorly.tucker_tensor.tucker_to_vec"]], "use_dynamic_dispatch() (in module tensorly)": [[184, "tensorly.use_dynamic_dispatch"]], "use_static_dispatch() (in module tensorly)": [[185, "tensorly.use_static_dispatch"]], "where() (in module tensorly)": [[186, "tensorly.where"]], "zeros() (in module tensorly)": [[187, "tensorly.zeros"]], "zeros_like() (in module tensorly)": [[188, "tensorly.zeros_like"]], "tucker() (in module tensorly.decomposition)": [[189, "tensorly.decomposition.tucker"]]}})