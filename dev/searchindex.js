Search.setIndex({"alltitles": {"API reference": [[29, null]], "About us": [[0, null]], "Algebraic operations": [[29, "algebraic-operations"]], "Algorithms": [[198, "algorithms"]], "Apply CP decomposition to this dataset with Tensorly": [[3, "apply-cp-decomposition-to-this-dataset-with-tensorly"]], "Array creation": [[29, "array-creation"]], "Array manipulation": [[29, "array-manipulation"]], "Available backend functions": [[29, "available-backend-functions"]], "Available functions": [[29, "available-functions"]], "Backend System": [[22, null]], "Backend compatibility": [[23, "backend-compatibility"]], "Backend function\u2019s dispatching": [[22, "backend-function-s-dispatching"]], "Backend?": [[195, "backend"]], "Basic functions": [[195, "basic-functions"]], "Basic tensor operations": [[16, null]], "CANDECOMP-PARAFAC decomposition": [[200, "candecomp-parafac-decomposition"]], "COVID-19 Serology Dataset Analysis with CP": [[3, null]], "CP form of a tensor": [[200, "cp-form-of-a-tensor"]], "CP tensor regression": [[18, null]], "Case study: TensorLy and PyTorch": [[195, "case-study-tensorly-and-pytorch"]], "Classes": [[29, "classes"]], "Cloning the github repository": [[28, "cloning-the-github-repository"]], "Comparison": [[9, "comparison"], [10, "comparison"]], "Compiling the documentation": [[28, "compiling-the-documentation"]], "Compressing data that is approximately low-rank": [[12, "compressing-data-that-is-approximately-low-rank"]], "Compressing data with many rows and few columns": [[12, "compressing-data-with-many-rows-and-few-columns"]], "Computation times": [[5, null], [14, null], [20, null], [21, null], [194, null]], "Compute performance metrics": [[11, "compute-performance-metrics"]], "Constrained CP decomposition in Tensorly >=0.7": [[8, null]], "Contents": [[15, "contents"]], "Context of a tensor": [[23, "context-of-a-tensor"], [29, "context-of-a-tensor"], [195, "context-of-a-tensor"]], "Contributing": [[23, null]], "Core developers": [[0, "core-developers"]], "Core functions (tensorly.base)": [[29, "module-tensorly.base"]], "Create synthetic tensor": [[9, "create-synthetic-tensor"], [10, "create-synthetic-tensor"], [11, "create-synthetic-tensor"], [13, "create-synthetic-tensor"]], "Creating a tensor": [[199, "creating-a-tensor"]], "Datasets": [[197, "datasets"]], "Datasets (tensorly.datasets)": [[29, "module-tensorly.datasets"]], "Demonstration of PARAFAC2": [[11, null]], "Development guide": [[25, null]], "Docstrings": [[24, "docstrings"]], "Example": [[198, "example"]], "Examples": [[24, "examples"]], "Experimental features": [[197, "experimental-features"]], "Experimental features (tensorly.contrib)": [[29, "module-tensorly.contrib"]], "Fit a PARAFAC2 tensor": [[11, "fit-a-parafac2-tensor"]], "Fitting with lossless compression": [[12, "fitting-with-lossless-compression"], [12, "id2"]], "Fitting with lossy compression": [[12, "fitting-with-lossy-compression"], [12, "id3"]], "Fitting without compression": [[12, "fitting-without-compression"], [12, "id1"]], "Folding": [[199, "folding"]], "Function to create synthetic data": [[12, "function-to-create-synthetic-data"]], "Functions": [[29, "functions"]], "Gallery of examples": [[15, null]], "General examples": [[15, "general-examples"]], "Guidelines": [[23, "guidelines"]], "How do I change the backend?": [[195, "how-do-i-change-the-backend"]], "How the Backend System Works": [[22, "how-the-backend-system-works"]], "How the class wrapper test works": [[23, "how-the-class-wrapper-test-works"]], "How-to": [[23, "how-to"]], "Image compression via tensor decomposition": [[4, null]], "Implementations": [[200, "implementations"]], "In practice": [[23, "in-practice"]], "Index assignement (\u201cNumPy style\u201d)": [[29, "index-assignement-numpy-style"]], "Index assignment (\u201cNumPy style\u201d)": [[23, "index-assignment-numpy-style"]], "Inspect the biological insights from CP components": [[3, "inspect-the-biological-insights-from-cp-components"]], "Inspect the convergence rate": [[11, "inspect-the-convergence-rate"]], "Installing tensorly": [[28, null]], "Installing with Conda": [[28, "installing-with-conda"]], "Installing with pip (recommended)": [[28, "installing-with-pip-recommended"]], "Introduction": [[3, "introduction"], [8, "introduction"], [9, "introduction"], [10, "introduction"], [13, "introduction"]], "Loading a backend": [[22, "loading-a-backend"]], "Matrices in TT form (tensorly.tt_matrix)": [[29, "module-tensorly.tt_matrix"]], "Matrix-Product-State / Tensor-Train Decomposition": [[200, "matrix-product-state-tensor-train-decomposition"]], "Metrics": [[197, "metrics"]], "Missing Values": [[198, "missing-values"]], "Non-negative CP decomposition in Tensorly >=0.6": [[9, null]], "Non-negative PARAFAC Decomposition of IL-2 Response Data": [[2, null]], "Non-negative Parafac": [[9, "non-negative-parafac"]], "Non-negative Parafac with Exact HALS": [[9, "non-negative-parafac-with-exact-hals"]], "Non-negative Parafac with HALS": [[9, "non-negative-parafac-with-hals"]], "Non-negative Tucker": [[10, "non-negative-tucker"]], "Non-negative Tucker decomposition": [[10, null]], "Non-negative Tucker with HALS and Active Set": [[10, "non-negative-tucker-with-hals-and-active-set"]], "Non-negative Tucker with HALS and FISTA": [[10, "non-negative-tucker-with-hals-and-fista"]], "On CPU": [[195, "on-cpu"]], "On GPU": [[195, "on-gpu"]], "Organization of TensorLy": [[197, "organization-of-tensorly"]], "Origin": [[0, "origin"]], "Performance measures (tensorly.metrics)": [[29, "module-tensorly.metrics"]], "Permute target CPTensors": [[13, "permute-target-cptensors"]], "Permuting CP factors": [[13, null]], "Plugin functionalities (tensorly.plugins)": [[29, "plugin-functionalities-tensorly-plugins"]], "Practical applications of tensor methods": [[1, null], [15, "practical-applications-of-tensor-methods"]], "Pre-requisite": [[28, "pre-requisite"]], "Preprocessing (tensorly.preprocessing)": [[29, "module-tensorly.preprocessing"]], "Quick-Start": [[197, null]], "Refer to functions or modules": [[24, "refer-to-functions-or-modules"]], "References": [[3, "references"], [8, "references"], [9, "references"], [10, "references"], [11, "references"], [199, "references"], [200, "references"], [201, "references"]], "Running the tests": [[28, "running-the-tests"]], "Sampling random tensors": [[197, "sampling-random-tensors"]], "Sampling tensors (tensorly.random)": [[29, "module-tensorly.random"]], "Setting": [[201, "setting"]], "Setting the backend": [[29, "setting-the-backend"]], "Solvers (tensorly.solvers)": [[29, "solvers-tensorly-solvers"]], "Sparse Backend": [[198, null]], "Sparse tensors": [[29, "sparse-tensors"]], "Speeding up PARAFAC2 with SVD compression": [[12, null]], "Supporters": [[0, "supporters"]], "Tensor Algebra (tensorly.tenalg)": [[29, "tensor-algebra-tensorly-tenalg"]], "Tensor Algebra Backend": [[29, "tensor-algebra-backend"]], "Tensor Decomposition (tensorly.decomposition)": [[29, "module-tensorly.decomposition"]], "Tensor Regression (tensorly.regression)": [[29, "module-tensorly.regression"]], "Tensor algebra": [[197, "tensor-algebra"]], "Tensor basics": [[199, null]], "Tensor decomposition": [[6, null], [15, "tensor-decomposition"], [197, "tensor-decomposition"], [200, null]], "Tensor manipulation": [[197, "tensor-manipulation"]], "Tensor regression": [[201, null]], "Tensor regression with tensorly": [[15, "tensor-regression-with-tensorly"], [17, null]], "Tensor regressions": [[197, "tensor-regressions"]], "TensorLy Backend": [[197, "tensorly-backend"]], "TensorLy\u2019s backend system": [[195, null]], "Tensors in CP form (tensorly.cp_tensor)": [[29, "module-tensorly.cp_tensor"]], "Tensors in PARAFAC2 form (tensorly.parafac2_tensor)": [[29, "module-tensorly.parafac2_tensor"]], "Tensors in TT (MPS) form (tensorly.tt_tensor)": [[29, "module-tensorly.tt_tensor"]], "Tensors in Tucker form (tensorly.tucker_tensor)": [[29, "module-tensorly.tucker_tensor"]], "Testing the class interface": [[23, "testing-the-class-interface"]], "The Backend class": [[22, "the-backend-class"]], "Titles": [[24, "titles"]], "Tucker decomposition": [[200, "tucker-decomposition"]], "Tucker form of a tensor": [[200, "tucker-form-of-a-tensor"]], "Tucker tensor regression": [[19, null]], "Unfolding": [[199, "unfolding"]], "Unified backend interface (tensorly)": [[29, "unified-backend-interface-tensorly"]], "Usage": [[198, "usage"]], "User guide": [[196, null]], "Using a constraint with the different scalar inputs for each mode": [[8, "using-a-constraint-with-the-different-scalar-inputs-for-each-mode"]], "Using different constraints for each mode": [[8, "using-different-constraints-for-each-mode"]], "Using line search with PARAFAC": [[7, null]], "Using one constraint for all modes": [[8, "using-one-constraint-for-all-modes"]], "Using one constraint for some modes": [[8, "using-one-constraint-for-some-modes"]], "Using static dispatching": [[195, "using-static-dispatching"]], "Visualize the components": [[11, "visualize-the-components"]], "Why Python 3?": [[28, "why-python-3"]], "Why a separate sparse backend?": [[198, "why-a-separate-sparse-backend"]], "Why backends?": [[195, "why-backends"]], "Writing documentation": [[24, null]], "tensorly.abs": [[31, null]], "tensorly.all": [[32, null]], "tensorly.arange": [[33, null]], "tensorly.argmax": [[34, null]], "tensorly.argmin": [[35, null]], "tensorly.backend_context": [[36, null]], "tensorly.base.fold": [[37, null]], "tensorly.base.partial_fold": [[38, null]], "tensorly.base.partial_tensor_to_vec": [[39, null]], "tensorly.base.partial_unfold": [[40, null]], "tensorly.base.partial_vec_to_tensor": [[41, null]], "tensorly.base.tensor_to_vec": [[42, null]], "tensorly.base.unfold": [[43, null]], "tensorly.base.vec_to_tensor": [[44, null]], "tensorly.check_random_state": [[45, null]], "tensorly.clip": [[46, null]], "tensorly.concatenate": [[47, null]], "tensorly.conj": [[48, null]], "tensorly.context": [[49, null]], "tensorly.contrib.decomposition.tensor_train_OI": [[50, null]], "tensorly.contrib.decomposition.tensor_train_cross": [[51, null]], "tensorly.contrib.sparse.decomposition.non_negative_parafac": [[52, null]], "tensorly.contrib.sparse.decomposition.non_negative_tucker": [[53, null]], "tensorly.contrib.sparse.decomposition.parafac": [[54, null]], "tensorly.contrib.sparse.decomposition.partial_tucker": [[55, null]], "tensorly.contrib.sparse.decomposition.robust_pca": [[56, null]], "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration": [[57, null]], "tensorly.contrib.sparse.decomposition.tucker": [[58, null]], "tensorly.copy": [[59, null]], "tensorly.cp_tensor.cp_mode_dot": [[60, null]], "tensorly.cp_tensor.cp_norm": [[61, null]], "tensorly.cp_tensor.cp_normalize": [[62, null]], "tensorly.cp_tensor.cp_permute_factors": [[63, null]], "tensorly.cp_tensor.cp_to_tensor": [[64, null]], "tensorly.cp_tensor.cp_to_unfolded": [[65, null]], "tensorly.cp_tensor.cp_to_vec": [[66, null]], "tensorly.datasets.load_IL2data": [[67, null]], "tensorly.datasets.load_covid19_serology": [[68, null]], "tensorly.datasets.load_indian_pines": [[69, null]], "tensorly.datasets.load_kinetic": [[70, null]], "tensorly.datasets.synthetic.gen_image": [[71, null]], "tensorly.decomposition.CP": [[72, null]], "tensorly.decomposition.CPPower": [[73, null]], "tensorly.decomposition.CP_NN_HALS": [[74, null]], "tensorly.decomposition.ConstrainedCP": [[75, null]], "tensorly.decomposition.Parafac2": [[76, null]], "tensorly.decomposition.RandomizedCP": [[77, null]], "tensorly.decomposition.SymmetricCP": [[78, null]], "tensorly.decomposition.TensorRing": [[79, null]], "tensorly.decomposition.TensorTrain": [[80, null]], "tensorly.decomposition.TensorTrainMatrix": [[81, null]], "tensorly.decomposition.Tucker": [[82, null]], "tensorly.decomposition.constrained_parafac": [[83, null]], "tensorly.decomposition.non_negative_parafac": [[84, null]], "tensorly.decomposition.non_negative_parafac_hals": [[85, null]], "tensorly.decomposition.non_negative_tucker": [[86, null]], "tensorly.decomposition.non_negative_tucker_hals": [[87, null]], "tensorly.decomposition.parafac": [[88, null]], "tensorly.decomposition.parafac2": [[30, null]], "tensorly.decomposition.parafac_power_iteration": [[89, null]], "tensorly.decomposition.partial_tucker": [[90, null]], "tensorly.decomposition.power_iteration": [[91, null]], "tensorly.decomposition.randomised_parafac": [[92, null]], "tensorly.decomposition.robust_pca": [[93, null]], "tensorly.decomposition.sample_khatri_rao": [[94, null]], "tensorly.decomposition.symmetric_parafac_power_iteration": [[95, null]], "tensorly.decomposition.symmetric_power_iteration": [[96, null]], "tensorly.decomposition.tensor_ring": [[97, null]], "tensorly.decomposition.tensor_train": [[98, null]], "tensorly.decomposition.tensor_train_matrix": [[99, null]], "tensorly.decomposition.tucker": [[193, null]], "tensorly.diag": [[100, null]], "tensorly.dot": [[101, null]], "tensorly.eps": [[102, null]], "tensorly.eye": [[103, null]], "tensorly.finfo": [[104, null]], "tensorly.get_backend": [[105, null]], "tensorly.index": [[106, null]], "tensorly.index_update": [[107, null]], "tensorly.is_tensor": [[108, null]], "tensorly.kr": [[109, null]], "tensorly.kron": [[110, null]], "tensorly.matmul": [[111, null]], "tensorly.max": [[112, null]], "tensorly.mean": [[113, null]], "tensorly.metrics.correlation_index": [[114, null]], "tensorly.metrics.factors.congruence_coefficient": [[115, null]], "tensorly.metrics.regression.MSE": [[116, null]], "tensorly.metrics.regression.RMSE": [[117, null]], "tensorly.min": [[118, null]], "tensorly.moveaxis": [[119, null]], "tensorly.ndim": [[120, null]], "tensorly.norm": [[121, null]], "tensorly.ones": [[122, null]], "tensorly.parafac2_tensor.parafac2_to_slice": [[123, null]], "tensorly.parafac2_tensor.parafac2_to_slices": [[124, null]], "tensorly.parafac2_tensor.parafac2_to_tensor": [[125, null]], "tensorly.parafac2_tensor.parafac2_to_unfolded": [[126, null]], "tensorly.parafac2_tensor.parafac2_to_vec": [[127, null]], "tensorly.plugins.use_cuquantum": [[128, null]], "tensorly.plugins.use_default_einsum": [[129, null]], "tensorly.plugins.use_opt_einsum": [[130, null]], "tensorly.preprocessing.svd_compress_tensor_slices": [[131, null]], "tensorly.preprocessing.svd_decompress_parafac2_tensor": [[132, null]], "tensorly.prod": [[133, null]], "tensorly.qr": [[134, null]], "tensorly.random.random_cp": [[135, null]], "tensorly.random.random_parafac2": [[136, null]], "tensorly.random.random_tt": [[137, null]], "tensorly.random.random_tt_matrix": [[138, null]], "tensorly.random.random_tucker": [[139, null]], "tensorly.regression.CP_PLSR": [[140, null]], "tensorly.regression.cp_regression.CPRegressor": [[141, null]], "tensorly.regression.tucker_regression.TuckerRegressor": [[142, null]], "tensorly.reshape": [[143, null]], "tensorly.set_backend": [[144, null]], "tensorly.shape": [[145, null]], "tensorly.sign": [[146, null]], "tensorly.solve": [[147, null]], "tensorly.solvers.admm.admm": [[148, null]], "tensorly.solvers.nnls.active_set_nnls": [[149, null]], "tensorly.solvers.nnls.fista": [[150, null]], "tensorly.solvers.nnls.hals_nnls": [[151, null]], "tensorly.sort": [[152, null]], "tensorly.sqrt": [[153, null]], "tensorly.stack": [[154, null]], "tensorly.sum": [[155, null]], "tensorly.tenalg.backend_context": [[156, null]], "tensorly.tenalg.batched_outer": [[157, null]], "tensorly.tenalg.get_backend": [[158, null]], "tensorly.tenalg.higher_order_moment": [[159, null]], "tensorly.tenalg.inner": [[160, null]], "tensorly.tenalg.khatri_rao": [[161, null]], "tensorly.tenalg.kronecker": [[162, null]], "tensorly.tenalg.mode_dot": [[163, null]], "tensorly.tenalg.multi_mode_dot": [[164, null]], "tensorly.tenalg.outer": [[165, null]], "tensorly.tenalg.proximal.procrustes": [[166, null]], "tensorly.tenalg.proximal.soft_thresholding": [[167, null]], "tensorly.tenalg.proximal.svd_thresholding": [[168, null]], "tensorly.tenalg.set_backend": [[169, null]], "tensorly.tenalg.svd_interface": [[170, null]], "tensorly.tenalg.tensordot": [[171, null]], "tensorly.tenalg.unfolding_dot_khatri_rao": [[172, null]], "tensorly.tensor": [[173, null]], "tensorly.tensordot": [[174, null]], "tensorly.to_numpy": [[175, null]], "tensorly.transpose": [[176, null]], "tensorly.tt_matrix.tt_matrix_to_tensor": [[177, null]], "tensorly.tt_matrix.tt_matrix_to_unfolded": [[178, null]], "tensorly.tt_matrix.tt_matrix_to_vec": [[179, null]], "tensorly.tt_tensor.pad_tt_rank": [[180, null]], "tensorly.tt_tensor.tt_to_tensor": [[181, null]], "tensorly.tt_tensor.tt_to_unfolded": [[182, null]], "tensorly.tt_tensor.tt_to_vec": [[183, null]], "tensorly.tucker_tensor.tucker_mode_dot": [[184, null]], "tensorly.tucker_tensor.tucker_to_tensor": [[185, null]], "tensorly.tucker_tensor.tucker_to_unfolded": [[186, null]], "tensorly.tucker_tensor.tucker_to_vec": [[187, null]], "tensorly.use_dynamic_dispatch": [[188, null]], "tensorly.use_static_dispatch": [[189, null]], "tensorly.where": [[190, null]], "tensorly.zeros": [[191, null]], "tensorly.zeros_like": [[192, null]]}, "docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_IL2", "auto_examples/applications/plot_covid", "auto_examples/applications/plot_image_compression", "auto_examples/applications/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_cp_line_search", "auto_examples/decomposition/plot_guide_for_constrained_cp", "auto_examples/decomposition/plot_nn_cp_hals", "auto_examples/decomposition/plot_nn_tucker", "auto_examples/decomposition/plot_parafac2", "auto_examples/decomposition/plot_parafac2_compression", "auto_examples/decomposition/plot_permute_factors", "auto_examples/decomposition/sg_execution_times", "auto_examples/index", "auto_examples/plot_tensor", "auto_examples/regression/index", "auto_examples/regression/plot_cp_regression", "auto_examples/regression/plot_tucker_regression", "auto_examples/regression/sg_execution_times", "auto_examples/sg_execution_times", "development_guide/backend_system", "development_guide/contributing", "development_guide/documentation", "development_guide/index", "home", "index", "installation", "modules/api", "modules/generated/parafac2-function", "modules/generated/tensorly.abs", "modules/generated/tensorly.all", "modules/generated/tensorly.arange", "modules/generated/tensorly.argmax", "modules/generated/tensorly.argmin", "modules/generated/tensorly.backend_context", "modules/generated/tensorly.base.fold", "modules/generated/tensorly.base.partial_fold", "modules/generated/tensorly.base.partial_tensor_to_vec", "modules/generated/tensorly.base.partial_unfold", "modules/generated/tensorly.base.partial_vec_to_tensor", "modules/generated/tensorly.base.tensor_to_vec", "modules/generated/tensorly.base.unfold", "modules/generated/tensorly.base.vec_to_tensor", "modules/generated/tensorly.check_random_state", "modules/generated/tensorly.clip", "modules/generated/tensorly.concatenate", "modules/generated/tensorly.conj", "modules/generated/tensorly.context", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.parafac", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.contrib.sparse.decomposition.tucker", "modules/generated/tensorly.copy", "modules/generated/tensorly.cp_tensor.cp_mode_dot", "modules/generated/tensorly.cp_tensor.cp_norm", "modules/generated/tensorly.cp_tensor.cp_normalize", "modules/generated/tensorly.cp_tensor.cp_permute_factors", "modules/generated/tensorly.cp_tensor.cp_to_tensor", "modules/generated/tensorly.cp_tensor.cp_to_unfolded", "modules/generated/tensorly.cp_tensor.cp_to_vec", "modules/generated/tensorly.datasets.load_IL2data", "modules/generated/tensorly.datasets.load_covid19_serology", "modules/generated/tensorly.datasets.load_indian_pines", "modules/generated/tensorly.datasets.load_kinetic", "modules/generated/tensorly.datasets.synthetic.gen_image", "modules/generated/tensorly.decomposition.CP", "modules/generated/tensorly.decomposition.CPPower", "modules/generated/tensorly.decomposition.CP_NN_HALS", "modules/generated/tensorly.decomposition.ConstrainedCP", "modules/generated/tensorly.decomposition.Parafac2", "modules/generated/tensorly.decomposition.RandomizedCP", "modules/generated/tensorly.decomposition.SymmetricCP", "modules/generated/tensorly.decomposition.TensorRing", "modules/generated/tensorly.decomposition.TensorTrain", "modules/generated/tensorly.decomposition.TensorTrainMatrix", "modules/generated/tensorly.decomposition.Tucker", "modules/generated/tensorly.decomposition.constrained_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac", "modules/generated/tensorly.decomposition.non_negative_parafac_hals", "modules/generated/tensorly.decomposition.non_negative_tucker", "modules/generated/tensorly.decomposition.non_negative_tucker_hals", "modules/generated/tensorly.decomposition.parafac", "modules/generated/tensorly.decomposition.parafac_power_iteration", "modules/generated/tensorly.decomposition.partial_tucker", "modules/generated/tensorly.decomposition.power_iteration", "modules/generated/tensorly.decomposition.randomised_parafac", "modules/generated/tensorly.decomposition.robust_pca", "modules/generated/tensorly.decomposition.sample_khatri_rao", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration", "modules/generated/tensorly.decomposition.symmetric_power_iteration", "modules/generated/tensorly.decomposition.tensor_ring", "modules/generated/tensorly.decomposition.tensor_train", "modules/generated/tensorly.decomposition.tensor_train_matrix", "modules/generated/tensorly.diag", "modules/generated/tensorly.dot", "modules/generated/tensorly.eps", "modules/generated/tensorly.eye", "modules/generated/tensorly.finfo", "modules/generated/tensorly.get_backend", "modules/generated/tensorly.index", "modules/generated/tensorly.index_update", "modules/generated/tensorly.is_tensor", "modules/generated/tensorly.kr", "modules/generated/tensorly.kron", "modules/generated/tensorly.matmul", "modules/generated/tensorly.max", "modules/generated/tensorly.mean", "modules/generated/tensorly.metrics.correlation_index", "modules/generated/tensorly.metrics.factors.congruence_coefficient", "modules/generated/tensorly.metrics.regression.MSE", "modules/generated/tensorly.metrics.regression.RMSE", "modules/generated/tensorly.min", "modules/generated/tensorly.moveaxis", "modules/generated/tensorly.ndim", "modules/generated/tensorly.norm", "modules/generated/tensorly.ones", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec", "modules/generated/tensorly.plugins.use_cuquantum", "modules/generated/tensorly.plugins.use_default_einsum", "modules/generated/tensorly.plugins.use_opt_einsum", "modules/generated/tensorly.preprocessing.svd_compress_tensor_slices", "modules/generated/tensorly.preprocessing.svd_decompress_parafac2_tensor", "modules/generated/tensorly.prod", "modules/generated/tensorly.qr", "modules/generated/tensorly.random.random_cp", "modules/generated/tensorly.random.random_parafac2", "modules/generated/tensorly.random.random_tt", "modules/generated/tensorly.random.random_tt_matrix", "modules/generated/tensorly.random.random_tucker", "modules/generated/tensorly.regression.CP_PLSR", "modules/generated/tensorly.regression.cp_regression.CPRegressor", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor", "modules/generated/tensorly.reshape", "modules/generated/tensorly.set_backend", "modules/generated/tensorly.shape", "modules/generated/tensorly.sign", "modules/generated/tensorly.solve", "modules/generated/tensorly.solvers.admm.admm", "modules/generated/tensorly.solvers.nnls.active_set_nnls", "modules/generated/tensorly.solvers.nnls.fista", "modules/generated/tensorly.solvers.nnls.hals_nnls", "modules/generated/tensorly.sort", "modules/generated/tensorly.sqrt", "modules/generated/tensorly.stack", "modules/generated/tensorly.sum", "modules/generated/tensorly.tenalg.backend_context", "modules/generated/tensorly.tenalg.batched_outer", "modules/generated/tensorly.tenalg.get_backend", "modules/generated/tensorly.tenalg.higher_order_moment", "modules/generated/tensorly.tenalg.inner", "modules/generated/tensorly.tenalg.khatri_rao", "modules/generated/tensorly.tenalg.kronecker", "modules/generated/tensorly.tenalg.mode_dot", "modules/generated/tensorly.tenalg.multi_mode_dot", "modules/generated/tensorly.tenalg.outer", "modules/generated/tensorly.tenalg.proximal.procrustes", "modules/generated/tensorly.tenalg.proximal.soft_thresholding", "modules/generated/tensorly.tenalg.proximal.svd_thresholding", "modules/generated/tensorly.tenalg.set_backend", "modules/generated/tensorly.tenalg.svd_interface", "modules/generated/tensorly.tenalg.tensordot", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao", "modules/generated/tensorly.tensor", "modules/generated/tensorly.tensordot", "modules/generated/tensorly.to_numpy", "modules/generated/tensorly.transpose", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec", "modules/generated/tensorly.tt_tensor.pad_tt_rank", "modules/generated/tensorly.tt_tensor.tt_to_tensor", "modules/generated/tensorly.tt_tensor.tt_to_unfolded", "modules/generated/tensorly.tt_tensor.tt_to_vec", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded", "modules/generated/tensorly.tucker_tensor.tucker_to_vec", "modules/generated/tensorly.use_dynamic_dispatch", "modules/generated/tensorly.use_static_dispatch", "modules/generated/tensorly.where", "modules/generated/tensorly.zeros", "modules/generated/tensorly.zeros_like", "modules/generated/tucker-function", "sg_execution_times", "user_guide/backend", "user_guide/index", "user_guide/quickstart", "user_guide/sparse_backend", "user_guide/tensor_basics", "user_guide/tensor_decomposition", "user_guide/tensor_regression"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_IL2.rst", "auto_examples/applications/plot_covid.rst", "auto_examples/applications/plot_image_compression.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_cp_line_search.rst", "auto_examples/decomposition/plot_guide_for_constrained_cp.rst", "auto_examples/decomposition/plot_nn_cp_hals.rst", "auto_examples/decomposition/plot_nn_tucker.rst", "auto_examples/decomposition/plot_parafac2.rst", "auto_examples/decomposition/plot_parafac2_compression.rst", "auto_examples/decomposition/plot_permute_factors.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_tensor.rst", "auto_examples/regression/index.rst", "auto_examples/regression/plot_cp_regression.rst", "auto_examples/regression/plot_tucker_regression.rst", "auto_examples/regression/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "development_guide/backend_system.rst", "development_guide/contributing.rst", "development_guide/documentation.rst", "development_guide/index.rst", "home.rst", "index.rst", "installation.rst", "modules/api.rst", "modules/generated/parafac2-function.rst", "modules/generated/tensorly.abs.rst", "modules/generated/tensorly.all.rst", "modules/generated/tensorly.arange.rst", "modules/generated/tensorly.argmax.rst", "modules/generated/tensorly.argmin.rst", "modules/generated/tensorly.backend_context.rst", "modules/generated/tensorly.base.fold.rst", "modules/generated/tensorly.base.partial_fold.rst", "modules/generated/tensorly.base.partial_tensor_to_vec.rst", "modules/generated/tensorly.base.partial_unfold.rst", "modules/generated/tensorly.base.partial_vec_to_tensor.rst", "modules/generated/tensorly.base.tensor_to_vec.rst", "modules/generated/tensorly.base.unfold.rst", "modules/generated/tensorly.base.vec_to_tensor.rst", "modules/generated/tensorly.check_random_state.rst", "modules/generated/tensorly.clip.rst", "modules/generated/tensorly.concatenate.rst", "modules/generated/tensorly.conj.rst", "modules/generated/tensorly.context.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_OI.rst", "modules/generated/tensorly.contrib.decomposition.tensor_train_cross.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.parafac.rst", "modules/generated/tensorly.contrib.sparse.decomposition.partial_tucker.rst", "modules/generated/tensorly.contrib.sparse.decomposition.robust_pca.rst", "modules/generated/tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.contrib.sparse.decomposition.tucker.rst", "modules/generated/tensorly.copy.rst", "modules/generated/tensorly.cp_tensor.cp_mode_dot.rst", "modules/generated/tensorly.cp_tensor.cp_norm.rst", "modules/generated/tensorly.cp_tensor.cp_normalize.rst", "modules/generated/tensorly.cp_tensor.cp_permute_factors.rst", "modules/generated/tensorly.cp_tensor.cp_to_tensor.rst", "modules/generated/tensorly.cp_tensor.cp_to_unfolded.rst", "modules/generated/tensorly.cp_tensor.cp_to_vec.rst", "modules/generated/tensorly.datasets.load_IL2data.rst", "modules/generated/tensorly.datasets.load_covid19_serology.rst", "modules/generated/tensorly.datasets.load_indian_pines.rst", "modules/generated/tensorly.datasets.load_kinetic.rst", "modules/generated/tensorly.datasets.synthetic.gen_image.rst", "modules/generated/tensorly.decomposition.CP.rst", "modules/generated/tensorly.decomposition.CPPower.rst", "modules/generated/tensorly.decomposition.CP_NN_HALS.rst", "modules/generated/tensorly.decomposition.ConstrainedCP.rst", "modules/generated/tensorly.decomposition.Parafac2.rst", "modules/generated/tensorly.decomposition.RandomizedCP.rst", "modules/generated/tensorly.decomposition.SymmetricCP.rst", "modules/generated/tensorly.decomposition.TensorRing.rst", "modules/generated/tensorly.decomposition.TensorTrain.rst", "modules/generated/tensorly.decomposition.TensorTrainMatrix.rst", "modules/generated/tensorly.decomposition.Tucker.rst", "modules/generated/tensorly.decomposition.constrained_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac.rst", "modules/generated/tensorly.decomposition.non_negative_parafac_hals.rst", "modules/generated/tensorly.decomposition.non_negative_tucker.rst", "modules/generated/tensorly.decomposition.non_negative_tucker_hals.rst", "modules/generated/tensorly.decomposition.parafac.rst", "modules/generated/tensorly.decomposition.parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.partial_tucker.rst", "modules/generated/tensorly.decomposition.power_iteration.rst", "modules/generated/tensorly.decomposition.randomised_parafac.rst", "modules/generated/tensorly.decomposition.robust_pca.rst", "modules/generated/tensorly.decomposition.sample_khatri_rao.rst", "modules/generated/tensorly.decomposition.symmetric_parafac_power_iteration.rst", "modules/generated/tensorly.decomposition.symmetric_power_iteration.rst", "modules/generated/tensorly.decomposition.tensor_ring.rst", "modules/generated/tensorly.decomposition.tensor_train.rst", "modules/generated/tensorly.decomposition.tensor_train_matrix.rst", "modules/generated/tensorly.diag.rst", "modules/generated/tensorly.dot.rst", "modules/generated/tensorly.eps.rst", "modules/generated/tensorly.eye.rst", "modules/generated/tensorly.finfo.rst", "modules/generated/tensorly.get_backend.rst", "modules/generated/tensorly.index.rst", "modules/generated/tensorly.index_update.rst", "modules/generated/tensorly.is_tensor.rst", "modules/generated/tensorly.kr.rst", "modules/generated/tensorly.kron.rst", "modules/generated/tensorly.matmul.rst", "modules/generated/tensorly.max.rst", "modules/generated/tensorly.mean.rst", "modules/generated/tensorly.metrics.correlation_index.rst", "modules/generated/tensorly.metrics.factors.congruence_coefficient.rst", "modules/generated/tensorly.metrics.regression.MSE.rst", "modules/generated/tensorly.metrics.regression.RMSE.rst", "modules/generated/tensorly.min.rst", "modules/generated/tensorly.moveaxis.rst", "modules/generated/tensorly.ndim.rst", "modules/generated/tensorly.norm.rst", "modules/generated/tensorly.ones.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slice.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_slices.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_tensor.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_unfolded.rst", "modules/generated/tensorly.parafac2_tensor.parafac2_to_vec.rst", "modules/generated/tensorly.plugins.use_cuquantum.rst", "modules/generated/tensorly.plugins.use_default_einsum.rst", "modules/generated/tensorly.plugins.use_opt_einsum.rst", "modules/generated/tensorly.preprocessing.svd_compress_tensor_slices.rst", "modules/generated/tensorly.preprocessing.svd_decompress_parafac2_tensor.rst", "modules/generated/tensorly.prod.rst", "modules/generated/tensorly.qr.rst", "modules/generated/tensorly.random.random_cp.rst", "modules/generated/tensorly.random.random_parafac2.rst", "modules/generated/tensorly.random.random_tt.rst", "modules/generated/tensorly.random.random_tt_matrix.rst", "modules/generated/tensorly.random.random_tucker.rst", "modules/generated/tensorly.regression.CP_PLSR.rst", "modules/generated/tensorly.regression.cp_regression.CPRegressor.rst", "modules/generated/tensorly.regression.tucker_regression.TuckerRegressor.rst", "modules/generated/tensorly.reshape.rst", "modules/generated/tensorly.set_backend.rst", "modules/generated/tensorly.shape.rst", "modules/generated/tensorly.sign.rst", "modules/generated/tensorly.solve.rst", "modules/generated/tensorly.solvers.admm.admm.rst", "modules/generated/tensorly.solvers.nnls.active_set_nnls.rst", "modules/generated/tensorly.solvers.nnls.fista.rst", "modules/generated/tensorly.solvers.nnls.hals_nnls.rst", "modules/generated/tensorly.sort.rst", "modules/generated/tensorly.sqrt.rst", "modules/generated/tensorly.stack.rst", "modules/generated/tensorly.sum.rst", "modules/generated/tensorly.tenalg.backend_context.rst", "modules/generated/tensorly.tenalg.batched_outer.rst", "modules/generated/tensorly.tenalg.get_backend.rst", "modules/generated/tensorly.tenalg.higher_order_moment.rst", "modules/generated/tensorly.tenalg.inner.rst", "modules/generated/tensorly.tenalg.khatri_rao.rst", "modules/generated/tensorly.tenalg.kronecker.rst", "modules/generated/tensorly.tenalg.mode_dot.rst", "modules/generated/tensorly.tenalg.multi_mode_dot.rst", "modules/generated/tensorly.tenalg.outer.rst", "modules/generated/tensorly.tenalg.proximal.procrustes.rst", "modules/generated/tensorly.tenalg.proximal.soft_thresholding.rst", "modules/generated/tensorly.tenalg.proximal.svd_thresholding.rst", "modules/generated/tensorly.tenalg.set_backend.rst", "modules/generated/tensorly.tenalg.svd_interface.rst", "modules/generated/tensorly.tenalg.tensordot.rst", "modules/generated/tensorly.tenalg.unfolding_dot_khatri_rao.rst", "modules/generated/tensorly.tensor.rst", "modules/generated/tensorly.tensordot.rst", "modules/generated/tensorly.to_numpy.rst", "modules/generated/tensorly.transpose.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_tensor.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_unfolded.rst", "modules/generated/tensorly.tt_matrix.tt_matrix_to_vec.rst", "modules/generated/tensorly.tt_tensor.pad_tt_rank.rst", "modules/generated/tensorly.tt_tensor.tt_to_tensor.rst", "modules/generated/tensorly.tt_tensor.tt_to_unfolded.rst", "modules/generated/tensorly.tt_tensor.tt_to_vec.rst", "modules/generated/tensorly.tucker_tensor.tucker_mode_dot.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_tensor.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_unfolded.rst", "modules/generated/tensorly.tucker_tensor.tucker_to_vec.rst", "modules/generated/tensorly.use_dynamic_dispatch.rst", "modules/generated/tensorly.use_static_dispatch.rst", "modules/generated/tensorly.where.rst", "modules/generated/tensorly.zeros.rst", "modules/generated/tensorly.zeros_like.rst", "modules/generated/tucker-function.rst", "sg_execution_times.rst", "user_guide/backend.rst", "user_guide/index.rst", "user_guide/quickstart.rst", "user_guide/sparse_backend.rst", "user_guide/tensor_basics.rst", "user_guide/tensor_decomposition.rst", "user_guide/tensor_regression.rst"], "indexentries": {"abs() (in module tensorly)": [[31, "tensorly.abs", false]], "active_set_nnls() (in module tensorly.solvers.nnls)": [[149, "tensorly.solvers.nnls.active_set_nnls", false]], "admm() (in module tensorly.solvers.admm)": [[148, "tensorly.solvers.admm.admm", false]], "all() (in module tensorly)": [[32, "tensorly.all", false]], "arange() (in module tensorly)": [[33, "tensorly.arange", false]], "argmax() (in module tensorly)": [[34, "tensorly.argmax", false]], "argmin() (in module tensorly)": [[35, "tensorly.argmin", false]], "backend_context() (in module tensorly)": [[36, "tensorly.backend_context", false]], "backend_context() (in module tensorly.tenalg)": [[156, "tensorly.tenalg.backend_context", false]], "batched_outer() (in module tensorly.tenalg)": [[157, "tensorly.tenalg.batched_outer", false]], "check_random_state() (in module tensorly)": [[45, "tensorly.check_random_state", false]], "clip() (in module tensorly)": [[46, "tensorly.clip", false]], "concatenate() (in module tensorly)": [[47, "tensorly.concatenate", false]], "congruence_coefficient() (in module tensorly.metrics.factors)": [[115, "tensorly.metrics.factors.congruence_coefficient", false]], "conj() (in module tensorly)": [[48, "tensorly.conj", false]], "constrained_parafac() (in module tensorly.decomposition)": [[83, "tensorly.decomposition.constrained_parafac", false]], "constrainedcp (class in tensorly.decomposition)": [[75, "tensorly.decomposition.ConstrainedCP", false]], "context() (in module tensorly)": [[49, "tensorly.context", false]], "copy() (in module tensorly)": [[59, "tensorly.copy", false]], "correlation_index() (in module tensorly.metrics)": [[114, "tensorly.metrics.correlation_index", false]], "cp (class in tensorly.decomposition)": [[72, "tensorly.decomposition.CP", false]], "cp_mode_dot() (in module tensorly.cp_tensor)": [[60, "tensorly.cp_tensor.cp_mode_dot", false]], "cp_nn_hals (class in tensorly.decomposition)": [[74, "tensorly.decomposition.CP_NN_HALS", false]], "cp_norm() (in module tensorly.cp_tensor)": [[61, "tensorly.cp_tensor.cp_norm", false]], "cp_normalize() (in module tensorly.cp_tensor)": [[62, "tensorly.cp_tensor.cp_normalize", false]], "cp_permute_factors() (in module tensorly.cp_tensor)": [[63, "tensorly.cp_tensor.cp_permute_factors", false]], "cp_plsr (class in tensorly.regression)": [[140, "tensorly.regression.CP_PLSR", false]], "cp_to_tensor() (in module tensorly.cp_tensor)": [[64, "tensorly.cp_tensor.cp_to_tensor", false]], "cp_to_unfolded() (in module tensorly.cp_tensor)": [[65, "tensorly.cp_tensor.cp_to_unfolded", false]], "cp_to_vec() (in module tensorly.cp_tensor)": [[66, "tensorly.cp_tensor.cp_to_vec", false]], "cppower (class in tensorly.decomposition)": [[73, "tensorly.decomposition.CPPower", false]], "cpregressor (class in tensorly.regression.cp_regression)": [[141, "tensorly.regression.cp_regression.CPRegressor", false]], "diag() (in module tensorly)": [[100, "tensorly.diag", false]], "dot() (in module tensorly)": [[101, "tensorly.dot", false]], "eps() (in module tensorly)": [[102, "tensorly.eps", false]], "eye() (in module tensorly)": [[103, "tensorly.eye", false]], "finfo() (in module tensorly)": [[104, "tensorly.finfo", false]], "fista() (in module tensorly.solvers.nnls)": [[150, "tensorly.solvers.nnls.fista", false]], "fit() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.fit", false]], "fit() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.fit", false]], "fit() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.fit", false]], "fit_transform() (constrainedcp method)": [[75, "tensorly.decomposition.ConstrainedCP.fit_transform", false]], "fit_transform() (cp method)": [[72, "tensorly.decomposition.CP.fit_transform", false]], "fit_transform() (cp_nn_hals method)": [[74, "tensorly.decomposition.CP_NN_HALS.fit_transform", false]], "fit_transform() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.fit_transform", false]], "fit_transform() (cppower method)": [[73, "tensorly.decomposition.CPPower.fit_transform", false]], "fit_transform() (parafac2 method)": [[76, "tensorly.decomposition.Parafac2.fit_transform", false]], "fold() (in module tensorly.base)": [[37, "tensorly.base.fold", false]], "gen_image() (in module tensorly.datasets.synthetic)": [[71, "tensorly.datasets.synthetic.gen_image", false]], "get_backend() (in module tensorly)": [[105, "tensorly.get_backend", false]], "get_backend() (in module tensorly.tenalg)": [[158, "tensorly.tenalg.get_backend", false]], "get_params() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.get_params", false]], "get_params() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.get_params", false]], "get_params() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.get_params", false]], "hals_nnls() (in module tensorly.solvers.nnls)": [[151, "tensorly.solvers.nnls.hals_nnls", false]], "higher_order_moment() (in module tensorly.tenalg)": [[159, "tensorly.tenalg.higher_order_moment", false]], "index() (in module tensorly)": [[106, "tensorly.index", false]], "index_update() (in module tensorly)": [[107, "tensorly.index_update", false]], "inner() (in module tensorly.tenalg)": [[160, "tensorly.tenalg.inner", false]], "is_tensor() (in module tensorly)": [[108, "tensorly.is_tensor", false]], "khatri_rao() (in module tensorly.tenalg)": [[161, "tensorly.tenalg.khatri_rao", false]], "kr() (in module tensorly)": [[109, "tensorly.kr", false]], "kron() (in module tensorly)": [[110, "tensorly.kron", false]], "kronecker() (in module tensorly.tenalg)": [[162, "tensorly.tenalg.kronecker", false]], "load_covid19_serology() (in module tensorly.datasets)": [[68, "tensorly.datasets.load_covid19_serology", false]], "load_il2data() (in module tensorly.datasets)": [[67, "tensorly.datasets.load_IL2data", false]], "load_indian_pines() (in module tensorly.datasets)": [[69, "tensorly.datasets.load_indian_pines", false]], "load_kinetic() (in module tensorly.datasets)": [[70, "tensorly.datasets.load_kinetic", false]], "matmul() (in module tensorly)": [[111, "tensorly.matmul", false]], "max() (in module tensorly)": [[112, "tensorly.max", false]], "mean() (in module tensorly)": [[113, "tensorly.mean", false]], "min() (in module tensorly)": [[118, "tensorly.min", false]], "mode_dot() (in module tensorly.tenalg)": [[163, "tensorly.tenalg.mode_dot", false]], "module": [[29, "module-tensorly", false], [29, "module-tensorly.base", false], [29, "module-tensorly.contrib", false], [29, "module-tensorly.contrib.sparse", false], [29, "module-tensorly.cp_tensor", false], [29, "module-tensorly.datasets", false], [29, "module-tensorly.decomposition", false], [29, "module-tensorly.metrics", false], [29, "module-tensorly.parafac2_tensor", false], [29, "module-tensorly.plugins", false], [29, "module-tensorly.preprocessing", false], [29, "module-tensorly.random", false], [29, "module-tensorly.regression", false], [29, "module-tensorly.solvers", false], [29, "module-tensorly.tenalg", false], [29, "module-tensorly.tt_matrix", false], [29, "module-tensorly.tt_tensor", false], [29, "module-tensorly.tucker_tensor", false]], "moveaxis() (in module tensorly)": [[119, "tensorly.moveaxis", false]], "mse() (in module tensorly.metrics.regression)": [[116, "tensorly.metrics.regression.MSE", false]], "multi_mode_dot() (in module tensorly.tenalg)": [[164, "tensorly.tenalg.multi_mode_dot", false]], "ndim() (in module tensorly)": [[120, "tensorly.ndim", false]], "non_negative_parafac() (in module tensorly.contrib.sparse.decomposition)": [[52, "tensorly.contrib.sparse.decomposition.non_negative_parafac", false]], "non_negative_parafac() (in module tensorly.decomposition)": [[84, "tensorly.decomposition.non_negative_parafac", false]], "non_negative_parafac_hals() (in module tensorly.decomposition)": [[85, "tensorly.decomposition.non_negative_parafac_hals", false]], "non_negative_tucker() (in module tensorly.contrib.sparse.decomposition)": [[53, "tensorly.contrib.sparse.decomposition.non_negative_tucker", false]], "non_negative_tucker() (in module tensorly.decomposition)": [[86, "tensorly.decomposition.non_negative_tucker", false]], "non_negative_tucker_hals() (in module tensorly.decomposition)": [[87, "tensorly.decomposition.non_negative_tucker_hals", false]], "norm() (in module tensorly)": [[121, "tensorly.norm", false]], "ones() (in module tensorly)": [[122, "tensorly.ones", false]], "outer() (in module tensorly.tenalg)": [[165, "tensorly.tenalg.outer", false]], "pad_tt_rank() (in module tensorly.tt_tensor)": [[180, "tensorly.tt_tensor.pad_tt_rank", false]], "parafac() (in module tensorly.contrib.sparse.decomposition)": [[54, "tensorly.contrib.sparse.decomposition.parafac", false]], "parafac() (in module tensorly.decomposition)": [[88, "tensorly.decomposition.parafac", false]], "parafac2 (class in tensorly.decomposition)": [[76, "tensorly.decomposition.Parafac2", false]], "parafac2() (in module tensorly.decomposition)": [[30, "tensorly.decomposition.parafac2", false]], "parafac2_to_slice() (in module tensorly.parafac2_tensor)": [[123, "tensorly.parafac2_tensor.parafac2_to_slice", false]], "parafac2_to_slices() (in module tensorly.parafac2_tensor)": [[124, "tensorly.parafac2_tensor.parafac2_to_slices", false]], "parafac2_to_tensor() (in module tensorly.parafac2_tensor)": [[125, "tensorly.parafac2_tensor.parafac2_to_tensor", false]], "parafac2_to_unfolded() (in module tensorly.parafac2_tensor)": [[126, "tensorly.parafac2_tensor.parafac2_to_unfolded", false]], "parafac2_to_vec() (in module tensorly.parafac2_tensor)": [[127, "tensorly.parafac2_tensor.parafac2_to_vec", false]], "parafac_power_iteration() (in module tensorly.decomposition)": [[89, "tensorly.decomposition.parafac_power_iteration", false]], "partial_fold() (in module tensorly.base)": [[38, "tensorly.base.partial_fold", false]], "partial_tensor_to_vec() (in module tensorly.base)": [[39, "tensorly.base.partial_tensor_to_vec", false]], "partial_tucker() (in module tensorly.contrib.sparse.decomposition)": [[55, "tensorly.contrib.sparse.decomposition.partial_tucker", false]], "partial_tucker() (in module tensorly.decomposition)": [[90, "tensorly.decomposition.partial_tucker", false]], "partial_unfold() (in module tensorly.base)": [[40, "tensorly.base.partial_unfold", false]], "partial_vec_to_tensor() (in module tensorly.base)": [[41, "tensorly.base.partial_vec_to_tensor", false]], "pep 465": [[111, "index-0", false]], "power_iteration() (in module tensorly.decomposition)": [[91, "tensorly.decomposition.power_iteration", false]], "predict() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.predict", false]], "predict() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.predict", false]], "predict() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.predict", false]], "procrustes() (in module tensorly.tenalg.proximal)": [[166, "tensorly.tenalg.proximal.procrustes", false]], "prod() (in module tensorly)": [[133, "tensorly.prod", false]], "python enhancement proposals": [[111, "index-0", false]], "qr() (in module tensorly)": [[134, "tensorly.qr", false]], "random_cp() (in module tensorly.random)": [[135, "tensorly.random.random_cp", false]], "random_parafac2() (in module tensorly.random)": [[136, "tensorly.random.random_parafac2", false]], "random_tt() (in module tensorly.random)": [[137, "tensorly.random.random_tt", false]], "random_tt_matrix() (in module tensorly.random)": [[138, "tensorly.random.random_tt_matrix", false]], "random_tucker() (in module tensorly.random)": [[139, "tensorly.random.random_tucker", false]], "randomised_parafac() (in module tensorly.decomposition)": [[92, "tensorly.decomposition.randomised_parafac", false]], "randomizedcp (class in tensorly.decomposition)": [[77, "tensorly.decomposition.RandomizedCP", false]], "reshape() (in module tensorly)": [[143, "tensorly.reshape", false]], "rmse() (in module tensorly.metrics.regression)": [[117, "tensorly.metrics.regression.RMSE", false]], "robust_pca() (in module tensorly.contrib.sparse.decomposition)": [[56, "tensorly.contrib.sparse.decomposition.robust_pca", false]], "robust_pca() (in module tensorly.decomposition)": [[93, "tensorly.decomposition.robust_pca", false]], "sample_khatri_rao() (in module tensorly.decomposition)": [[94, "tensorly.decomposition.sample_khatri_rao", false]], "score() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.score", false]], "set_backend() (in module tensorly)": [[144, "tensorly.set_backend", false]], "set_backend() (in module tensorly.tenalg)": [[169, "tensorly.tenalg.set_backend", false]], "set_params() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.set_params", false]], "set_params() (cpregressor method)": [[141, "tensorly.regression.cp_regression.CPRegressor.set_params", false]], "set_params() (tuckerregressor method)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor.set_params", false]], "shape() (in module tensorly)": [[145, "tensorly.shape", false]], "sign() (in module tensorly)": [[146, "tensorly.sign", false]], "soft_thresholding() (in module tensorly.tenalg.proximal)": [[167, "tensorly.tenalg.proximal.soft_thresholding", false]], "solve() (in module tensorly)": [[147, "tensorly.solve", false]], "sort() (in module tensorly)": [[152, "tensorly.sort", false]], "sqrt() (in module tensorly)": [[153, "tensorly.sqrt", false]], "stack() (in module tensorly)": [[154, "tensorly.stack", false]], "sum() (in module tensorly)": [[155, "tensorly.sum", false]], "svd_compress_tensor_slices() (in module tensorly.preprocessing)": [[131, "tensorly.preprocessing.svd_compress_tensor_slices", false]], "svd_decompress_parafac2_tensor() (in module tensorly.preprocessing)": [[132, "tensorly.preprocessing.svd_decompress_parafac2_tensor", false]], "svd_interface() (in module tensorly.tenalg)": [[170, "tensorly.tenalg.svd_interface", false]], "svd_thresholding() (in module tensorly.tenalg.proximal)": [[168, "tensorly.tenalg.proximal.svd_thresholding", false]], "symmetric_parafac_power_iteration() (in module tensorly.contrib.sparse.decomposition)": [[57, "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", false]], "symmetric_parafac_power_iteration() (in module tensorly.decomposition)": [[95, "tensorly.decomposition.symmetric_parafac_power_iteration", false]], "symmetric_power_iteration() (in module tensorly.decomposition)": [[96, "tensorly.decomposition.symmetric_power_iteration", false]], "symmetriccp (class in tensorly.decomposition)": [[78, "tensorly.decomposition.SymmetricCP", false]], "tensor() (in module tensorly)": [[173, "tensorly.tensor", false]], "tensor_ring() (in module tensorly.decomposition)": [[97, "tensorly.decomposition.tensor_ring", false]], "tensor_to_vec() (in module tensorly.base)": [[42, "tensorly.base.tensor_to_vec", false]], "tensor_train() (in module tensorly.decomposition)": [[98, "tensorly.decomposition.tensor_train", false]], "tensor_train_cross() (in module tensorly.contrib.decomposition)": [[51, "tensorly.contrib.decomposition.tensor_train_cross", false]], "tensor_train_matrix() (in module tensorly.decomposition)": [[99, "tensorly.decomposition.tensor_train_matrix", false]], "tensor_train_oi() (in module tensorly.contrib.decomposition)": [[50, "tensorly.contrib.decomposition.tensor_train_OI", false]], "tensordot() (in module tensorly)": [[174, "tensorly.tensordot", false]], "tensordot() (in module tensorly.tenalg)": [[171, "tensorly.tenalg.tensordot", false]], "tensorly": [[29, "module-tensorly", false]], "tensorly.base": [[29, "module-tensorly.base", false]], "tensorly.contrib": [[29, "module-tensorly.contrib", false]], "tensorly.contrib.sparse": [[29, "module-tensorly.contrib.sparse", false]], "tensorly.cp_tensor": [[29, "module-tensorly.cp_tensor", false]], "tensorly.datasets": [[29, "module-tensorly.datasets", false]], "tensorly.decomposition": [[29, "module-tensorly.decomposition", false]], "tensorly.metrics": [[29, "module-tensorly.metrics", false]], "tensorly.parafac2_tensor": [[29, "module-tensorly.parafac2_tensor", false]], "tensorly.plugins": [[29, "module-tensorly.plugins", false]], "tensorly.preprocessing": [[29, "module-tensorly.preprocessing", false]], "tensorly.random": [[29, "module-tensorly.random", false]], "tensorly.regression": [[29, "module-tensorly.regression", false]], "tensorly.solvers": [[29, "module-tensorly.solvers", false]], "tensorly.tenalg": [[29, "module-tensorly.tenalg", false]], "tensorly.tt_matrix": [[29, "module-tensorly.tt_matrix", false]], "tensorly.tt_tensor": [[29, "module-tensorly.tt_tensor", false]], "tensorly.tucker_tensor": [[29, "module-tensorly.tucker_tensor", false]], "tensorring (class in tensorly.decomposition)": [[79, "tensorly.decomposition.TensorRing", false]], "tensortrain (class in tensorly.decomposition)": [[80, "tensorly.decomposition.TensorTrain", false]], "tensortrainmatrix (class in tensorly.decomposition)": [[81, "tensorly.decomposition.TensorTrainMatrix", false]], "to_numpy() (in module tensorly)": [[175, "tensorly.to_numpy", false]], "transform() (cp_plsr method)": [[140, "tensorly.regression.CP_PLSR.transform", false]], "transpose() (in module tensorly)": [[176, "tensorly.transpose", false]], "tt_matrix_to_tensor() (in module tensorly.tt_matrix)": [[177, "tensorly.tt_matrix.tt_matrix_to_tensor", false]], "tt_matrix_to_unfolded() (in module tensorly.tt_matrix)": [[178, "tensorly.tt_matrix.tt_matrix_to_unfolded", false]], "tt_matrix_to_vec() (in module tensorly.tt_matrix)": [[179, "tensorly.tt_matrix.tt_matrix_to_vec", false]], "tt_to_tensor() (in module tensorly.tt_tensor)": [[181, "tensorly.tt_tensor.tt_to_tensor", false]], "tt_to_unfolded() (in module tensorly.tt_tensor)": [[182, "tensorly.tt_tensor.tt_to_unfolded", false]], "tt_to_vec() (in module tensorly.tt_tensor)": [[183, "tensorly.tt_tensor.tt_to_vec", false]], "tucker (class in tensorly.decomposition)": [[82, "tensorly.decomposition.Tucker", false]], "tucker() (in module tensorly.contrib.sparse.decomposition)": [[58, "tensorly.contrib.sparse.decomposition.tucker", false]], "tucker() (in module tensorly.decomposition)": [[193, "tensorly.decomposition.tucker", false]], "tucker_mode_dot() (in module tensorly.tucker_tensor)": [[184, "tensorly.tucker_tensor.tucker_mode_dot", false]], "tucker_to_tensor() (in module tensorly.tucker_tensor)": [[185, "tensorly.tucker_tensor.tucker_to_tensor", false]], "tucker_to_unfolded() (in module tensorly.tucker_tensor)": [[186, "tensorly.tucker_tensor.tucker_to_unfolded", false]], "tucker_to_vec() (in module tensorly.tucker_tensor)": [[187, "tensorly.tucker_tensor.tucker_to_vec", false]], "tuckerregressor (class in tensorly.regression.tucker_regression)": [[142, "tensorly.regression.tucker_regression.TuckerRegressor", false]], "unfold() (in module tensorly.base)": [[43, "tensorly.base.unfold", false]], "unfolding_dot_khatri_rao() (in module tensorly.tenalg)": [[172, "tensorly.tenalg.unfolding_dot_khatri_rao", false]], "use_cuquantum() (in module tensorly.plugins)": [[128, "tensorly.plugins.use_cuquantum", false]], "use_default_einsum() (in module tensorly.plugins)": [[129, "tensorly.plugins.use_default_einsum", false]], "use_dynamic_dispatch() (in module tensorly)": [[188, "tensorly.use_dynamic_dispatch", false]], "use_opt_einsum() (in module tensorly.plugins)": [[130, "tensorly.plugins.use_opt_einsum", false]], "use_static_dispatch() (in module tensorly)": [[189, "tensorly.use_static_dispatch", false]], "vec_to_tensor() (in module tensorly.base)": [[44, "tensorly.base.vec_to_tensor", false]], "where() (in module tensorly)": [[190, "tensorly.where", false]], "zeros() (in module tensorly)": [[191, "tensorly.zeros", false]], "zeros_like() (in module tensorly)": [[192, "tensorly.zeros_like", false]]}, "objects": {"": [[29, 0, 0, "-", "tensorly"]], "tensorly": [[31, 1, 1, "", "abs"], [32, 1, 1, "", "all"], [33, 1, 1, "", "arange"], [34, 1, 1, "", "argmax"], [35, 1, 1, "", "argmin"], [36, 1, 1, "", "backend_context"], [29, 0, 0, "-", "base"], [45, 1, 1, "", "check_random_state"], [46, 1, 1, "", "clip"], [47, 1, 1, "", "concatenate"], [48, 1, 1, "", "conj"], [49, 1, 1, "", "context"], [29, 0, 0, "-", "contrib"], [59, 1, 1, "", "copy"], [29, 0, 0, "-", "cp_tensor"], [29, 0, 0, "-", "datasets"], [29, 0, 0, "-", "decomposition"], [100, 1, 1, "", "diag"], [101, 1, 1, "", "dot"], [102, 1, 1, "", "eps"], [103, 1, 1, "", "eye"], [104, 1, 1, "", "finfo"], [105, 1, 1, "", "get_backend"], [106, 1, 1, "", "index"], [107, 1, 1, "", "index_update"], [108, 1, 1, "", "is_tensor"], [109, 1, 1, "", "kr"], [110, 1, 1, "", "kron"], [111, 1, 1, "", "matmul"], [112, 1, 1, "", "max"], [113, 1, 1, "", "mean"], [29, 0, 0, "-", "metrics"], [118, 1, 1, "", "min"], [119, 1, 1, "", "moveaxis"], [120, 1, 1, "", "ndim"], [121, 1, 1, "", "norm"], [122, 1, 1, "", "ones"], [29, 0, 0, "-", "parafac2_tensor"], [29, 0, 0, "-", "plugins"], [29, 0, 0, "-", "preprocessing"], [133, 1, 1, "", "prod"], [134, 1, 1, "", "qr"], [29, 0, 0, "-", "random"], [29, 0, 0, "-", "regression"], [143, 1, 1, "", "reshape"], [144, 1, 1, "", "set_backend"], [145, 1, 1, "", "shape"], [146, 1, 1, "", "sign"], [147, 1, 1, "", "solve"], [29, 0, 0, "-", "solvers"], [152, 1, 1, "", "sort"], [153, 1, 1, "", "sqrt"], [154, 1, 1, "", "stack"], [155, 1, 1, "", "sum"], [29, 0, 0, "-", "tenalg"], [173, 1, 1, "", "tensor"], [174, 1, 1, "", "tensordot"], [175, 1, 1, "", "to_numpy"], [176, 1, 1, "", "transpose"], [29, 0, 0, "-", "tt_matrix"], [29, 0, 0, "-", "tt_tensor"], [29, 0, 0, "-", "tucker_tensor"], [188, 1, 1, "", "use_dynamic_dispatch"], [189, 1, 1, "", "use_static_dispatch"], [190, 1, 1, "", "where"], [191, 1, 1, "", "zeros"], [192, 1, 1, "", "zeros_like"]], "tensorly.base": [[37, 1, 1, "", "fold"], [38, 1, 1, "", "partial_fold"], [39, 1, 1, "", "partial_tensor_to_vec"], [40, 1, 1, "", "partial_unfold"], [41, 1, 1, "", "partial_vec_to_tensor"], [42, 1, 1, "", "tensor_to_vec"], [43, 1, 1, "", "unfold"], [44, 1, 1, "", "vec_to_tensor"]], "tensorly.contrib": [[29, 0, 0, "-", "sparse"]], "tensorly.contrib.decomposition": [[50, 1, 1, "", "tensor_train_OI"], [51, 1, 1, "", "tensor_train_cross"]], "tensorly.contrib.sparse.decomposition": [[52, 1, 1, "", "non_negative_parafac"], [53, 1, 1, "", "non_negative_tucker"], [54, 1, 1, "", "parafac"], [55, 1, 1, "", "partial_tucker"], [56, 1, 1, "", "robust_pca"], [57, 1, 1, "", "symmetric_parafac_power_iteration"], [58, 1, 1, "", "tucker"]], "tensorly.cp_tensor": [[60, 1, 1, "", "cp_mode_dot"], [61, 1, 1, "", "cp_norm"], [62, 1, 1, "", "cp_normalize"], [63, 1, 1, "", "cp_permute_factors"], [64, 1, 1, "", "cp_to_tensor"], [65, 1, 1, "", "cp_to_unfolded"], [66, 1, 1, "", "cp_to_vec"]], "tensorly.datasets": [[67, 1, 1, "", "load_IL2data"], [68, 1, 1, "", "load_covid19_serology"], [69, 1, 1, "", "load_indian_pines"], [70, 1, 1, "", "load_kinetic"]], "tensorly.datasets.synthetic": [[71, 1, 1, "", "gen_image"]], "tensorly.decomposition": [[72, 2, 1, "", "CP"], [73, 2, 1, "", "CPPower"], [74, 2, 1, "", "CP_NN_HALS"], [75, 2, 1, "", "ConstrainedCP"], [76, 2, 1, "", "Parafac2"], [77, 2, 1, "", "RandomizedCP"], [78, 2, 1, "", "SymmetricCP"], [79, 2, 1, "", "TensorRing"], [80, 2, 1, "", "TensorTrain"], [81, 2, 1, "", "TensorTrainMatrix"], [82, 2, 1, "", "Tucker"], [83, 1, 1, "", "constrained_parafac"], [84, 1, 1, "", "non_negative_parafac"], [85, 1, 1, "", "non_negative_parafac_hals"], [86, 1, 1, "", "non_negative_tucker"], [87, 1, 1, "", "non_negative_tucker_hals"], [88, 1, 1, "", "parafac"], [30, 1, 1, "", "parafac2"], [89, 1, 1, "", "parafac_power_iteration"], [90, 1, 1, "", "partial_tucker"], [91, 1, 1, "", "power_iteration"], [92, 1, 1, "", "randomised_parafac"], [93, 1, 1, "", "robust_pca"], [94, 1, 1, "", "sample_khatri_rao"], [95, 1, 1, "", "symmetric_parafac_power_iteration"], [96, 1, 1, "", "symmetric_power_iteration"], [97, 1, 1, "", "tensor_ring"], [98, 1, 1, "", "tensor_train"], [99, 1, 1, "", "tensor_train_matrix"], [193, 1, 1, "", "tucker"]], "tensorly.decomposition.CP": [[72, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CPPower": [[73, 3, 1, "", "fit_transform"]], "tensorly.decomposition.CP_NN_HALS": [[74, 3, 1, "", "fit_transform"]], "tensorly.decomposition.ConstrainedCP": [[75, 3, 1, "", "fit_transform"]], "tensorly.decomposition.Parafac2": [[76, 3, 1, "", "fit_transform"]], "tensorly.metrics": [[114, 1, 1, "", "correlation_index"]], "tensorly.metrics.factors": [[115, 1, 1, "", "congruence_coefficient"]], "tensorly.metrics.regression": [[116, 1, 1, "", "MSE"], [117, 1, 1, "", "RMSE"]], "tensorly.parafac2_tensor": [[123, 1, 1, "", "parafac2_to_slice"], [124, 1, 1, "", "parafac2_to_slices"], [125, 1, 1, "", "parafac2_to_tensor"], [126, 1, 1, "", "parafac2_to_unfolded"], [127, 1, 1, "", "parafac2_to_vec"]], "tensorly.plugins": [[128, 1, 1, "", "use_cuquantum"], [129, 1, 1, "", "use_default_einsum"], [130, 1, 1, "", "use_opt_einsum"]], "tensorly.preprocessing": [[131, 1, 1, "", "svd_compress_tensor_slices"], [132, 1, 1, "", "svd_decompress_parafac2_tensor"]], "tensorly.random": [[135, 1, 1, "", "random_cp"], [136, 1, 1, "", "random_parafac2"], [137, 1, 1, "", "random_tt"], [138, 1, 1, "", "random_tt_matrix"], [139, 1, 1, "", "random_tucker"]], "tensorly.regression": [[140, 2, 1, "", "CP_PLSR"]], "tensorly.regression.CP_PLSR": [[140, 3, 1, "", "fit"], [140, 3, 1, "", "fit_transform"], [140, 3, 1, "", "get_params"], [140, 3, 1, "", "predict"], [140, 3, 1, "", "score"], [140, 3, 1, "", "set_params"], [140, 3, 1, "", "transform"]], "tensorly.regression.cp_regression": [[141, 2, 1, "", "CPRegressor"]], "tensorly.regression.cp_regression.CPRegressor": [[141, 3, 1, "", "fit"], [141, 3, 1, "", "get_params"], [141, 3, 1, "", "predict"], [141, 3, 1, "", "set_params"]], "tensorly.regression.tucker_regression": [[142, 2, 1, "", "TuckerRegressor"]], "tensorly.regression.tucker_regression.TuckerRegressor": [[142, 3, 1, "", "fit"], [142, 3, 1, "", "get_params"], [142, 3, 1, "", "predict"], [142, 3, 1, "", "set_params"]], "tensorly.solvers.admm": [[148, 1, 1, "", "admm"]], "tensorly.solvers.nnls": [[149, 1, 1, "", "active_set_nnls"], [150, 1, 1, "", "fista"], [151, 1, 1, "", "hals_nnls"]], "tensorly.tenalg": [[156, 1, 1, "", "backend_context"], [157, 1, 1, "", "batched_outer"], [158, 1, 1, "", "get_backend"], [159, 1, 1, "", "higher_order_moment"], [160, 1, 1, "", "inner"], [161, 1, 1, "", "khatri_rao"], [162, 1, 1, "", "kronecker"], [163, 1, 1, "", "mode_dot"], [164, 1, 1, "", "multi_mode_dot"], [165, 1, 1, "", "outer"], [169, 1, 1, "", "set_backend"], [170, 1, 1, "", "svd_interface"], [171, 1, 1, "", "tensordot"], [172, 1, 1, "", "unfolding_dot_khatri_rao"]], "tensorly.tenalg.proximal": [[166, 1, 1, "", "procrustes"], [167, 1, 1, "", "soft_thresholding"], [168, 1, 1, "", "svd_thresholding"]], "tensorly.tt_matrix": [[177, 1, 1, "", "tt_matrix_to_tensor"], [178, 1, 1, "", "tt_matrix_to_unfolded"], [179, 1, 1, "", "tt_matrix_to_vec"]], "tensorly.tt_tensor": [[180, 1, 1, "", "pad_tt_rank"], [181, 1, 1, "", "tt_to_tensor"], [182, 1, 1, "", "tt_to_unfolded"], [183, 1, 1, "", "tt_to_vec"]], "tensorly.tucker_tensor": [[184, 1, 1, "", "tucker_mode_dot"], [185, 1, 1, "", "tucker_to_tensor"], [186, 1, 1, "", "tucker_to_unfolded"], [187, 1, 1, "", "tucker_to_vec"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "terms": {"": [2, 3, 12, 23, 24, 25, 27, 28, 32, 45, 53, 67, 68, 70, 86, 112, 118, 122, 128, 130, 131, 143, 149, 155, 160, 170, 174, 191, 196, 197, 198, 199, 200], "0": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 64, 66, 70, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 100, 101, 103, 110, 111, 112, 113, 114, 118, 119, 122, 131, 133, 134, 137, 138, 140, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 161, 162, 164, 167, 170, 174, 176, 180, 185, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200], "00": [5, 14, 20, 21, 194, 200], "0001": [51, 53, 55, 56, 58, 82, 86, 90, 93, 148, 193], "000161408": 198, "000e": 200, "005": [16, 21, 194], "01": [5, 8, 20, 194], "02": 8, "024016": 198, "03": [5, 8, 14, 194], "04": [8, 9, 20, 194], "04562": 51, "04ch37541": 151, "05": [8, 20], "053689002990723": 198, "05535": [79, 97], "06": [5, 52, 56, 75, 83, 84, 93, 141, 142], "07": [8, 14, 74, 85, 149, 194], "08": [8, 14, 30, 54, 72, 75, 76, 77, 83, 87, 88, 92, 150, 151, 194], "09": [8, 10, 140], "09204695261872768": 11, "09204698427747768": 11, "09204700880318421": 11, "09204714361493882": 11, "09204716605012422": 11, "09204719323465736": 11, "09204725131428858": 11, "0920475342964699": 11, "092697248568492": 11, "09290580705038641": 11, "0e": 7, "0j": [101, 111, 146], "0x7fc17de98080": 11, "0x7fc17deac6e0": 3, "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 21, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 103, 106, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 130, 131, 133, 134, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 167, 170, 174, 176, 177, 179, 180, 183, 184, 185, 190, 191, 192, 193, 197, 198, 199, 200, 201], "10": [3, 4, 7, 8, 9, 10, 11, 12, 16, 23, 28, 31, 34, 35, 53, 57, 59, 69, 73, 75, 78, 83, 86, 89, 91, 95, 96, 110, 111, 112, 113, 114, 118, 131, 133, 154, 155, 190, 195, 197, 198, 199, 200], "100": [4, 10, 18, 19, 30, 51, 52, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 93, 110, 140, 141, 142, 148, 149, 150, 193, 198], "1000": [3, 10, 12, 18, 19, 198], "10000": [12, 33], "10000000000": [56, 93], "1001": 198, "1002": [131, 198], "101": 31, "1016": 114, "102": 12, "104": 51, "104312": 30, "108457": 114, "1085": [9, 10, 85, 151], "10_000": 12, "10e": [4, 18, 19, 56, 93, 151, 200], "10e9": [56, 93], "10x10x10": 197, "11": [8, 16, 34, 35, 113, 119, 149, 190, 198, 199], "1105": [9, 10, 85, 151], "115": 12, "116": 3, "12": [2, 4, 8, 9, 10, 12, 16, 34, 35, 67, 69, 101, 113, 133, 152, 190, 198, 199, 200], "120": 12, "121": 12, "1234": 7, "12345": 4, "124": 51, "128": 155, "129": 11, "13": [2, 8, 11, 16, 30, 34, 35, 67, 76, 101, 111, 113, 194, 198, 199], "137": 70, "14": [8, 16, 34, 35, 103, 113, 198, 199], "15": [7, 8, 9, 11, 12, 13, 16, 34, 35, 112, 113, 118, 133, 152, 155, 198, 199], "150": 70, "1508": [3, 68], "1519": [3, 68], "15252": 3, "158": [13, 14, 194], "16": [3, 8, 11, 16, 111, 114, 133, 198, 199, 200], "1606": [79, 97], "163": [54, 72, 74, 88], "17": [3, 8, 16, 68, 112, 118, 133, 152, 155, 192, 198, 199, 200], "1707": 51, "173": [19, 20, 194], "18": [8, 16, 27, 152, 198, 199], "180": [54, 72, 74, 88], "183": [3, 68, 150], "19": [1, 5, 8, 12, 14, 15, 16, 59, 68, 75, 83, 113, 148, 194, 198, 199], "1974": 10, "1980": 147, "199": 9, "1992": 69, "1996": 140, "1997": 149, "1998": [30, 54, 72, 74, 88], "1999": [11, 30, 76], "1d": [30, 42, 44, 52, 54, 60, 72, 74, 75, 76, 83, 84, 85, 88, 123, 124, 125, 126, 127, 161, 163, 184, 187], "1e": [2, 3, 10, 11, 12, 30, 52, 54, 56, 72, 74, 75, 76, 77, 83, 84, 85, 87, 88, 92, 93, 140, 141, 142, 149, 150, 151], "1e9": 198, "1f": 12, "1j": [31, 48], "2": [1, 3, 4, 5, 8, 10, 11, 13, 15, 16, 18, 19, 20, 23, 24, 28, 30, 31, 32, 33, 34, 35, 47, 48, 50, 51, 52, 53, 54, 56, 57, 59, 61, 64, 67, 68, 70, 72, 73, 74, 75, 76, 78, 80, 83, 84, 86, 87, 88, 89, 93, 95, 99, 100, 101, 103, 110, 111, 112, 113, 118, 119, 121, 122, 131, 133, 134, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167, 170, 174, 176, 178, 182, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201], "20": [4, 9, 11, 14, 16, 24, 27, 32, 33, 47, 71, 77, 92, 103, 110, 113, 122, 191, 194, 198, 199], "2000": [12, 30, 76], "2000000": 7, "2003": 70, "2004": 151, "2005": [52, 54, 72, 74, 84, 88], "2007": [53, 86], "2009": [54, 58, 72, 74, 75, 82, 83, 87, 88, 150, 161, 162, 193, 199, 200], "2010": 51, "2011": [81, 98], "2012": [9, 10, 85, 151, 201], "2015": [0, 69], "2016": [8, 75, 79, 83, 97, 148], "201600045": 131, "2017": [51, 131], "2018": [28, 130], "2019": 27, "202": 150, "2020": [3, 68], "2021": [3, 30, 67, 68], "202110243": 3, "2022": [50, 114, 131], "2040633": 9, "21": [4, 8, 16, 198, 199, 201], "212": 12, "214": 30, "22": [8, 16, 34, 35, 147, 198, 199], "220": [9, 69], "2295": [81, 98], "23": [8, 14, 16, 194, 198, 199], "2317": [81, 98], "24": [8, 9, 10, 14, 16, 34, 35, 51, 85, 110, 133, 151, 154, 174, 198, 199], "24000": 9, "2454": 131, "2467": 131, "25": [2, 4, 8, 18, 19, 51], "250": [8, 14, 194], "255": 4, "26": [8, 27, 130], "260": 5, "263": 12, "27": 8, "275": [11, 30, 76], "277": 27, "280": 10, "281": 10, "28293632": 32, "286": 10, "29": [8, 51], "294": [30, 76], "2_000": 12, "2d": [60, 135, 139, 140, 159, 161, 163, 170, 184, 185, 186], "2f": [9, 10], "2j": [48, 101, 111], "2nd": 147, "3": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 30, 33, 34, 35, 47, 51, 54, 58, 59, 69, 72, 74, 75, 77, 79, 80, 81, 82, 83, 87, 88, 92, 97, 98, 99, 100, 101, 103, 106, 107, 110, 111, 112, 113, 118, 119, 122, 130, 133, 134, 143, 145, 146, 147, 152, 153, 154, 161, 162, 167, 174, 176, 190, 191, 192, 193, 197, 198, 199, 200], "30": [9, 10, 11, 13], "31": 8, "32": [8, 133], "33": [8, 9, 12, 81, 98], "3361": 33, "340e": 200, "346": 12, "35": 8, "3588": 9, "36": [8, 9, 194], "37": 8, "372": [10, 14, 194], "38": [8, 152], "3858051300048828": 198, "38th": 131, "39": 8, "393": 149, "3991": 50, "3d": [137, 138, 178, 179, 181, 182, 183], "3j": [101, 111], "3rd": 47, "3x4x5": 197, "4": [2, 8, 9, 10, 11, 12, 13, 16, 18, 19, 32, 33, 34, 35, 47, 51, 80, 85, 99, 100, 101, 106, 110, 111, 112, 113, 118, 119, 131, 133, 143, 145, 146, 151, 152, 153, 154, 167, 174, 176, 190, 192, 197, 198, 199], "40": [9, 10, 11, 12, 13, 14, 33, 194], "4001": 33, "401": 149, "4019": 50, "405": [3, 5, 194], "41": [8, 9, 152], "412": [2, 5, 194], "42": [8, 9], "4231": 69, "43": 8, "432": 51, "438": 3, "44": [8, 9, 11], "4400": 174, "443": [4, 5, 194], "45": [2, 8], "4532": 174, "455": [54, 58, 72, 74, 75, 82, 83, 87, 88, 161, 162, 193, 199, 200], "46": 11, "465": 111, "4664": 174, "47": [9, 11], "4730": 174, "475": 70, "475e": 200, "4796": 174, "48": [8, 9], "4816": 33, "4866417762188": 10, "4874": 174, "49": 51, "4928": 174, "499128": 101, "4d": 177, "4j": [146, 153], "5": [2, 3, 4, 8, 9, 10, 11, 12, 13, 16, 18, 19, 30, 32, 33, 34, 47, 51, 54, 55, 56, 72, 76, 81, 88, 90, 93, 98, 100, 101, 106, 107, 110, 111, 112, 113, 118, 119, 122, 133, 143, 145, 146, 147, 149, 154, 155, 167, 170, 174, 176, 190, 191, 192, 195, 197, 198, 199], "50": [13, 51, 110, 112, 118, 190, 198], "500": [11, 54, 58, 72, 74, 75, 82, 83, 87, 88, 110, 151, 161, 162, 193, 199, 200], "5000": 2, "5018": 174, "5044": 198, "5052": [8, 75, 83, 148], "5065": [8, 75, 83, 148], "51": [54, 58, 72, 74, 75, 82, 83, 87, 88, 161, 162, 193, 199, 200], "512": 113, "5162": 174, "5306": 174, "536870910": 133, "54": [8, 51], "54999924": 113, "55": 10, "55000000074505806": 113, "56": [8, 9], "562": 22, "5620499351813308": 31, "57": 8, "573": [18, 20, 194], "575": 14, "58": 8, "587": 194, "59": [8, 131], "5969": 33, "5e": 114, "6": [3, 4, 6, 8, 10, 11, 14, 15, 16, 27, 30, 33, 34, 35, 47, 50, 54, 68, 69, 72, 74, 75, 76, 83, 88, 100, 101, 110, 112, 118, 134, 143, 145, 146, 154, 155, 174, 190, 192, 194, 198, 199], "60": [2, 174, 190], "600": 110, "6176": 33, "617e": 200, "62": 8, "624": [9, 14, 194], "625": 33, "63": [8, 9], "64": [8, 75, 83, 148], "649": [12, 14, 194], "65": 10, "6576": 33, "67": 69, "68": 50, "688": [11, 14, 194], "7": [3, 6, 11, 14, 15, 16, 18, 19, 22, 32, 33, 100, 110, 111, 112, 113, 118, 133, 152, 155, 174, 190, 194, 198, 199, 200], "70": [11, 51, 110, 190], "700": 110, "71": 8, "7185": 33, "72": 8, "74": [8, 51], "746": 20, "746e": 200, "74724069116087": 10, "75": [8, 9, 51, 54, 72, 74, 88], "753": 130, "77": 8, "7755": [9, 10], "7776": 33, "783": 131, "79": [24, 51], "792": [52, 84], "799": [52, 84], "8": [2, 8, 10, 11, 12, 16, 30, 33, 53, 75, 76, 83, 85, 86, 87, 100, 133, 134, 147, 150, 151, 152, 174, 190, 198, 199], "80": [11, 190], "803": 131, "81": 11, "816": 201, "8180": 9, "8210": 9, "8211": 9, "8230": 9, "8231": 9, "8237": 9, "827": 201, "8286": 9, "8336": 9, "835": [7, 14, 194], "85": 9, "87": 8, "8795087": 9, "88": 51, "8801": 33, "8992": 9, "8999999999999999": 152, "8j": 146, "9": [2, 3, 7, 8, 9, 11, 12, 16, 68, 80, 99, 100, 111, 113, 131, 134, 152, 153, 167, 174, 190, 198, 199], "90": 190, "9010": 9, "9011": 9, "9030": 9, "9031": 9, "9057": 9, "9068": 9, "91": 11, "914e": 200, "92": 9, "9233": 9, "94": [8, 11], "95": 9, "96963702154653": 10, "98": [8, 11, 111], "99": 51, "9945618721597652": 11, "999999": 47, "A": [3, 4, 8, 10, 11, 16, 22, 27, 29, 30, 31, 32, 48, 50, 51, 52, 54, 56, 59, 61, 67, 68, 69, 72, 74, 75, 76, 77, 83, 84, 85, 87, 88, 91, 92, 93, 96, 111, 114, 123, 124, 125, 126, 127, 130, 132, 134, 136, 143, 146, 148, 149, 150, 151, 152, 153, 161, 170, 174, 176, 192, 195, 197, 198, 199, 200], "AND": 32, "AS": 10, "And": [28, 195], "As": [8, 9, 10, 12, 13, 23, 200], "At": [31, 48, 146, 153], "But": 133, "By": [2, 12, 34, 35, 112, 113, 118, 133, 151, 197], "For": [0, 2, 3, 11, 12, 22, 23, 24, 29, 31, 33, 40, 47, 48, 51, 101, 103, 111, 113, 122, 134, 143, 146, 152, 153, 154, 155, 162, 163, 164, 176, 192, 195, 197, 198, 199, 200, 201], "If": [8, 11, 12, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 48, 54, 59, 72, 74, 75, 76, 83, 85, 87, 88, 94, 100, 101, 103, 110, 111, 112, 113, 115, 118, 121, 122, 131, 133, 134, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 167, 169, 170, 172, 174, 176, 190, 191, 192, 195], "In": [0, 2, 3, 8, 9, 10, 24, 25, 27, 28, 29, 33, 34, 35, 37, 47, 52, 62, 75, 83, 84, 87, 101, 103, 110, 113, 114, 122, 131, 133, 134, 143, 147, 151, 152, 155, 172, 191, 195, 197, 198, 199, 200], "It": [0, 3, 8, 11, 12, 13, 22, 23, 28, 32, 34, 35, 64, 101, 111, 133, 143, 151, 152, 155, 195, 198], "Its": [27, 58, 82, 147, 193], "NOT": 23, "No": [7, 134, 151], "Not": 32, "Of": 12, "On": [8, 13, 51, 152, 196], "One": [8, 9, 10, 24, 143, 200], "Or": [133, 174], "Such": 200, "That": [30, 76, 128, 130, 133, 200], "The": [0, 8, 9, 10, 11, 12, 13, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 48, 51, 52, 54, 56, 59, 63, 69, 70, 72, 74, 75, 76, 83, 84, 85, 87, 88, 93, 94, 100, 103, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 131, 133, 134, 136, 140, 143, 145, 146, 147, 151, 152, 153, 154, 155, 156, 160, 174, 176, 180, 190, 191, 192, 195, 197, 198, 199, 200], "Then": [12, 23, 28, 87, 114, 131, 161, 162], "There": [9, 10, 13, 29, 64, 146, 195, 197], "These": [119, 197], "To": [2, 3, 8, 10, 11, 23, 28, 29, 30, 76, 112, 118, 123, 124, 125, 126, 127, 131, 132, 151, 172, 176, 195, 197], "With": [0, 27, 32, 34, 35, 112, 113, 118, 133, 155, 198], "_": [8, 10, 11, 30, 56, 76, 93, 151, 154, 195, 199], "_1": [56, 93, 115, 150], "_2": [115, 148, 150], "__array_function__": [33, 103, 122, 191], "__class__": 22, "__dir__": 22, "__getitem__": 22, "__init__": [22, 195], "_backend": 22, "_build": 28, "_cp": 9, "_e": [56, 93], "_f": [10, 11, 141, 151], "_gesv": 147, "_getattr__": 22, "_i": 131, "_j": [56, 93], "_loaded_backend": 22, "_state": 22, "_var": 148, "a1": 47, "a2": 47, "a_": [11, 30, 56, 76, 93, 123, 124, 125, 126, 127], "a_1": 114, "a_2": 114, "a_ax": 174, "a_corr": 11, "a_factor_matrix": 11, "a_i": [30, 76, 123, 124, 125, 126, 127], "a_max": 46, "a_min": 46, "a_n": 114, "a_normalis": 11, "a_sign": 11, "aaaaaaabbbbbbbb": 174, "aaaaaaacccccccc": 174, "aaaaabbbbbb": 174, "aaaaabbbbbbcccccccdddddddd": 174, "aaaaacccccc": 174, "aaaaacccccccbbbbbbdddddddd": 174, "aaaabbbbbbbb": 174, "aaabbbb": 174, "aaabbbbbbb": 174, "aaacccc": 174, "aabbbbbb": 174, "aabbbbccccccdddddddd": 174, "aaron": 0, "ab": [11, 146, 167], "abb": 174, "abbbbb": 174, "abbbcccccddddddd": 174, "abbcccdddd": 174, "abil": 152, "abl": [12, 195], "about": [2, 10, 12, 23, 27, 104, 132, 198], "abov": [9, 13, 24, 30, 76, 100, 113, 123, 124, 125, 126, 127, 133, 134, 146, 153, 198], "abs_rec_error": [52, 54, 72, 74, 75, 83, 84, 85, 88], "absolut": [8, 31, 75, 83, 115], "absolute_valu": 115, "absorb": 62, "academ": 147, "academia": 27, "acc": 174, "acccbbdddd": 174, "acceler": [7, 9, 10, 30, 85, 151], "accept": [12, 30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 170, 193], "access": [0, 195, 197], "accord": [8, 9, 10, 75, 83, 149, 152], "accordingli": 111, "account": 143, "accumul": [113, 133, 155, 161], "accur": [51, 113], "accuraci": [7, 51], "achiev": [2, 119, 176], "acid": 2, "acknowledg": 51, "across": [2, 153], "act": [2, 8], "acta": 70, "activ": [0, 2, 3, 27, 30, 54, 72, 74, 75, 76, 83, 87, 88, 149], "active_set": [10, 87], "actual": [22, 33, 80, 99, 128, 152, 198], "acut": 3, "ad": [0, 23, 32, 33, 34, 35, 47, 59, 103, 111, 112, 113, 118, 119, 122, 133, 134, 147, 151, 152, 154, 155, 176, 191, 192], "adapt": [148, 197, 198], "add": [3, 8, 11, 23, 29, 155, 197], "add_subplot": [4, 7, 18, 19], "addit": [131, 134, 170, 176, 198], "addition": [2, 9, 22, 56, 93, 201], "address": 200, "adher": 23, "adjac": 33, "admm": [8, 29, 75, 83], "advanc": [27, 29, 197], "advantag": [51, 174, 198, 200], "advis": 155, "affect": [2, 33, 36, 131, 156], "affin": [2, 67], "after": [9, 10, 11, 12, 13, 24, 75, 83, 111, 131, 148, 151, 189, 200], "ag": 152, "again": [9, 12], "against": [32, 34, 35, 112, 113, 118, 133, 140, 155, 198], "aggreg": [30, 52, 53, 54, 72, 74, 76, 84, 85, 86, 87, 88], "ago": 28, "aid": 2, "aim": [0, 3], "al": [9, 10, 11, 30, 54, 72, 74, 76, 77, 79, 85, 88, 92, 97, 114, 151], "algebra": [24, 27, 128, 130, 147, 196], "algorithm": [0, 8, 9, 10, 11, 23, 29, 30, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 148, 149, 150, 151, 152, 170, 193, 196], "alia": [48, 134], "align": [56, 93], "all": [0, 10, 15, 23, 24, 27, 28, 29, 30, 36, 51, 53, 54, 55, 58, 62, 64, 65, 66, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 88, 90, 92, 97, 98, 103, 112, 113, 114, 115, 118, 119, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 140, 144, 147, 148, 151, 152, 153, 155, 156, 161, 169, 188, 190, 193, 194, 195, 197, 198], "allclos": [134, 147], "allevi": 113, "alloc": [31, 48, 111, 146, 153], "allow": [0, 2, 3, 22, 29, 30, 33, 51, 54, 72, 74, 76, 77, 79, 81, 88, 92, 97, 98, 103, 111, 112, 118, 122, 131, 191, 195, 197, 201], "alm": [56, 93], "almost": [103, 151, 152, 200], "alon": 151, "along": [11, 32, 34, 35, 47, 55, 90, 100, 112, 113, 118, 123, 124, 133, 134, 152, 154, 155, 170, 174, 178, 182, 199], "alongsid": [3, 170], "alpai": [3, 68], "alpha_": 200, "alpha_1": 200, "alpha_2": 200, "alpha_3": 200, "alphabet": 0, "alreadi": [9, 10, 22, 23, 27, 36, 152, 156, 195], "also": [2, 3, 9, 10, 12, 13, 22, 23, 28, 29, 33, 40, 54, 55, 58, 72, 74, 81, 88, 90, 94, 98, 115, 119, 131, 133, 151, 155, 180, 193, 197, 198, 199, 200, 201], "alter": [2, 3, 68], "altern": [8, 9, 10, 30, 32, 51, 54, 64, 72, 74, 75, 76, 83, 85, 88, 111, 112, 113, 118, 123, 124, 125, 126, 127, 133, 148, 151, 155, 195], "alwai": [8, 23, 134, 143, 155, 197, 199], "amax": [3, 34, 35, 118], "amin": [35, 112], "amino": 2, "amnon": [52, 84], "among": [2, 13, 30, 76, 114], "amount": [2, 3, 8], "amsterdam": [30, 54, 72, 74, 88], "an": [2, 3, 8, 9, 10, 11, 12, 13, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 56, 59, 64, 65, 68, 71, 72, 73, 74, 75, 76, 83, 85, 87, 93, 100, 101, 103, 106, 111, 112, 113, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 172, 174, 176, 186, 190, 191, 192, 195, 198, 199, 200], "anaconda": 28, "analysi": [1, 5, 15, 30, 54, 68, 72, 74, 88, 194], "analytica": 70, "analyz": 2, "anandkumar": [0, 27], "ani": [0, 8, 12, 23, 27, 29, 30, 32, 33, 70, 76, 112, 113, 118, 131, 133, 153, 155, 161, 164, 185, 186, 187, 195], "anima": [0, 27], "anoth": [11, 13, 23, 29, 33, 63, 115, 198], "answer": [28, 134], "antibodi": 3, "antigen": [3, 68], "anyth": 197, "anywher": 27, "ao": [8, 75, 83], "apart": 148, "api": [22, 27, 33, 103, 122, 146, 151, 152, 192, 195, 197], "appear": [9, 10, 24], "append": 111, "appli": [8, 23, 34, 35, 64, 75, 83, 115, 117, 140, 147, 148, 166, 167, 168, 170, 174, 198, 200], "applic": [3, 4, 5, 9, 29, 30, 51, 52, 54, 58, 69, 72, 74, 75, 82, 83, 84, 87, 88, 147, 161, 162, 193, 194, 199, 200], "apply_parafac2_project": 11, "apply_projection_matric": 11, "applyt": 197, "appreci": [9, 10], "approach": [22, 114, 131, 155], "appropri": [34, 35, 131, 198], "approx": 200, "approxim": [9, 10, 50, 51, 54, 72, 74, 85, 87, 88, 131, 140, 149, 150, 151, 170, 197, 200], "aptli": 197, "ar": [2, 3, 8, 9, 10, 11, 12, 13, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 40, 47, 54, 55, 56, 58, 59, 62, 63, 64, 70, 71, 72, 74, 75, 76, 83, 87, 88, 90, 93, 100, 101, 103, 110, 111, 112, 113, 114, 118, 122, 123, 124, 125, 126, 127, 133, 134, 147, 148, 151, 152, 153, 154, 155, 164, 167, 170, 174, 176, 185, 186, 187, 190, 191, 193, 195, 197, 198, 200], "arang": [2, 3, 9, 16, 34, 35, 47, 51, 100, 101, 110, 111, 112, 118, 143, 174, 190, 192, 198, 199], "arbitrari": [33, 101, 111], "arg": 24, "argmax": [11, 35, 112], "argmin": [34, 118], "argmin_": 148, "argmin_x": 148, "argsort": [152, 176], "argument": [3, 23, 31, 33, 47, 48, 59, 101, 103, 111, 112, 113, 118, 122, 143, 146, 152, 153, 154, 170, 174, 176, 190, 191], "arithmet": [113, 133, 155], "around": 27, "arr": 59, "arrai": [3, 10, 11, 13, 16, 30, 31, 32, 33, 34, 35, 42, 44, 47, 48, 51, 54, 55, 56, 58, 59, 60, 71, 72, 74, 75, 76, 83, 85, 87, 88, 90, 93, 100, 101, 103, 106, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 135, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 151, 152, 153, 154, 155, 161, 163, 167, 170, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 197, 198, 199], "array_lik": [31, 32, 33, 34, 35, 47, 48, 59, 100, 101, 103, 110, 111, 112, 113, 118, 122, 133, 134, 143, 145, 146, 147, 152, 153, 154, 155, 174, 176, 190, 191, 192], "array_split": 47, "arthur": 152, "articl": [3, 9, 10, 27], "arxiv": [51, 79, 97], "asarrai": 190, "aspect": 23, "assembl": [47, 154, 177, 181], "assert": 23, "assert_array_equ": 16, "assert_class_wrapper_correctly_passes_argu": 23, "assess": [114, 197], "assign": [13, 25, 63], "associ": [140, 141, 142, 195], "assum": [8, 110, 164, 195], "astyp": 4, "athanasio": [8, 75, 83, 148], "atleast_2d": 176, "attempt": [2, 101, 113, 198], "attribut": [134, 140, 192], "atyeo": [3, 68], "augustijn": 30, "author": 27, "auto": [3, 128, 130], "auto_exampl": [5, 14, 20, 21], "auto_examples_jupyt": 15, "auto_examples_python": 15, "autoimmun": 2, "automat": [23, 24, 29, 128, 130, 152, 198], "auxilliari": [8, 75, 83], "avail": [2, 9, 10, 23, 32, 69, 134, 152, 200, 201], "averag": [11, 113, 152, 155], "avg": 114, "avg_scor": 114, "aviri": 69, "avoid": [9, 11, 143, 150, 151, 198], "await": 134, "awar": 198, "ax": [2, 3, 4, 7, 11, 13, 18, 19, 32, 34, 35, 101, 111, 112, 113, 118, 119, 133, 134, 147, 148, 155, 174, 176], "ax_": 148, "axi": [3, 11, 32, 34, 35, 47, 101, 111, 112, 113, 116, 117, 118, 121, 133, 143, 152, 154, 155, 174, 176, 199], "b": [9, 10, 11, 30, 31, 34, 35, 47, 54, 58, 59, 61, 67, 72, 74, 75, 76, 82, 83, 87, 88, 101, 110, 111, 112, 118, 123, 124, 125, 126, 127, 132, 134, 147, 154, 161, 162, 174, 193, 199, 200], "b_": [11, 30, 76, 123, 124, 125, 126, 127], "b_ax": 174, "b_corr": 11, "b_factor_matric": 11, "b_factor_matrix": 11, "b_i": [11, 12, 30, 76, 123, 124, 125, 126, 127, 131, 132], "b_normalis": 11, "back": [4, 44, 131, 143, 195, 199], "backend": [0, 25, 27, 36, 105, 128, 129, 130, 144, 156, 158, 167, 169, 188, 189, 196], "backend_context": [22, 29], "backtick": 24, "backward": [134, 143, 152], "bader": [54, 58, 72, 74, 75, 82, 83, 87, 88, 161, 162, 193, 199, 200], "ballard": [77, 92], "band": [8, 69, 75, 83, 148], "bar": 2, "base": [8, 9, 18, 19, 22, 23, 24, 51, 59, 192, 199, 200], "baselin": 12, "basi": 131, "basic": [15, 21, 167, 194, 196, 197], "batch": 171, "batched_mod": 171, "battaglino": [77, 92], "baumgardn": 69, "bbbbbbbdddddddd": 174, "bbbbbdddddd": 174, "bbbdddd": 174, "bdd": 174, "beat": 172, "becaus": [12, 23, 30, 32, 33, 134, 197, 198], "beck": 150, "becom": [23, 36, 64, 87, 149, 151, 155, 156], "been": [0, 2, 4, 22, 36, 152, 156, 166, 167, 168, 198], "befor": [9, 12, 13, 23, 24, 32, 37, 47, 112, 113, 115, 118, 133, 152, 155, 198, 200], "begin": [12, 24, 38, 39, 40, 41, 56, 93, 149, 151, 199], "behav": [9, 190], "behavior": [3, 32, 111, 112, 118], "behaviour": [23, 33, 152], "behind": 23, "being": [22, 33, 151, 152, 172, 198], "below": [12, 24, 30, 33, 100, 113, 114], "berg": [11, 30, 76], "besid": [10, 51], "best": [11, 91, 96, 134, 147, 152, 155], "best_err": 11, "best_factor": [91, 96], "better": [9, 10, 23, 29, 33, 128, 130, 152, 155, 198, 199], "between": [2, 3, 9, 10, 12, 22, 33, 85, 87, 114, 115, 116, 117, 140, 147, 151, 160, 171, 172], "bia": 2, "bibtex": 27, "biehl": 69, "big": 114, "bigodot": 161, "bigoni": 51, "bimj": 131, "bind": [2, 3], "biologi": [3, 68], "biomed": 3, "biometr": 131, "biorxiv": 67, "bit": 133, "bival": [2, 67], "bla": [101, 111], "black": 23, "block": [24, 29, 47, 110, 151, 154], "blueprint": 11, "bo": 3, "bodi": 51, "bond": 180, "booksh": 70, "bool": [8, 30, 32, 34, 35, 36, 40, 50, 54, 56, 57, 59, 72, 73, 74, 75, 76, 78, 82, 83, 88, 89, 91, 92, 93, 94, 95, 96, 112, 113, 115, 118, 133, 135, 136, 137, 138, 139, 140, 143, 144, 148, 150, 152, 155, 156, 162, 163, 164, 169, 170, 180, 185, 186, 187, 190, 192], "boolean": [8, 32, 53, 54, 55, 56, 58, 72, 74, 79, 80, 81, 82, 85, 86, 87, 88, 90, 93, 97, 98, 99, 151, 170, 193, 198], "both": [2, 3, 7, 8, 9, 10, 12, 23, 27, 30, 67, 76, 101, 111, 134, 143, 152, 174, 190, 198, 200, 201], "bottleneck": 12, "bound": [8, 75, 83, 148, 151], "boundari": [50, 80, 99, 137, 138, 180], "branch": 153, "break": [28, 152], "bring": 3, "bro": [11, 30, 54, 70, 72, 74, 76, 88, 140, 149], "broadcast": [31, 32, 34, 35, 48, 64, 111, 112, 113, 118, 133, 146, 147, 153, 155, 190], "broken": 23, "bs_normalis": 11, "bsd": 27, "buffer": [112, 118], "bug": 23, "build": [28, 114], "built": [0, 24, 33], "bunch": 69, "bx": 148, "bx_": 148, "c": [3, 9, 10, 11, 28, 30, 59, 67, 68, 69, 76, 101, 103, 110, 111, 122, 123, 124, 125, 126, 127, 143, 148, 174, 190, 191, 192], "c4": 69, "c_": [11, 30, 76, 123, 124, 125, 126, 127], "c_corr": 11, "c_factor_matrix": 11, "c_normalis": 11, "cach": [22, 29, 128, 130], "caglayan": 0, "calcul": [3, 7, 9, 10, 11, 31, 87, 131, 133, 140, 153], "calibr": 140, "call": [8, 9, 10, 13, 22, 23, 24, 29, 33, 34, 35, 60, 75, 83, 111, 114, 134, 151, 163, 184, 189, 190, 195, 197, 199, 200], "callabl": [151, 170], "callback": [54, 72, 77, 88, 92, 151], "can": [1, 2, 3, 8, 9, 10, 11, 12, 13, 15, 22, 23, 24, 28, 29, 31, 32, 33, 61, 62, 66, 69, 70, 110, 111, 112, 113, 128, 130, 131, 133, 134, 143, 148, 151, 152, 155, 161, 172, 174, 187, 190, 195, 197, 198, 199, 200, 201], "cancer": 2, "candecomp": [29, 54, 72, 74, 75, 83, 88, 196], "cannot": [11, 12, 23, 30, 47, 52, 54, 72, 74, 75, 76, 83, 84, 88, 131, 143, 154], "canon": 200, "captur": 3, "care": [33, 198], "carlson": 67, "case": [3, 9, 10, 12, 29, 32, 33, 34, 35, 47, 62, 103, 110, 122, 131, 133, 134, 143, 152, 155, 164, 172, 174, 185, 186, 187, 190, 191, 196, 197, 198, 200], "casei": [77, 92], "cast": [31, 33, 47, 48, 111, 113, 133, 146, 153, 154, 155], "cat": 151, "catecholamin": 70, "caus": [2, 3, 113, 155, 198], "caveat": 198, "cax": 3, "cc": 3, "cccccccdddddddd": 174, "cccccdddddd": 174, "ccccdddddddd": 174, "cccdddd": 174, "cccddddddd": 174, "ccdddddd": 174, "ccwintco": 69, "cd": 28, "cd8": 2, "cdd": 174, "cddddd": 174, "cdot": [56, 93, 161, 162, 164, 174, 199, 200, 201], "cdoubl": 134, "ceil": [4, 33], "cell": [2, 3, 67, 68], "cell_fac": 2, "cell_rects_comp1": 2, "cell_rects_comp2": 2, "cell_rects_comp3": 2, "cellular": 2, "center": [11, 131], "certain": 22, "chain": [60, 101, 163, 184], "chang": [8, 23, 29, 30, 32, 48, 59, 76, 143, 144, 146, 147, 148, 152, 169, 180, 188, 189, 196, 197], "channel": 28, "character": 152, "characteris": 195, "check": [0, 11, 23, 29, 32, 147], "check_random_st": [12, 18, 19], "chemometr": [11, 30, 54, 72, 74, 76, 88, 140, 149], "chimica": 70, "choi": [53, 86], "choos": [8, 9, 11, 51, 152, 190, 198], "chose": [9, 10], "chosen": [8, 152, 190], "circl": [18, 19], "cite": [27, 70], "class": [9, 24, 25, 27, 32, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 103, 106, 112, 113, 118, 133, 140, 141, 142, 144, 155, 169, 192], "classic": [199, 200], "classif": 69, "clear": [3, 59], "clip": [22, 75, 83, 148], "close": [59, 192], "closer": 9, "closest": [115, 151], "cm": [3, 18, 19], "cmap": [3, 18, 19, 31], "cmtffac": 3, "cmtfr2x": 3, "cn": 195, "coars": 9, "code": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 27, 29, 51, 151, 195, 197], "coef_": 140, "coeffici": [8, 9, 11, 85, 87, 115, 140, 147, 151, 200], "cohen": 0, "col": 131, "col_order_1": 13, "col_order_2": 13, "collabor": 70, "collect": [3, 67], "colon": 24, "colorbar": 3, "column": [8, 13, 47, 51, 57, 62, 63, 64, 65, 66, 73, 75, 78, 83, 85, 89, 94, 95, 103, 114, 115, 122, 131, 134, 147, 148, 151, 161, 176, 191], "column_stack": 47, "columnwis": [8, 87], "com": [3, 28, 70], "combin": [0, 23, 29, 195, 197, 200], "come": [24, 28, 152], "comment": 24, "common": [22, 110, 134, 146, 153, 174, 197], "commun": [0, 200], "comp": 3, "compact": 3, "compactli": 200, "compani": [2, 27], "compar": [9, 10, 12, 13, 63, 112, 114, 118, 140, 152, 172], "comparison": [2, 7, 112, 118], "compat": [22, 25, 28, 33, 103, 122, 134, 143, 152, 191], "complet": [4, 29, 134, 197], "complex": [10, 30, 31, 48, 101, 111, 134, 146, 152, 153, 163, 164], "complexifi": 195, "compon": [2, 13, 30, 52, 54, 56, 57, 63, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 88, 89, 91, 92, 93, 95, 96, 131, 135, 139, 140, 174], "componentwis": 151, "composit": [110, 155], "comprehens": 3, "compress": [1, 5, 6, 14, 15, 131, 132, 194], "compression_threshold": 131, "compromis": [3, 68], "comput": [9, 10, 12, 23, 29, 30, 52, 53, 54, 55, 58, 64, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 97, 98, 99, 110, 112, 113, 114, 115, 118, 121, 123, 124, 125, 126, 127, 131, 134, 147, 148, 149, 150, 151, 159, 170, 174, 178, 182, 193, 195, 200], "concaten": [114, 154], "concentr": [2, 67], "conclus": [9, 10], "condit": [30, 31, 48, 50, 76, 80, 99, 101, 137, 138, 146, 153, 190], "confer": [52, 53, 84, 86, 131, 151], "congruenc": [11, 115], "congruence_coeffici": 11, "conjug": [48, 101, 111, 163, 164], "connect": 200, "consequ": 30, "conserv": 114, "consid": [27, 30, 54, 72, 74, 75, 76, 83, 88, 140], "consider": 12, "consist": [11, 24, 32, 152, 153, 174, 199], "constant": [30, 62, 76, 123, 124, 125, 126, 127, 136, 141, 148, 150, 151], "constrain": [6, 14, 15, 29, 30, 69, 75, 76, 83, 131, 148, 149, 194], "constrained_parafac": 8, "constraint": [9, 10, 11, 30, 75, 76, 83, 85, 123, 124, 125, 126, 127, 131, 148], "construct": [11, 12, 100, 125, 126, 127, 198], "consum": 12, "consumpt": 152, "contact": 23, "contain": [2, 29, 30, 31, 50, 52, 54, 57, 67, 72, 73, 74, 76, 78, 84, 85, 88, 89, 94, 95, 113, 123, 124, 125, 126, 127, 131, 134, 152, 153, 170, 174, 176, 197, 198], "content": 24, "context": [22, 25, 36, 135, 136, 137, 138, 139, 156, 196], "contigu": [59, 101, 143, 152, 192], "continu": [153, 174], "contract": [29, 128, 130, 171, 174], "contrast": [51, 155], "contrib": [197, 198, 200], "contribut": [0, 25, 27], "contributor": 0, "control": [47, 59, 151, 154], "conveni": [4, 22, 23, 29, 106, 128, 130], "convent": [101, 111, 153], "converg": [7, 9, 10, 30, 51, 56, 76, 93, 140, 141, 142, 150, 151], "convers": [2, 113], "convert": [4, 24, 29, 32, 34, 35, 66, 170, 176, 185, 186, 187], "convex": [8, 148], "coo": 198, "cool": 23, "coord": 198, "coordin": 151, "copi": [9, 60, 100, 143, 152, 184], "core": [4, 10, 22, 27, 51, 53, 55, 58, 60, 61, 82, 86, 87, 90, 128, 130, 139, 142, 177, 181, 184, 185, 186, 187, 193, 197, 200], "core_i": 87, "core_j": 87, "core_sparsity_coeffici": 87, "core_tenalg": 172, "corecross": 87, "corecross_j": 87, "corr": 11, "correct": [11, 22, 23, 33, 47, 116, 117, 147, 154, 195], "correctli": [32, 34, 35, 112, 113, 118, 133, 155, 190], "correl": 2, "correspond": [8, 22, 34, 35, 47, 57, 73, 78, 89, 95, 112, 118, 145, 151, 161, 174, 176, 177, 181, 197, 201], "corrindex": 114, "cosin": [13, 63, 115], "cost": [8, 85, 87, 151], "costli": 151, "could": [2, 8, 9, 10, 12, 29, 69], "count": [32, 133, 155], "coupl": 140, "courtesi": 70, "cov": [3, 68], "covari": 140, "cover": [24, 152, 190], "covid": [1, 5, 15, 68, 194], "cp": [1, 4, 5, 6, 7, 11, 12, 14, 15, 17, 20, 23, 30, 52, 53, 54, 57, 60, 61, 63, 67, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 92, 95, 135, 140, 141, 172, 194, 196, 197, 201], "cp_copi": 13, "cp_init": 9, "cp_multi_mode_dot": 60, "cp_normal": 2, "cp_permute_factor": 13, "cp_rank": 4, "cp_reconstruct": 4, "cp_reconstruction_exact_h": 9, "cp_reconstruction_h": 9, "cp_reconstruction_mu": 9, "cp_regress": 18, "cp_tensor": [2, 9, 13, 172, 195, 197, 198], "cp_tensor_1": 13, "cp_tensor_2": 13, "cp_tensor_3": 13, "cp_to_tensor": [3, 4, 7, 9, 54, 61, 72, 74, 88, 198, 200], "cpregress": 201, "cpregressor": 18, "cptensor": [9, 30, 54, 60, 61, 62, 64, 65, 66, 72, 73, 74, 75, 76, 83, 88], "cpu": [0, 29, 33, 103, 122, 192, 196], "cpython": 152, "craft": 197, "crafter": 197, "creat": [0, 18, 19, 23, 24, 29, 30, 31, 33, 48, 59, 76, 80, 94, 99, 100, 103, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 146, 152, 153, 192, 195, 196, 197, 198, 200], "create_random_data": 12, "creation": [33, 103, 122, 191, 195], "criterion": [54, 72, 74, 75, 83, 85, 88, 149, 150, 151], "cross": [30, 51, 76, 123, 124, 125, 126, 127, 197, 200], "crucial": [3, 29], "crutial": 24, "cuda": 195, "cum_prod": 161, "cumsum": 155, "cumul": 155, "cupi": [0, 23, 27, 29, 36, 156, 195, 197], "cuquantum": 128, "current": [22, 29, 54, 72, 74, 75, 83, 85, 88, 105, 129, 134, 151, 152, 158, 195, 197, 198], "curv": 153, "custom": [22, 191], "cut": 153, "cvg_criterion": [52, 54, 72, 74, 75, 83, 84, 85, 88], "cvpr": [53, 86], "cyclic": 11, "cytokin": 67, "cytotox": 2, "d": [3, 8, 30, 47, 56, 57, 68, 69, 73, 75, 78, 83, 89, 93, 95, 100, 101, 103, 110, 111, 143, 145, 148, 155, 170, 174, 176, 178, 179, 182, 183, 190, 200], "d1": 159, "daniel": [51, 130], "dask": 22, "data": [1, 3, 5, 9, 10, 11, 15, 18, 19, 29, 33, 47, 50, 56, 59, 69, 70, 93, 103, 104, 112, 113, 118, 122, 131, 132, 133, 134, 140, 141, 142, 143, 151, 152, 154, 173, 191, 192, 194, 197, 198, 201], "data_import": 3, "data_tensor": 50, "dataset": [1, 2, 4, 5, 11, 12, 15, 18, 19, 131, 194, 196], "datatyp": 152, "de": 149, "deal": 172, "decid": 195, "decim": 200, "decis": 198, "decomp": 195, "decompos": [2, 9, 10, 11, 51, 55, 56, 57, 58, 72, 73, 74, 75, 76, 79, 80, 81, 82, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 135, 136, 137, 138, 139, 193, 195, 197, 198, 200], "decomposit": [1, 5, 7, 11, 12, 14, 23, 27, 67, 68, 69, 114, 123, 124, 125, 126, 127, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 148, 161, 162, 177, 181, 186, 187, 194, 195, 196, 198, 199, 201], "decompress": [12, 131, 132], "decreas": [2, 8, 30, 75, 76, 77, 83, 92, 148, 150], "deduc": [18, 19], "deep": [0, 27, 195, 197], "deepcopi": 9, "def": [3, 4, 9, 10, 12, 23, 24, 187, 195], "default": [9, 10, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 112, 113, 114, 118, 122, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 169, 170, 172, 174, 176, 180, 185, 186, 187, 191, 192, 193, 195, 197], "default_backend": 195, "default_rng": [134, 154], "defin": [8, 22, 30, 33, 75, 76, 83, 87, 103, 115, 122, 148, 151, 152, 179, 183, 191, 192, 199], "definit": 146, "deflat": [91, 96], "delta": [87, 151], "demograph": 3, "demonstr": [6, 14, 15, 67, 194, 200], "denot": [54, 72, 74, 88, 199], "dens": [131, 198], "dense_cp": 198, "densifi": 198, "deok": [53, 86], "depend": [2, 8, 27, 100, 111, 113, 134, 147, 152, 155, 190, 195, 197, 198], "deprec": [4, 134, 143], "deprecationwarn": 4, "depth": [3, 47], "descent": 151, "describ": [30, 123, 124, 125, 126, 127, 132], "descript": [24, 47, 197], "descriptor": 22, "design": 2, "desir": [2, 54, 65, 72, 74, 88, 113, 122, 191, 195], "destin": [47, 119, 154], "detail": [3, 24, 32, 100, 112, 113, 118, 133, 147, 152, 155, 161, 162, 200, 201], "determin": [3, 24, 112, 118, 134, 147, 152], "develop": [3, 23, 27, 28, 195], "devic": [0, 29, 33, 103, 122, 192, 195], "dgeqrf": 134, "diag": [30, 76, 103, 123, 124, 125, 126, 127], "diagflat": 100, "diagon": [30, 76, 100, 103, 123, 124, 125, 126, 127, 200], "dict": [135, 137, 138, 195], "dictat": [80, 99], "dictionari": [8, 22, 75, 83, 140, 141, 142, 148, 195], "did": 32, "didn": 12, "differ": [2, 3, 9, 10, 11, 29, 30, 59, 67, 76, 111, 112, 146, 151, 152, 153, 195, 199], "difficult": 11, "dim": [2, 3], "dimens": [2, 32, 33, 34, 35, 38, 39, 40, 41, 47, 51, 71, 101, 110, 111, 112, 113, 114, 118, 119, 133, 134, 139, 140, 142, 143, 145, 154, 155, 172, 174, 176, 180, 192, 199, 200, 201], "dimension": [2, 3, 29, 34, 35, 122, 133, 134, 147, 191, 195, 199, 200], "direct": [3, 8, 9, 10, 11, 30, 75, 76, 83, 140, 148], "directli": [23, 28, 29, 51, 54, 88, 94, 155, 161, 190], "disadvantag": 51, "discov": 27, "discrep": 12, "diseas": 2, "dispatch": [25, 29, 128, 130, 170, 188, 189, 196, 197], "displai": 24, "dissert": 30, "distanc": [13, 33, 63], "distinct": [3, 198], "distinguish": 3, "distrbut": [75, 83, 148], "distribiut": 28, "divid": [75, 83, 113, 148], "divis": [150, 151], "dn": 159, "do": [2, 3, 23, 24, 196], "doc": [28, 31, 48, 111, 146, 153, 195], "docstr": [22, 23, 25], "document": [12, 23, 25, 27, 100, 147, 190, 195], "docurl": 195, "doe": [8, 11, 32, 33, 111, 112, 113, 118, 133, 134, 152, 155, 176, 198], "doesn": [23, 51], "doi": [3, 69, 114, 131], "dolgov": 51, "domain": 2, "domin": 11, "don": [23, 112, 118], "done": [22, 28, 170, 195, 199], "dorgqr": 134, "dose": [2, 67], "dot": [18, 19, 65, 111, 134, 147, 172, 174, 187, 197], "doubl": [24, 134, 174], "down": 23, "download": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 69, 70], "dpar": 131, "dpar2": 131, "drug": 2, "dsplit": 47, "dstack": 47, "dtype": [4, 9, 10, 29, 31, 32, 33, 34, 35, 47, 48, 59, 101, 102, 103, 104, 111, 112, 113, 118, 122, 133, 145, 146, 152, 153, 154, 155, 173, 174, 191, 192, 195, 198], "dual": [8, 148], "dual_var": 148, "due": [33, 52, 54, 72, 74, 75, 83, 84, 88, 172, 200], "dure": [75, 83, 140, 188, 195], "dynam": [2, 22, 188, 189, 195, 197], "e": [10, 22, 23, 28, 29, 32, 56, 59, 62, 64, 66, 67, 75, 80, 83, 91, 93, 94, 96, 99, 106, 114, 122, 131, 147, 151, 160, 161, 176, 186, 191, 195, 197, 198], "e10243": [3, 68], "e741": 12, "e_i": 12, "each": [2, 3, 9, 10, 11, 12, 13, 23, 29, 30, 31, 40, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 67, 72, 73, 74, 75, 76, 78, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 114, 115, 119, 131, 136, 139, 140, 141, 142, 148, 151, 153, 154, 155, 161, 164, 193, 200, 201], "each_iter": [9, 10], "earli": [149, 151], "earlier": [134, 197], "easi": [0, 16, 27, 195], "easier": 2, "easiest": 23, "easili": [27, 29, 128, 130, 195, 197, 200], "econom": 134, "ed": 147, "edg": 200, "edit": 28, "edu": [9, 10], "effect": [2, 12, 54, 72, 74, 88], "effector": 2, "effici": [8, 29, 75, 83, 148, 172], "eggert": 151, "ehu": 69, "eigen": 170, "eigenv": [91, 96], "eigenvalu": [57, 62, 73, 78, 89, 91, 95, 96], "eigenvector": [57, 73, 78, 89, 91, 95, 96], "eight": 67, "einstein": [101, 111], "einsum": [11, 29, 101, 111, 128, 129, 130, 161, 174, 197], "either": [2, 3, 8, 23, 30, 75, 83, 101, 111, 134, 147, 195, 197], "element": [11, 24, 30, 31, 32, 33, 34, 35, 48, 52, 53, 54, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 92, 103, 110, 111, 112, 113, 118, 123, 124, 125, 126, 127, 133, 136, 143, 145, 146, 152, 153, 155, 167, 174, 190, 193, 199], "elementwis": 8, "els": [3, 54, 55, 56, 58, 72, 74, 88, 90, 93, 146, 170, 190, 193], "elsewher": [31, 48, 103, 146, 153, 190], "emath": 153, "emb": 24, "embopress": 3, "emmel": 67, "empti": [112, 118, 122, 133, 155, 191, 192], "empty_lik": [7, 192], "emsp": 27, "en": [134, 195], "enabl": [22, 27, 29, 188], "enact": 2, "encount": [9, 10], "end": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 33, 38, 39, 40, 41, 51, 56, 93, 149, 151, 152, 195, 199], "endpoint": 33, "engin": [0, 2, 131], "enhanc": [67, 151], "enough": [8, 111, 152], "ensur": [3, 22, 23, 33, 103, 122, 150, 151, 152, 191], "entir": [11, 36, 156], "entri": [8, 9, 10, 30, 51, 76, 123, 124, 125, 126, 127, 151, 200], "enumer": [7, 12, 18, 19], "environ": 198, "eponym": 45, "epsilon": [30, 76, 102, 150, 151], "equal": [12, 13, 30, 31, 32, 47, 48, 63, 76, 103, 123, 124, 125, 126, 127, 134, 146, 147, 152, 153, 154], "equat": [56, 93, 134, 147, 149, 151], "equiv": [47, 154], "equival": [12, 28, 32, 33, 59, 64, 101, 103, 107, 132, 133, 143, 145, 146, 147, 155, 174, 176, 187, 190, 200], "err": [7, 11, 12], "err_0": 151, "err_k": 151, "err_l": 7, "err_min": 7, "error": [7, 9, 10, 11, 12, 29, 30, 50, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 111, 116, 117, 133, 150, 151, 155, 193, 195, 197], "error_a": 10, "error_fista": 10, "error_mu": 10, "errors_exact": 9, "errors_h": 9, "errors_mu": 9, "errs_compress": 12, "errs_compressed_lossi": 12, "errs_ful": 12, "especi": [23, 113, 155, 195], "essenti": [12, 23, 131], "est_a": 11, "est_a_normalis": 11, "est_b": 11, "est_bs_normalis": 11, "est_c": 11, "est_c_normalis": 11, "est_projected_b": 11, "est_tensor": 11, "est_weight": 11, "estim": [11, 18, 19, 91, 96, 116, 117, 131, 149, 151, 201], "et": [11, 79, 97, 114], "etc": [22, 23, 29, 152, 195, 197], "eu": 69, "euclidean": [62, 151], "eugen": 51, "evalu": [3, 11, 32, 51], "even": [12, 23, 29, 133, 152, 198], "evenli": 33, "eventu": 3, "everi": [23, 155, 161, 162], "everyth": 195, "everytim": 24, "everywher": [54, 55, 56, 58, 72, 74, 88, 90, 93, 170, 193, 200], "evolut": [3, 13, 68], "evolv": [29, 30, 76, 123, 124, 125, 126, 127], "exact": [74, 85, 87, 101, 147, 151, 155], "exactli": [147, 195, 200], "examin": 3, "exampl": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 27, 31, 32, 33, 34, 35, 36, 47, 48, 51, 59, 68, 100, 101, 103, 106, 110, 111, 112, 113, 118, 119, 122, 128, 130, 133, 134, 143, 145, 146, 147, 152, 153, 154, 155, 156, 167, 174, 176, 190, 191, 192, 194, 196, 199], "exce": [12, 131], "except": [23, 32, 33, 47, 71, 101, 103, 112, 113, 118, 133, 134, 140, 152, 155, 200], "exclud": 33, "exclus": [55, 90], "execut": [5, 14, 20, 21, 22, 24, 27, 29, 67, 194, 195, 197], "exis": 23, "exist": [23, 47, 152, 154], "expand_dim": [34, 35], "expect": [9, 10, 11, 13, 23, 24, 32, 47, 112, 113, 118, 133, 155], "experi": [10, 18, 19, 28], "experiment": [2, 196], "expert": [9, 10], "explain": [3, 11], "explan": [24, 134, 201], "explicit": [197, 198], "explicitli": [36, 110, 156, 172], "exploit": 65, "expos": [134, 151], "express": [23, 30, 76, 123, 124, 125, 126, 127, 130, 199, 200], "extend": [110, 152, 174], "extens": 27, "extent": 31, "extra": 113, "extract": [11, 100], "extrem": [3, 172], "ey": [48, 110, 145], "f": [2, 3, 9, 10, 11, 12, 13, 16, 18, 19, 30, 59, 69, 76, 85, 103, 122, 143, 148, 151, 191, 192, 200], "f8": 152, "fac": [3, 7], "fac_l": 7, "face": 4, "fact": [8, 9, 23, 61, 65], "factor": [2, 3, 4, 6, 8, 9, 10, 11, 14, 15, 30, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 114, 123, 124, 125, 126, 127, 132, 134, 135, 137, 138, 139, 140, 141, 148, 151, 161, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 197, 198, 200], "factor_aux": [75, 83], "factor_list": 180, "factor_matric": [64, 65], "factors_1": 114, "factors_2": 114, "factors_init": 9, "fail": [23, 134, 153], "fair": 9, "fals": [7, 30, 31, 32, 36, 40, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 112, 113, 118, 133, 135, 136, 137, 138, 139, 140, 143, 144, 146, 150, 151, 152, 153, 155, 156, 162, 163, 164, 169, 170, 180, 184, 185, 186, 187, 190, 193, 198], "familiar": 197, "farm": 22, "fast": [10, 27, 51, 131, 149, 150, 155], "faster": [9, 10, 51, 112, 118], "fastest": 143, "favor": 8, "favourit": [128, 130], "fc": [3, 67], "feasibl": 51, "featur": [101, 151, 196, 200], "fetch": 143, "few": [2, 8, 9], "fiber": 51, "field": 152, "fig": [4, 7, 8, 9, 10, 11, 13, 18, 19], "fig1": 3, "fig2": 3, "figsiz": [2, 3, 11], "figur": [3, 4, 7, 8, 9, 10, 11, 18, 19], "file": [5, 14, 20, 21, 24, 194], "fill": [54, 55, 58, 72, 74, 88, 90, 107, 122, 191, 192, 193], "fill_valu": [47, 198], "final": [2, 11, 12, 23, 64, 131, 199], "find": [3, 8, 11, 13, 51, 115, 128, 152, 201], "finer": 152, "finit": [2, 8], "first": [0, 2, 3, 8, 9, 10, 11, 12, 23, 28, 29, 30, 32, 34, 35, 39, 40, 47, 51, 64, 76, 79, 80, 97, 99, 101, 110, 111, 112, 114, 118, 123, 124, 133, 134, 140, 143, 150, 152, 154, 155, 160, 174, 195, 199, 200, 201], "fisching": [3, 68], "fista": 87, "fit": [18, 19, 23, 30, 76, 77, 92, 131, 132, 140, 141, 142, 151, 195, 197, 201], "fit_transform": [7, 72, 73, 74, 75, 76, 140, 195], "five": 12, "fix": [23, 29, 52, 54, 58, 62, 64, 65, 66, 72, 74, 75, 82, 83, 84, 85, 88, 193, 199], "fixed_factor": [58, 82, 193], "fixed_mod": [52, 54, 72, 74, 75, 83, 84, 85, 87, 88], "fl": 147, "flag": [59, 151], "flat": [34, 35], "flatten": [8, 34, 35, 40, 47, 100, 112, 113, 118, 152], "flexibl": [0, 8, 27, 75, 83, 101, 148], "flip": 11, "flip_sign": 170, "float": [4, 10, 12, 30, 32, 33, 51, 52, 54, 55, 56, 58, 71, 72, 74, 75, 76, 77, 80, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 99, 102, 103, 104, 112, 113, 114, 115, 116, 117, 118, 121, 131, 134, 140, 141, 142, 148, 149, 150, 151, 152, 155, 160, 167, 168, 191, 192, 193, 198], "float16": 113, "float32": [9, 29, 113, 155, 195], "float64": [4, 22, 29, 112, 113, 118, 122, 155, 191, 198], "floattensor": 195, "fluoresc": 70, "fmax": [112, 118], "fmin": [112, 118], "fold": [16, 22, 38, 44, 196, 197], "folded_tensor": 37, "follow": [2, 8, 9, 10, 11, 24, 29, 87, 111, 134, 146, 148, 149, 150, 151, 152, 174, 198], "fontsiz": [2, 11], "food": [30, 54, 72, 74, 88], "forc": 59, "form": [11, 30, 76, 123, 124, 125, 126, 127, 131, 172, 196, 197], "format": [2, 23, 24, 29, 67, 68, 80, 99, 138, 177, 178, 179, 181, 182, 183, 197], "formost": 0, "formul": [30, 76, 123, 124, 125, 126, 127], "forth": 174, "fortran": [59, 103, 122, 134, 143, 191, 192], "forward": [9, 10, 13, 23, 152], "found": [3, 11, 54, 72, 74, 75, 83, 88, 131], "four": [67, 152], "frac": [11, 115, 150], "fraction": [54, 72, 74, 88], "framework": [0, 8, 27, 75, 83, 148, 197], "free": 28, "freshli": [31, 48, 111, 146, 153], "friendli": 27, "from": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 35, 47, 50, 51, 59, 62, 69, 76, 94, 103, 110, 111, 114, 123, 124, 125, 126, 127, 128, 130, 132, 133, 140, 143, 146, 148, 153, 154, 155, 167, 172, 178, 182, 190, 194, 195, 197, 198, 199, 200, 201], "frontal": [11, 30, 76, 123, 124, 125, 126, 127, 199], "fsum": 155, "ful": 44, "full": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 38, 41, 50, 64, 94, 122, 123, 124, 125, 126, 127, 134, 135, 136, 137, 138, 139, 147, 177, 178, 181, 182, 185, 191, 195, 197, 199, 200], "full_lik": 192, "full_tensor": 50, "fulli": [197, 200], "func": 24, "function": [3, 4, 8, 9, 10, 11, 13, 23, 25, 27, 30, 31, 33, 45, 47, 52, 54, 55, 58, 59, 68, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 100, 103, 110, 111, 112, 118, 124, 131, 134, 146, 147, 148, 149, 151, 153, 155, 170, 188, 189, 190, 193, 196, 197, 198, 199, 200], "fund": 0, "further": 12, "furthermor": 2, "fusion": 67, "futur": [2, 3, 23, 28, 29], "g": [3, 10, 22, 23, 29, 32, 54, 58, 64, 68, 72, 74, 75, 77, 80, 82, 83, 87, 88, 92, 99, 106, 122, 130, 147, 148, 151, 161, 162, 176, 191, 193, 195, 197, 199, 200], "g_": 10, "g_1": 200, "g_2": 200, "g_3": 200, "g_d": 200, "gain": 9, "galahad": 152, "galleri": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 24, 194], "gap": 9, "gaussian": 8, "gb": 198, "gca": 3, "gen_imag": [18, 19], "gener": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 23, 24, 28, 29, 33, 51, 71, 94, 123, 124, 134, 135, 136, 137, 138, 139, 146, 152, 155, 157, 165, 197, 198], "generalis": [160, 200], "geq": 10, "get": [7, 11, 12, 23, 27, 102, 104, 131, 132, 195, 197], "get_backend": [22, 23], "get_figheight": [9, 10, 13], "get_legend_handles_label": 11, "get_param": [140, 141, 142], "get_xtick": 11, "get_xticklabel": 2, "gilli": [9, 10, 85, 151], "giorgio": [54, 72, 74, 88], "git": 28, "github": [0, 23, 27], "gitter": 23, "give": [9, 10, 23, 85, 87, 143, 145, 151, 198], "given": [2, 8, 11, 22, 23, 30, 32, 33, 34, 35, 51, 59, 75, 76, 83, 94, 101, 102, 112, 115, 118, 122, 123, 124, 125, 126, 127, 131, 133, 140, 143, 148, 153, 155, 161, 174, 176, 177, 178, 181, 182, 191, 192, 195, 199, 201], "glanc": 10, "glineur": [9, 10, 85, 151], "global": [22, 36, 45, 54, 72, 74, 88, 156], "go": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 195, 200], "goal": [9, 195], "good": 9, "gpu": [0, 27, 29, 196, 197], "grab": 22, "gradient": [10, 87], "grai": [31, 130], "gram": 134, "graph": 134, "great": 3, "greater": [33, 131, 134, 150], "greatest": 200, "greatli": 12, "grei": [77, 92], "grid": [12, 33], "ground": [69, 116, 117, 140], "group": 0, "guarante": [51, 143, 152, 200], "guess": 9, "guid": [23, 27], "guidelin": 25, "guo": 201, "gusak": 0, "h": [3, 30, 68, 76, 134], "ha": [0, 2, 4, 8, 9, 10, 11, 22, 34, 35, 53, 64, 65, 85, 86, 87, 110, 113, 133, 152, 153, 154, 155, 166, 167, 168, 198, 200], "hal": [85, 87, 151], "half": 33, "halv": 151, "hand": 197, "handl": [9, 10, 11, 33, 111, 153, 195, 197, 198], "hansen": 70, "hanson": 10, "hard": [8, 75, 83, 148, 172], "hard_spars": [8, 75, 83, 148], "hardwir": 152, "harm": 172, "hashemizadeh": 0, "hasn": [36, 156], "hat": [11, 30, 76], "have": [0, 2, 4, 8, 9, 10, 11, 12, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 54, 59, 71, 72, 74, 75, 76, 83, 88, 101, 111, 113, 115, 124, 133, 143, 146, 148, 152, 153, 154, 155, 164, 185, 186, 187, 195, 197, 198, 200], "haven": 195, "hazan": [52, 84], "header": 24, "heapsort": 152, "height": 152, "help": 23, "helper": 2, "helwig": 131, "here": [2, 3, 8, 9, 10, 11, 12, 13, 23, 24, 28, 30, 33, 76, 114, 128, 130, 146, 148, 195, 198, 200], "hesit": 23, "hi": 30, "hierarch": [9, 10, 85, 151], "hierarchi": 24, "high": [7, 10, 50, 51, 85, 87, 151, 200], "higher": [2, 10, 55, 58, 82, 87, 90, 113, 114, 155, 159, 193], "hist": 8, "histogram": 8, "hiv": 3, "hoi": [55, 58, 82, 90, 193], "hold": [30, 62, 76, 123, 124, 125, 126, 127], "home": [3, 4], "hood": 195, "horizont": 47, "household": 134, "how": [0, 1, 2, 3, 4, 7, 8, 11, 12, 13, 15, 16, 18, 19, 25, 33, 176, 180, 196, 198, 200], "howev": [9, 10, 11, 12, 29, 32, 112, 113, 118, 131, 132, 133, 134, 155, 172, 195, 198, 199], "hq": [128, 130], "hspace": 13, "hsplit": 47, "hstack": 47, "html": [27, 28, 195], "http": [3, 9, 10, 27, 28, 69, 70, 114, 134, 195], "huang": [8, 75, 83, 148], "huge": 9, "humor": [3, 68], "hybrid": 51, "hyperspectr": 69, "i": [0, 2, 3, 8, 9, 10, 11, 13, 16, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 167, 169, 170, 172, 174, 176, 177, 180, 181, 184, 185, 186, 187, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201], "i0": 110, "i1": [110, 200], "i4": [145, 152, 191], "iN": 110, "i_": [60, 163, 184, 199], "i_0": 199, "i_1": [30, 42, 44, 60, 76, 123, 124, 125, 126, 127, 141, 163, 184, 199, 200], "i_2": [42, 44, 199, 200], "i_3": 200, "i_d": 200, "i_k": [60, 161, 162, 163, 184, 199], "i_m": 199, "i_n": [42, 44, 60, 163, 184, 199], "i_p": 141, "ib": 31, "icd": 131, "icml": [52, 84], "id": [32, 200], "idea": [9, 200], "ident": [103, 152], "ie": 65, "ieee": [8, 50, 53, 75, 83, 86, 131, 148, 151, 201], "iga": 3, "igg1": 3, "igg3": 3, "igm": 3, "ignor": [39, 40, 82, 112, 118, 167], "ignore_arg": 23, "ii": [3, 7], "ij": 161, "ijk": [11, 30, 76, 123, 124, 125, 126, 127], "ijr": [11, 30, 76, 123, 124, 125, 126, 127], "il": [1, 5, 15, 67, 194], "il2mut": 2, "il2r\u03b1": 2, "il2r\u03b2": 2, "illustr": 134, "im": 4, "imag": [1, 5, 15, 18, 19, 69, 71, 146, 150, 194, 195, 201], "image_height": [18, 19, 71], "image_width": [18, 19, 71], "imaginari": [48, 152], "immun": [2, 3], "immunolog": 3, "immunostimul": 2, "immunosuppress": 2, "immunotherapi": 2, "implement": [8, 10, 22, 29, 30, 32, 33, 64, 111, 112, 113, 114, 118, 131, 132, 133, 148, 151, 152, 155, 161, 172, 195, 196, 197, 198, 201], "impli": 192, "implic": 3, "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 31, 32, 33, 34, 35, 36, 47, 48, 59, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 128, 130, 133, 134, 143, 145, 146, 147, 152, 153, 154, 155, 156, 167, 172, 174, 176, 189, 190, 191, 192, 195, 197, 198, 199, 200], "importlib": 22, "impos": [8, 30, 75, 76, 83, 85, 87, 148, 151, 201], "improv": [3, 28, 68, 155], "imput": 170, "imshow": [3, 4, 18, 19, 31], "inaccur": 113, "inaccuraci": [30, 76], "inc": 147, "incl": 174, "includ": [0, 2, 3, 8, 10, 13, 23, 24, 29, 32, 33, 38, 41, 67, 113, 133, 155, 197], "inclus": 174, "incorrect": 33, "increas": [2, 8, 56, 93, 180], "ind": [34, 35], "inde": 9, "indent": 24, "independ": [12, 147], "indeterminaci": 170, "index": [25, 34, 35, 38, 40, 43, 79, 94, 97, 103, 107, 111, 143, 151, 154, 161, 162, 164, 185, 186, 187, 199], "index_arrai": [34, 35], "index_upd": [23, 29, 106], "indian": 69, "indian_pines_correct": 69, "indian_pines_gt": 69, "indic": [3, 23, 29, 34, 35, 51, 53, 58, 63, 82, 85, 86, 87, 94, 106, 107, 112, 114, 118, 146, 176, 193], "indices_kr": 94, "indices_list": 94, "indirect": 152, "individu": [155, 170], "induc": 8, "industri": [27, 30, 54, 72, 74, 88], "inf": [3, 11, 12, 153], "infer": [2, 33, 143], "infin": 32, "info": [30, 76], "inform": [11, 12, 29, 33, 50, 104, 132, 134, 197, 200], "inherit": 22, "init": [2, 4, 9, 30, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 148, 149, 150, 193, 195, 198], "initi": [9, 11, 30, 51, 52, 54, 55, 56, 57, 72, 73, 74, 75, 76, 78, 83, 84, 88, 89, 90, 91, 93, 95, 96, 112, 118, 133, 151, 155, 195], "initialis": [11, 12], "initialize_cp": 9, "initialize_factor": [30, 54, 72, 74, 75, 76, 83, 88], "inlin": 24, "inner": [75, 83, 101, 111, 151], "inner_product": 160, "input": [9, 10, 13, 23, 30, 31, 32, 33, 34, 35, 47, 48, 56, 57, 59, 72, 73, 74, 75, 76, 80, 83, 89, 91, 93, 95, 96, 99, 100, 111, 112, 113, 115, 118, 119, 122, 133, 134, 145, 146, 148, 153, 154, 155, 172, 174, 176, 191, 192, 195, 198], "input_tensor": [51, 79, 81, 97, 98], "inria": 0, "insert": [34, 35, 143], "insid": 151, "insight": 2, "inspect": 23, "inspir": 45, "instal": [23, 27, 195], "instanc": [9, 11, 23, 24, 29, 33, 40, 45, 104, 147, 151, 195, 197, 198, 199, 201], "instead": [4, 11, 23, 29, 32, 47, 101, 111, 112, 113, 118, 124, 133, 150, 151, 152, 155, 197, 198, 199], "instruct": [27, 195], "int": [30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 112, 113, 118, 119, 121, 122, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 148, 149, 150, 152, 154, 155, 159, 160, 161, 162, 163, 164, 170, 171, 172, 174, 176, 178, 180, 182, 184, 185, 186, 187, 191, 192, 193], "int32": [22, 33, 155], "int64": 33, "int8": [122, 133, 155, 191], "integ": [9, 10, 30, 33, 76, 85, 87, 113, 133, 143, 151, 152, 155, 174], "integer_lik": 174, "integr": [155, 197], "intellig": [30, 54, 72, 74, 88], "interact": [2, 3, 22], "interchang": 119, "interepret": 2, "interest": 11, "interfac": [25, 134, 195, 198], "intermedi": [113, 198], "intern": [22, 33, 52, 84, 131, 151, 152], "interoper": [33, 103, 122, 192], "interpol": [18, 19], "interpret": [59, 67], "interv": [33, 153], "intput": 107, "introduc": [8, 29, 75, 83, 111], "introduct": 195, "introsort": 152, "intuit": 161, "inv": 134, "invari": [114, 170], "invers": 150, "invert": 176, "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "ir": [11, 30, 76, 123, 124, 125, 126, 127], "irregular": 131, "isfinit": [2, 3], "isn": 118, "isnan": [112, 118], "isol": 195, "isoton": 8, "issu": [23, 27, 33, 113], "item": [112, 118, 152], "iter": [9, 10, 11, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 112, 118, 140, 141, 142, 148, 149, 150, 151, 170, 193], "ith": 10, "its": [2, 8, 13, 23, 29, 31, 32, 48, 51, 100, 101, 111, 114, 143, 146, 153, 176, 178, 179, 180, 182, 183, 197, 199, 200], "itself": [8, 69, 198], "ivan": [51, 81, 98], "j": [11, 12, 18, 19, 30, 48, 60, 76, 81, 87, 98, 101, 110, 114, 146, 151, 153, 161, 163, 174, 184, 199], "j0": 110, "j1": [110, 157, 165], "j_i": [30, 56, 76, 93, 123, 124, 125, 126, 127], "j_k": 162, "jahn": 67, "jak": 2, "jang": 131, "jax": [0, 23, 27, 29, 195, 197], "jean": [0, 27], "jeremi": 0, "jg": 131, "jm": 11, "jmlr": [0, 27], "jn": [110, 157, 165], "johnni": 130, "join": [47, 154], "joint": 151, "jong": 149, "journal": [11, 27, 130, 131, 149, 150], "jt": 110, "julia": 0, "june": 69, "jupyt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19], "just": [2, 11, 12, 27, 128, 130, 134, 164, 195], "k": [8, 11, 12, 30, 31, 48, 51, 59, 60, 65, 70, 76, 79, 81, 97, 98, 100, 101, 103, 110, 111, 123, 124, 125, 126, 127, 134, 146, 147, 151, 153, 161, 162, 163, 174, 177, 184, 192, 199], "k0": 110, "k1": [110, 157, 165], "kang": 131, "keep": [58, 82, 85, 152, 180, 192, 193, 195], "keep_dim": [60, 184], "keepdim": [32, 34, 35, 112, 113, 118, 133, 155], "kei": [8, 22, 152], "kejun": [8, 75, 83, 148], "keyword": [23, 31, 48, 111, 113, 143, 146, 152, 153, 176], "khatri": [29, 61, 64, 65, 66, 94, 161, 172], "khatri_rao": 65, "khatri_rao_product": 161, "khatria": 61, "kier": [11, 30, 76], "killer": 2, "kim": [53, 86], "kind": [47, 101, 104, 143, 152, 154], "kinet": 70, "km": [157, 165], "kn": 110, "know": [23, 131], "known": [29, 81, 98, 177, 198, 200], "kolda": [54, 58, 72, 74, 75, 77, 82, 83, 87, 88, 92, 161, 162, 193, 199, 200], "korner": 151, "kossaifi": [0, 27], "kotsia": 201, "kr": [11, 22, 30, 76, 123, 124, 125, 126, 127], "kr_product": 161, "kron": 22, "kroneck": [29, 110, 149, 161, 187, 197], "kronecker_product": 162, "krusal": 201, "kt": 110, "kth": [51, 79, 81, 97, 98], "kwarg": [31, 48, 111, 140, 141, 142, 146, 153, 170, 173], "l": [30, 50, 69, 76, 121], "l1": [8, 75, 83, 148, 150], "l1_reg": [8, 75, 83, 148], "l2": [8, 61, 75, 83, 141, 148, 151], "l2_reg": [8, 54, 72, 75, 83, 88, 148], "l2_square_reg": [8, 75, 83, 148], "l_1": 8, "l_2": 8, "la": 11, "lab": 27, "label": [2, 3, 7, 11, 18, 19, 140, 141, 142, 201], "laboratori": [30, 54, 72, 74, 88], "lack": 198, "lambda_": 151, "lambda_1": 150, "lambda_2": 150, "lambda_r": 151, "lancelot": 152, "landgreb": 69, "langl": 201, "languag": 28, "lapack": [134, 147], "lapack_lit": 134, "larg": [8, 12, 33, 155, 172, 198], "larger": [33, 151, 172], "largest": 8, "last": [8, 10, 32, 33, 39, 50, 52, 54, 72, 74, 75, 80, 83, 84, 88, 99, 101, 111, 123, 124, 133, 143, 151, 152, 154, 155, 160, 174, 195, 199], "latent": 131, "later": [0, 23], "lawson": 10, "layout": [59, 143, 192], "ldot": 200, "lead": [33, 155], "learn": [0, 18, 19, 27, 45, 52, 84, 140, 141, 142, 150, 195, 197, 201], "learning_r": [56, 93], "least": [9, 10, 29, 30, 51, 54, 70, 72, 74, 76, 85, 87, 88, 112, 114, 118, 134, 140, 147, 148, 149, 151, 195], "leav": [24, 38, 39, 40, 41], "led": 152, "lee": 0, "left": [8, 9, 11, 12, 30, 32, 34, 35, 51, 76, 112, 113, 118, 131, 132, 133, 155, 161, 162, 170, 199], "left_dim_k": 177, "legaci": 28, "legend": [2, 7, 8, 9, 10, 11], "len": [2, 3, 11, 18, 19, 50, 53, 55, 58, 82, 86, 87, 90, 94, 112, 118, 137, 138, 145, 161, 193, 200], "lengh": 185, "lenght": 63, "length": [11, 31, 33, 48, 57, 62, 73, 78, 85, 89, 94, 95, 112, 118, 143, 145, 146, 153, 161, 164, 174, 186, 187], "less": [30, 51, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 131, 133, 155, 193], "let": [9, 23, 27, 134, 143, 148, 195, 197, 199, 200], "letter": 134, "level": [3, 22, 30, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 141, 142, 151, 193], "lexicograph": 152, "lexsort": 152, "li": [30, 76], "liava": [8, 75, 83, 148], "librari": [22, 24, 29, 101, 111, 195], "licens": 27, "lie": 131, "lig_fac": 2, "lig_rects_comp1": 2, "lig_rects_comp2": 2, "lig_rects_comp3": 2, "ligand": [2, 67], "like": [0, 3, 8, 9, 10, 22, 23, 24, 33, 56, 93, 103, 111, 122, 130, 131, 134, 140, 143, 191, 195, 197, 201], "likewis": 11, "limit": [13, 22, 104, 152, 155], "linalg": [3, 11, 101, 111, 134, 147, 198], "linalgerror": [134, 147], "line": [6, 14, 15, 24, 30, 54, 72, 88, 151, 194], "linear": [13, 51, 63, 140, 147, 149, 150, 200], "linear_sum_assign": 11, "linearalgebra": 51, "linearli": 147, "liner": 197, "linesearch": [3, 7, 30, 54, 72, 76, 88], "linewis": 151, "link": [9, 10], "linspac": [31, 33], "linux": 195, "list": [0, 8, 11, 13, 28, 30, 47, 50, 51, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 114, 115, 123, 124, 125, 126, 127, 131, 132, 135, 136, 137, 138, 139, 140, 142, 148, 152, 154, 161, 162, 164, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 193, 198, 200], "listsort": 152, "liter": 30, "live": 8, "ll": 134, "load": [2, 12, 25, 29, 67, 68, 69, 70, 114, 131, 132, 144, 169, 197], "load_covid19_serologi": 3, "load_il2data": 2, "loading_matric": 132, "loc": [8, 9, 10, 11, 18, 19], "local": [8, 11, 12, 22, 75, 83], "local_threadsaf": [36, 144, 156, 169], "locat": [24, 29, 31, 48, 111, 146, 153, 197], "log": 152, "logic": [22, 32], "logical_and": 32, "loglog": 7, "logspac": 7, "long": [3, 12, 174], "longer": [9, 10, 24, 189, 198], "longitudin": 131, "loo": [3, 68], "look": [2, 3, 9, 10, 11, 24, 28], "loop": [51, 75, 83, 151], "loos": 29, "loss": [11, 33, 151], "loss_ax": 11, "loss_fig": 11, "losslessli": 12, "lot": [12, 28, 172], "low": [9, 10, 56, 93, 114, 140, 141, 142, 170, 197], "low_rank_compon": [54, 72, 74, 88], "lower": [9, 10, 100, 103, 114, 155, 170], "lowest": [11, 12], "lowest_error": 12, "lr": 150, "lstsq": [134, 147], "luckili": 12, "m": [3, 30, 67, 68, 69, 70, 76, 87, 94, 101, 103, 111, 113, 134, 147, 148, 149, 150, 151, 161, 162, 199], "ma": 47, "machin": [27, 52, 84, 102, 104, 197], "made": [2, 27, 59, 110, 134, 143, 151], "magnitud": 2, "mai": [2, 8, 10, 11, 22, 29, 30, 32, 33, 47, 51, 76, 113, 131, 133, 134, 154, 155, 198], "main": [12, 22, 51, 100, 103, 195], "maintain": [22, 27, 134, 152], "maja": [0, 27], "major": [0, 103, 122, 131, 191], "make": [0, 2, 9, 11, 23, 27, 28, 29, 51, 152, 170, 195, 198, 200], "manag": [22, 29, 36, 156], "mani": [131, 155, 198], "manipul": [13, 196], "manual": [13, 29], "map": [152, 199], "mappabl": 3, "mardal": 0, "mari": 0, "mark": 2, "mask": [2, 47, 52, 54, 55, 56, 58, 64, 70, 72, 74, 82, 84, 88, 90, 93, 109, 161, 167, 170, 193, 198], "masked_arrai": 47, "maskedarrai": 47, "massiv": 131, "mat": 69, "match": [13, 47, 59, 63, 111, 154, 174, 192], "math": [4, 155], "mathbb": [11, 199], "mathbf": [115, 199], "mathcal": [11, 131], "mathemat": [12, 132, 161, 162, 163, 187], "mathematical_expression_of_loss": 11, "mathscr": 131, "matlab": [112, 118], "matmul": [101, 134], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "matplotlibdeprecationwarn": 3, "matric": [11, 12, 30, 62, 64, 65, 66, 76, 94, 109, 111, 114, 115, 123, 124, 125, 126, 127, 131, 132, 134, 147, 151, 161, 162, 164, 172, 185, 186, 187, 198, 200], "matricis": 94, "matrix": [8, 9, 10, 11, 29, 30, 41, 51, 54, 60, 64, 72, 74, 75, 76, 80, 83, 85, 88, 94, 99, 101, 111, 114, 115, 123, 124, 125, 126, 127, 131, 134, 136, 138, 140, 147, 148, 151, 159, 161, 162, 163, 164, 166, 168, 170, 172, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 196, 197, 199], "matrix1": [115, 197], "matrix2": [115, 197], "matrix_or_vec_list": 164, "matrix_or_vector": [60, 163, 184], "matrix_product_st": 200, "matriz": 199, "matter": 22, "max": [4, 34, 114, 118, 167, 195, 197], "max_rank": 131, "max_scor": 114, "max_stagn": [77, 92], "maxim": [11, 34, 56, 93, 140], "maxima": 112, "maximis": 11, "maximum": [8, 30, 34, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 97, 98, 112, 118, 131, 140, 141, 142, 148, 149, 150, 193], "maxvol": 51, "mb": [5, 14, 20, 21, 194], "mean": [2, 9, 10, 11, 23, 59, 115, 116, 117, 133, 143, 155, 189, 192, 195, 197, 200], "mean_squared_error": 117, "meant": 2, "measur": [2, 3, 195, 197], "mechan": 22, "meet": 27, "mem": [5, 14, 20, 21, 194], "memori": [59, 103, 122, 143, 152, 155, 172, 191, 192, 198], "mention": 197, "meraj": 0, "mergesort": 152, "met": 101, "method": [0, 3, 4, 8, 9, 10, 13, 22, 23, 27, 29, 32, 59, 63, 69, 75, 83, 101, 112, 113, 114, 118, 133, 143, 145, 148, 152, 155, 170, 172, 176, 195, 197, 200, 201], "metric": [9, 10, 196], "meurer": 0, "meyer": [0, 3, 67, 68], "mgrid": 33, "might": [12, 23, 33, 124, 195, 197], "min": [4, 23, 35, 114, 134, 195], "min_": [10, 56, 87, 93, 148, 149, 151], "min_scor": 114, "min_valu": [23, 195], "minifi": 28, "minim": [13, 27, 63, 148, 195], "minima": [11, 12, 118], "minimum": [35, 54, 72, 74, 75, 83, 88, 112, 118], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "minutia": 22, "mirror": 198, "misc": 4, "miss": [2, 54, 55, 56, 58, 70, 72, 74, 88, 90, 93, 167, 170, 193, 196], "mistak": 23, "mit": [9, 10], "mix": 111, "mock": 23, "mod": 24, "mode": [10, 11, 12, 16, 28, 29, 30, 37, 38, 40, 43, 52, 53, 54, 55, 58, 60, 64, 65, 66, 68, 72, 74, 75, 76, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 97, 123, 124, 126, 131, 134, 139, 140, 142, 148, 160, 163, 164, 171, 172, 178, 182, 184, 185, 186, 187, 193, 195, 197, 198, 199, 200], "mode_dot": [60, 164, 184], "model": [3, 9, 11, 12, 23, 30, 54, 70, 72, 74, 76, 88, 131, 132, 136, 140, 141, 142, 201], "modifi": [51, 52, 54, 59, 67, 72, 74, 75, 83, 84, 88], "modul": [4, 22, 25, 29, 47, 195, 197, 201], "modular": [133, 155], "module_nam": 22, "moduletyp": 22, "modulo": 33, "moe": 0, "molecul": 2, "molecular": [3, 68], "momemt": 159, "moment": 159, "monkeypatch": 23, "mono": 67, "monoton": [8, 12, 75, 83, 148], "monoval": 2, "more": [2, 3, 12, 23, 30, 32, 33, 47, 76, 100, 112, 113, 118, 132, 134, 146, 154, 155, 161, 162, 174, 195, 197, 198, 199, 200], "moreov": [131, 151], "mortal": [3, 68], "most": [3, 8, 9, 10, 23, 111, 114], "move": [4, 119, 176], "moveaxi": 176, "mp": [137, 181], "msb": 3, "mttkrp": 172, "mu": [9, 10, 56, 93], "mu_init": [56, 93], "mu_max": [56, 93], "much": [9, 10, 12, 33, 87, 131, 180, 187, 198], "multi": [27, 29, 30, 54, 70, 72, 74, 88, 122, 191, 195, 199], "multi_dot": 101, "multi_mode_dot": 163, "multidimension": [51, 190], "multilinear": 140, "multipl": [0, 2, 9, 10, 22, 32, 34, 35, 47, 52, 53, 54, 72, 74, 82, 84, 85, 86, 88, 101, 111, 112, 113, 118, 131, 151, 152, 154, 197], "multipli": [8, 12, 60, 75, 83, 101, 111, 131, 132, 133, 134, 148, 163, 184], "multival": [2, 67], "multivari": 131, "multiwai": 140, "murphi": [3, 68], "must": [2, 9, 10, 23, 24, 31, 32, 33, 47, 48, 50, 57, 63, 95, 96, 101, 103, 111, 112, 113, 115, 118, 119, 122, 133, 134, 136, 137, 138, 146, 147, 153, 154, 155, 174, 176, 192], "mutabl": 151, "mutant": [2, 67], "mutat": 2, "mutein": 67, "mx": 134, "my": 24, "myvari": 24, "n": [8, 9, 10, 11, 16, 19, 29, 30, 33, 34, 35, 37, 54, 56, 58, 60, 70, 72, 74, 75, 76, 82, 83, 85, 87, 88, 93, 101, 103, 110, 111, 131, 134, 140, 142, 145, 151, 152, 161, 162, 163, 164, 172, 174, 176, 184, 193, 197, 199, 200, 201], "n1": [56, 93, 140, 142], "n_1": 40, "n_2": 40, "n_channel": 71, "n_column": [18, 19, 161, 162], "n_compon": 140, "n_const": 148, "n_eigenvec": [170, 195], "n_featur": [140, 159], "n_i": [40, 94, 161], "n_init": 12, "n_iter": [50, 57, 73, 78, 89, 91, 95, 96], "n_iter_mask_imput": 170, "n_iter_max": [2, 3, 7, 10, 11, 12, 18, 19, 30, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 140, 141, 142, 148, 149, 150, 151, 193], "n_iter_max_inn": [75, 83], "n_iter_parafac": [30, 76], "n_mode": 160, "n_pad": 180, "n_predict": 140, "n_repeat": [57, 73, 78, 89, 91, 95, 96], "n_row": [18, 19, 161, 162], "n_sampl": [40, 56, 77, 92, 93, 94, 116, 117, 140, 141, 142, 157, 159], "n_target": 140, "name": [2, 22, 24, 36, 105, 115, 144, 152, 156, 158, 169, 197], "namedtupl": 134, "nan": [32, 112, 118, 133, 146, 152, 153, 155], "nan_to_num": [2, 3], "nanj": 152, "nanmax": [112, 118], "nanmean": 113, "nanmin": [112, 118], "nanstd": 113, "nanvar": 113, "nat": 152, "nativ": 198, "natur": 2, "nbyte": 198, "ncol": 11, "ncp": 9, "nd": [30, 54, 72, 74, 76, 88, 135, 137, 138, 139, 154, 159], "ndarrai": [23, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 71, 72, 74, 75, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 162, 163, 164, 166, 167, 168, 174, 176, 177, 181, 184, 190, 191, 192, 193, 195], "ndim": [16, 38, 40, 43, 53, 55, 58, 80, 82, 86, 87, 90, 99, 110, 112, 118, 147, 160, 164, 176, 185, 186, 187, 193], "ndimag": 4, "nearest": [18, 19], "nearli": [152, 198], "necessari": [110, 113, 133, 134, 155, 195, 198], "necessarili": 29, "neco": [9, 10], "need": [9, 10, 12, 22, 23, 28, 29, 51, 85, 151, 152, 190, 195, 197, 198], "neg": [1, 3, 5, 6, 8, 14, 15, 30, 32, 52, 53, 67, 69, 74, 75, 76, 82, 83, 84, 85, 86, 87, 103, 133, 148, 149, 150, 151, 153, 155, 170, 174, 194, 200], "neglig": [12, 195], "neither": [101, 111], "neq": [87, 199], "nest": 154, "network": 151, "neural": [9, 10, 85, 151], "neurip": 0, "neutral": [133, 155], "never": 23, "new": [3, 9, 22, 23, 28, 29, 32, 47, 59, 113, 119, 122, 134, 140, 141, 142, 143, 154, 176, 191, 192, 195, 197, 198], "new_tensor": [23, 195], "newaxi": [11, 31, 176], "newli": 192, "newshap": 143, "next": 12, "nichola": [8, 75, 83, 148], "nikolajsen": 70, "nk": 2, "nmf": 151, "nn_mode": [12, 30, 74, 76, 85], "nn_type": 170, "nndsvd": 170, "nnl": 87, "nntucker": 10, "nnz": 198, "nois": [11, 12], "noise_level": 12, "noise_r": 11, "non": [1, 5, 6, 8, 14, 15, 28, 30, 32, 33, 52, 53, 54, 67, 69, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 112, 113, 118, 133, 148, 149, 150, 151, 152, 153, 155, 170, 174, 194, 198, 200], "non_neg": [8, 9, 75, 82, 83, 139, 148, 150, 170], "non_negative_parafac": [2, 9, 198], "non_negative_parafac_h": 9, "non_negative_tuck": [10, 197, 200], "non_negative_tucker_h": 10, "none": [3, 11, 30, 31, 32, 33, 34, 35, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 64, 71, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 101, 103, 106, 109, 111, 112, 113, 116, 117, 118, 121, 122, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 164, 170, 173, 176, 185, 186, 187, 191, 192, 193], "nonneg": [8, 9, 10, 29, 85, 150, 151], "nonzero": [8, 30, 76, 123, 124, 125, 126, 127, 131, 190], "nonzero_row": 151, "noqa": 12, "norm": [3, 7, 8, 11, 12, 22, 30, 52, 53, 54, 61, 72, 74, 75, 76, 83, 84, 85, 86, 87, 88, 148, 151, 195], "normal": [2, 3, 8, 18, 19, 23, 30, 54, 62, 72, 74, 75, 76, 83, 88, 134, 148, 154, 197], "normalis": [11, 62], "normalisation_weight": 62, "normalise_factor": [135, 136], "normalised_factor": 62, "normalize_factor": [30, 52, 53, 54, 72, 74, 76, 84, 85, 86, 87, 88], "normalized_spars": [8, 75, 83, 148], "note": [9, 13, 22, 23, 24, 29, 30, 31, 32, 34, 35, 36, 45, 47, 48, 51, 54, 55, 56, 58, 59, 61, 64, 65, 72, 74, 76, 80, 87, 88, 90, 93, 99, 110, 111, 112, 113, 118, 131, 133, 134, 143, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 161, 162, 164, 172, 174, 176, 185, 186, 187, 190, 193, 197, 198, 200], "notebook": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19], "noth": [170, 195, 199, 200], "notic": [23, 24, 112, 118], "now": [0, 2, 3, 9, 11, 12, 13, 28, 111, 128, 130, 152, 195, 197, 198, 200], "np": [2, 3, 4, 7, 8, 9, 10, 11, 16, 22, 23, 30, 31, 32, 33, 34, 35, 45, 47, 48, 51, 52, 53, 54, 55, 58, 59, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 88, 90, 92, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 133, 134, 135, 136, 137, 138, 139, 143, 145, 146, 147, 152, 153, 154, 155, 161, 174, 176, 190, 191, 192, 193, 195, 198, 199, 200], "nrank": [18, 19], "num": 31, "number": [3, 10, 11, 12, 13, 27, 30, 31, 32, 33, 38, 39, 40, 41, 48, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 103, 110, 113, 131, 134, 140, 141, 142, 146, 148, 149, 150, 151, 152, 153, 155, 161, 170, 176, 192, 193, 195, 198, 200, 201], "numer": [33, 155, 195, 200], "numpi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 16, 22, 24, 25, 27, 31, 32, 33, 34, 35, 36, 45, 47, 48, 59, 94, 100, 101, 103, 110, 111, 112, 113, 118, 119, 122, 133, 134, 143, 145, 146, 147, 152, 153, 154, 155, 156, 174, 176, 190, 191, 192, 195, 197, 198, 199, 200], "nweight": [18, 19], "o": [32, 51, 152], "o_1": 141, "o_q": 141, "object": [3, 11, 22, 23, 32, 33, 47, 59, 103, 122, 134, 143, 151, 174, 191, 197, 198, 201], "observ": [2, 13, 50, 201], "obtain": [9, 10, 12, 22, 48, 91, 96, 114, 132, 187, 199, 200, 201], "occur": [2, 13, 33, 47, 63, 154, 155], "occurr": [34, 35], "off": 33, "ofrow": 12, "often": [9, 11, 33, 155], "ogrid": [33, 190], "old": [11, 134, 189], "omit": [134, 190], "onc": [12, 22, 27, 195], "one": [2, 3, 11, 13, 23, 24, 29, 30, 32, 34, 35, 41, 47, 50, 57, 60, 73, 76, 78, 85, 89, 94, 95, 103, 112, 113, 115, 118, 133, 144, 146, 151, 154, 155, 161, 163, 164, 167, 169, 174, 184, 191, 195, 197, 198, 199, 200], "ones": [23, 30, 54, 72, 74, 76, 88, 103, 110, 111, 155, 176, 191, 192, 198, 200], "ones_lik": [122, 192], "onli": [0, 2, 8, 9, 10, 11, 12, 13, 22, 23, 24, 28, 29, 31, 33, 34, 35, 36, 48, 50, 51, 54, 56, 58, 72, 74, 82, 88, 93, 94, 103, 111, 112, 118, 122, 134, 143, 146, 147, 153, 155, 156, 161, 180, 190, 192, 193, 195, 197, 198], "onlin": [8, 11], "ons": 197, "onto": 115, "open": [23, 27, 33, 130], "oper": [8, 15, 21, 22, 27, 101, 111, 112, 118, 128, 130, 148, 166, 167, 168, 172, 174, 194, 197], "operand": 111, "opinion": 198, "opt": [128, 130], "opt_einsum": 130, "optim": [8, 11, 27, 29, 50, 75, 83, 101, 111, 115, 128, 130, 148, 195], "optimis": 197, "option": [8, 9, 10, 24, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 97, 98, 99, 100, 101, 103, 111, 112, 113, 114, 118, 122, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 153, 154, 155, 156, 161, 162, 164, 169, 170, 176, 185, 186, 187, 191, 192, 193], "orcutt": 67, "ord": 3, "order": [0, 2, 8, 9, 13, 30, 31, 48, 50, 51, 55, 57, 58, 59, 63, 75, 76, 79, 81, 82, 83, 87, 90, 95, 96, 97, 98, 103, 111, 119, 121, 122, 130, 143, 146, 148, 152, 153, 159, 160, 162, 174, 176, 191, 192, 193, 200], "ordin": 147, "org": [3, 27, 114, 134, 195], "organ": [0, 110, 196], "orient": 23, "origin": [2, 4, 9, 10, 11, 12, 16, 18, 19, 31, 37, 38, 41, 48, 70, 114, 119, 128, 129, 130, 132, 143, 146, 153, 166, 176, 198, 200], "original_shap": 199, "orlando": 147, "orrd": [18, 19], "orthogon": [30, 50, 55, 58, 76, 82, 90, 123, 124, 125, 126, 127, 131, 134, 135, 139, 193], "orthogonalis": [3, 54, 72, 88], "orthonorm": 134, "oseledet": [51, 81, 98], "other": [3, 8, 13, 22, 23, 29, 30, 31, 33, 37, 48, 63, 64, 85, 111, 114, 119, 133, 134, 146, 147, 153, 155, 195, 197, 198, 200], "otherwis": [23, 30, 34, 35, 50, 54, 59, 72, 74, 76, 80, 82, 88, 99, 101, 113, 135, 136, 137, 138, 139, 140, 143, 160, 190, 192], "otim": [162, 174], "our": [2, 9, 10, 23, 29, 131, 195, 197, 198, 200], "out": [22, 23, 31, 32, 33, 34, 35, 47, 48, 100, 101, 110, 111, 112, 113, 118, 122, 133, 134, 146, 153, 154, 155, 190, 191, 192], "outer": [51, 64, 75, 83, 110, 151, 157, 200], "output": [9, 10, 11, 13, 31, 32, 33, 48, 50, 101, 103, 112, 113, 114, 115, 118, 133, 143, 146, 153, 155, 174], "output_tensor": [177, 181], "over": [22, 29, 30, 31, 32, 48, 64, 76, 101, 111, 112, 113, 118, 133, 134, 146, 153, 155, 164, 174, 200], "overal": 9, "overflow": [33, 133, 155], "overhead": 195, "overload": 174, "overrid": 192, "override_module_dispatch": 22, "overrridden": 22, "overview": 197, "overwrit": 22, "own": 29, "p": [8, 67, 70, 75, 83, 123, 124, 134, 148, 176], "p_i": [11, 30, 76, 123, 124, 125, 126, 127, 132], "packag": [22, 28, 130, 198], "pad": [125, 126, 127, 180], "pad_boundari": 180, "padded_factor_list": 180, "paddl": [0, 23, 29, 36, 156, 195, 197], "paddlepaddl": [27, 195], "page": [0, 8, 13, 23, 27], "pain": 28, "pair": [114, 115, 131], "pairwis": 155, "panagaki": [0, 27], "panel": 3, "pantic": [0, 27], "paper": [0, 27], "parafac": [1, 3, 4, 5, 6, 8, 14, 15, 23, 29, 30, 70, 72, 74, 75, 76, 83, 148, 151, 194, 196, 197, 198], "parafac2": [6, 14, 15, 123, 124, 125, 126, 127, 131, 132, 136, 194], "parafac2_tensor": [11, 132, 197], "parafac2_to_slic": 11, "parafac2_to_tensor": [11, 124], "parafac2tensor": [30, 76, 123, 124, 125, 126, 127, 132], "parallel": 22, "paramet": [8, 11, 18, 19, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 197, 198, 201], "parametricpd": 51, "part": [11, 12, 24, 28, 30, 48, 56, 76, 93, 147, 152], "parti": 22, "partial": [38, 39, 40, 41, 51, 55, 70, 90, 140, 152, 155], "partial_tensor_to_vec": [18, 19], "partial_tuck": 198, "particular": [2, 9, 11, 22, 23, 24, 28, 101], "partit": [33, 152], "pass": [11, 22, 23, 24, 32, 33, 36, 54, 59, 88, 103, 111, 112, 113, 118, 122, 133, 134, 155, 156, 170, 191, 192, 198], "path": [29, 128, 130], "pathwai": 2, "patient": 3, "patra": 201, "pattern": [2, 3, 18, 19, 53, 86], "patti": 0, "pca": [56, 93, 131], "penal": [8, 75, 83, 148, 151], "penalti": 151, "pep": [22, 111], "per": [8, 9, 10, 77, 92, 151, 164, 167], "percent": 3, "percentag": [56, 93], "perform": [2, 4, 9, 12, 16, 18, 19, 23, 30, 32, 50, 51, 54, 55, 72, 76, 88, 90, 101, 113, 128, 133, 140, 152, 155, 195, 197, 198, 199, 200, 201], "permut": [6, 11, 14, 15, 63, 114, 115, 119, 176, 194], "permuted_tensor": 63, "pf2": 12, "pf2_compress": 12, "pf2_compressed_lossi": 12, "pf2_decompress": 12, "pf2_decompressed_lossi": 12, "pf2_full": 12, "pg": 147, "pharmaceut": 2, "phd": [30, 54, 72, 74, 88], "phosphorly": 2, "phosphoryl": 2, "physic": 200, "pii": 3, "pine": 69, "pip": [23, 195], "pip_en": 195, "piyg": 3, "pl": [70, 140], "place": [32, 33, 47, 103, 112, 113, 118, 122, 133, 143, 152, 154, 155, 192], "placehold": 23, "placement": 152, "plai": 197, "plan": 23, "plane": [31, 153], "platform": [133, 155], "pleas": [23, 27, 47, 70, 112, 118, 172, 201], "plot": [2, 3, 4, 8, 9, 10, 11, 12, 13, 18, 19, 31], "plot_covid": [3, 5, 194], "plot_cp_line_search": [7, 14, 194], "plot_cp_regress": [18, 20, 194], "plot_guide_for_constrained_cp": [8, 14, 194], "plot_il2": [2, 5, 194], "plot_image_compress": [4, 5, 194], "plot_nn_cp_hal": [9, 14, 194], "plot_nn_tuck": [10, 14, 194], "plot_parafac2": [11, 14, 194], "plot_parafac2_compress": [12, 14, 194], "plot_permute_factor": [13, 14, 194], "plot_tensor": [16, 21, 194], "plot_tucker_regress": [19, 20, 194], "plot_xyz": 24, "plstoolbox": 30, "plt": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "plug": 197, "pluge": [128, 130], "plugin": 197, "point": [11, 22, 33, 59, 67, 102, 104, 113, 134, 155, 189], "polyad": 200, "popul": [2, 33], "popular": 29, "posit": [8, 32, 33, 52, 53, 77, 84, 85, 86, 87, 92, 103, 119, 151, 153, 174, 176], "posner": 67, "possibl": [8, 23, 31, 48, 59, 64, 101, 111, 114, 134, 143, 146, 153, 155, 176, 192, 195], "possibli": 24, "post": 195, "posthoc": 195, "potenti": 2, "power": [33, 57, 73, 78, 89, 91, 95, 96, 200], "pp": [52, 53, 54, 58, 72, 74, 75, 82, 83, 84, 86, 87, 88, 131, 161, 162, 193, 199, 200, 201], "practic": [25, 51, 77, 92, 134, 195], "pre": [148, 149, 150, 151], "precis": [8, 33, 85, 87, 113, 114, 133, 151, 155], "precomput": [128, 130], "predefin": 13, "predict": [3, 116, 117, 140, 141, 142, 197, 201], "predictor": 140, "prefer": [8, 33, 59, 101, 190], "prepend": [110, 111], "preprint": [51, 79, 97], "preprocess": [2, 12], "present": [0, 2, 28, 112, 118, 200], "preserv": [32, 47, 134], "press": 147, "prevent": 8, "previou": [23, 54, 72, 74, 75, 83, 85, 88, 134, 152], "previous": [30, 59, 76, 147, 199, 200], "primal": 8, "primarili": 2, "print": [2, 8, 9, 10, 11, 12, 13, 16, 19, 24, 33, 51, 85, 87, 198, 200], "prior": [131, 146], "probabl": 28, "problem": [8, 10, 29, 56, 87, 93, 134, 148, 149, 150, 151, 200], "procedur": 12, "proceed": [52, 84], "process": [8, 9, 10, 12, 75, 83, 148, 201], "procrust": 168, "prod": [161, 162, 198], "prod_": [87, 161, 162, 199], "produc": [9, 33], "product": [29, 30, 60, 64, 65, 66, 76, 94, 101, 110, 111, 115, 123, 124, 125, 126, 127, 133, 148, 149, 150, 151, 157, 160, 161, 162, 163, 164, 165, 172, 174, 181, 184, 196, 197], "product_along_axi": 133, "profil": 3, "progress": 152, "project": [0, 11, 23, 24, 29, 30, 75, 76, 83, 123, 124, 125, 126, 127, 148, 198, 200], "projection_matric": [30, 76, 123, 124, 125, 126, 127], "prolifer": 2, "promot": [8, 111], "prone": 12, "propag": [112, 118], "properli": 198, "properti": [22, 134, 152, 170, 195], "proport": 198, "propos": [8, 10, 30, 54, 72, 88], "protect": 198, "protocol": [33, 103, 122, 191], "provid": [2, 3, 8, 9, 22, 27, 29, 31, 34, 35, 47, 48, 55, 58, 70, 82, 90, 111, 113, 115, 121, 134, 140, 141, 142, 146, 153, 154, 155, 164, 170, 176, 185, 186, 187, 190, 193, 195, 197], "proxim": [8, 29, 148], "pseudo": 51, "pstat5": 2, "publish": 0, "pull": 23, "purdu": 69, "pure": 27, "purpos": [23, 29], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 24, 194], "pydata": [197, 198], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 13, 18, 19, 31], "pytest": [23, 28], "python": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 22, 24, 27, 33, 111, 112, 118, 130, 155, 199], "python2": 28, "python3": 28, "pytorch": [0, 22, 23, 27, 29, 36, 128, 130, 156, 196, 197, 198], "q": 134, "qibin": [79, 97], "qr": 51, "qr_factor": 134, "quadrat": 148, "quantifi": 70, "quantiti": 2, "question": 100, "quick": [9, 10, 195, 196], "quickli": [29, 197], "quicksort": 152, "quit": 9, "quot": 28, "r": [7, 11, 12, 30, 50, 54, 62, 64, 65, 66, 70, 72, 74, 76, 88, 123, 124, 125, 126, 127, 134, 140, 148, 149, 151, 152, 161, 199, 200, 201], "r0": 110, "r1": 110, "r2": 134, "r2x": 3, "r7rx991c": 69, "r_1": 201, "r_n": 201, "radiu": 8, "radix": 152, "rais": [3, 32, 101, 111, 112, 113, 118, 133, 134, 143, 147, 155, 198], "ran": 0, "rand": 8, "randint": 10, "random": [2, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 23, 30, 45, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 131, 134, 152, 154, 193, 195, 196, 198], "random_cp": [7, 13, 197], "random_parafac2": 12, "random_sampl": 94, "random_st": [2, 4, 7, 11, 12, 30, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 135, 136, 137, 138, 139, 140, 141, 142, 193], "random_tensor": [195, 197], "random_tuck": 197, "randomis": [77, 92], "randomized_svd": 30, "randomst": [30, 45, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 88, 90, 92, 94, 135, 136, 137, 138, 139, 140, 141, 142, 193], "rang": [3, 8, 11, 12, 13, 16, 33, 38, 40, 43, 154, 161, 174, 176], "rangl": 201, "rank": [2, 3, 4, 7, 8, 9, 10, 13, 18, 19, 23, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 114, 123, 124, 125, 126, 127, 131, 135, 136, 137, 138, 139, 140, 141, 142, 147, 161, 170, 172, 180, 193, 195, 197, 198, 200, 201], "rank_": 177, "rank_2": [80, 99], "rank_k": 177, "rao": [29, 61, 94, 161, 172], "rasmu": [54, 70, 72, 74, 88, 140], "rate": 150, "rather": [9, 33, 51], "ravel": [66, 143, 161], "ravel_tensor": 40, "raw": 134, "rcssmin": 28, "re": [16, 34, 35, 38, 47, 177, 181], "reach": 9, "read": [143, 199], "readi": [2, 28], "real": [33, 134, 146, 152, 153, 200], "reason": 23, "reassembl": [178, 182], "rec": 195, "rec_error": [54, 56, 72, 74, 75, 83, 85, 88, 93], "recent": 111, "receptor": [2, 3, 67, 68], "recognit": [53, 86], "recommend": [9, 10, 24], "recompos": 198, "reconstruct": [3, 4, 9, 11, 12, 30, 50, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 180, 193, 195, 200], "reconstructed_vari": 3, "reconstruction_error": 11, "recov": [11, 12, 200], "recovery_r": 11, "rectangl": [18, 19, 71], "recurs": [79, 81, 97, 98], "reduc": [2, 12, 32, 34, 35, 112, 113, 118, 133, 134, 152, 155], "reduct": [3, 32, 140], "ref_cp_tensor": 63, "refactor": 23, "refer": [2, 13, 25, 30, 32, 33, 50, 51, 52, 53, 54, 58, 59, 63, 67, 68, 69, 70, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 92, 97, 98, 103, 113, 122, 130, 131, 133, 140, 143, 147, 148, 149, 150, 151, 152, 153, 155, 161, 162, 191, 193, 195, 196, 197], "reflector": 134, "refold": [37, 41, 64, 197], "reformul": [30, 76, 123, 124, 125, 126, 127], "reg": [56, 93], "reg_": [56, 93], "reg_j": [56, 93], "reg_w": [18, 19, 141, 142], "regardless": 197, "regener": 2, "region": [18, 19, 71], "register_backend": 22, "register_backend_method": 172, "regress": [8, 9, 10, 20, 27, 70, 71, 194, 196], "regressor": [18, 19], "regular": [8, 75, 83, 148], "regularis": [56, 93, 117, 141, 142], "regulatori": 2, "rel": [11, 30, 54, 72, 74, 75, 76, 83, 88, 150, 152], "relationship": 2, "releas": 28, "relev": 23, "remain": [31, 48, 119, 143, 146, 153], "remaind": 24, "remov": [4, 12, 34, 35, 54, 72, 74, 88, 111, 133, 155], "render": 24, "reorder": [30, 76, 119], "repet": 151, "repetit": 170, "replac": [23, 70, 143], "report": 23, "repositori": [23, 69], "repres": [2, 3, 10, 22, 136, 177, 180, 181, 195, 198, 200], "represent": [198, 200], "repress": 2, "reproduc": 151, "request": 23, "requir": [8, 9, 22, 23, 143, 150, 151, 153, 172, 195, 198], "research": [3, 27, 69], "reset": [23, 150, 151], "reshap": [9, 11, 16, 34, 35, 51, 80, 99, 100, 101, 110, 111, 112, 118, 174, 192, 195, 198, 199], "reshaped_arrai": 143, "resid": 111, "resolut": 151, "resolv": 170, "resort": [9, 10], "respect": [2, 85, 87, 111, 151, 160, 195], "respond": 2, "respons": [1, 3, 5, 15, 67, 140, 194], "response_data": 2, "response_data_fin": 2, "rest": [11, 190, 195], "restrict": 23, "restructuredtext": 24, "result": [2, 3, 9, 10, 13, 23, 24, 28, 31, 32, 33, 34, 35, 47, 48, 71, 85, 87, 100, 103, 111, 112, 113, 118, 119, 122, 133, 134, 143, 146, 150, 151, 153, 154, 155, 160, 170, 174, 187, 191, 192, 198], "retain": [3, 31, 48, 143, 146, 152, 153], "return": [3, 4, 10, 12, 13, 24, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 200], "return_error": [9, 10, 11, 12, 23, 30, 50, 52, 53, 54, 56, 58, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 92, 93, 193], "return_sampled_row": 94, "returned_sampled_row": 94, "reveal": 3, "revers": [162, 176], "revert": [128, 129, 130], "review": [54, 58, 72, 74, 75, 82, 83, 87, 88, 161, 162, 193, 199, 200], "rewritten": 198, "rho": 148, "ridg": 151, "ridge_coef": 150, "ridge_coeffici": 151, "right": [2, 10, 11, 12, 30, 51, 76, 101, 131, 161, 162, 170, 199], "right_dim_k": 177, "ring": [79, 97, 180], "rj": 152, "rmse": [9, 10], "rn": 110, "rng": [12, 18, 19, 134, 154], "roald": 0, "robert": 51, "robust": [0, 56, 57, 73, 78, 89, 91, 93, 95, 96, 198], "robust_pca": 198, "roll": 11, "root": [9, 10, 117, 153], "rotat": 2, "roughli": 33, "round": [33, 155, 200], "routin": [134, 147], "row": [30, 47, 76, 94, 103, 122, 123, 124, 125, 126, 127, 131, 147, 161, 191], "rq": 134, "rst": 24, "rubric": 24, "rule": [33, 111, 147, 151, 155], "run": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 23, 131, 172, 195, 197], "runner": [3, 4], "runtim": [9, 51, 188], "runtimeerror": 198, "s0": 110, "s0092867420314598": 3, "s1": 110, "s10": 152, "s_i": [62, 64, 66, 131], "s_u_i": 65, "safe": [22, 47, 154, 198], "sai": 143, "said": [24, 199], "same": [8, 9, 10, 11, 30, 32, 34, 35, 47, 48, 51, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 72, 74, 76, 79, 80, 81, 82, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 101, 110, 111, 112, 113, 114, 115, 118, 119, 123, 124, 125, 126, 127, 133, 134, 139, 140, 143, 152, 153, 154, 155, 161, 166, 170, 174, 176, 187, 192, 193, 195, 197, 198, 200], "same_kind": [31, 47, 48, 111, 146, 153, 154], "sampl": [3, 18, 19, 40, 51, 68, 77, 92, 94, 140, 141, 142, 196, 201], "sampled_khatri_rao": 94, "sar": [3, 68], "save": 12, "scalabl": 131, "scalar": [31, 48, 101, 111, 112, 118, 133, 146, 147, 153, 155, 174], "scalarmapp": 3, "scale": [3, 18, 19, 110, 114, 134, 152], "scene": 23, "scheichl": 51, "scheme": 151, "schmidt": 134, "scienc": [3, 150], "sciencedirect": 3, "scientif": [81, 98], "scikit": [45, 197, 198, 201], "scipi": [0, 4, 11, 13, 63, 134, 147, 198], "score": [12, 114, 131, 140], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "search": [6, 12, 14, 15, 30, 54, 72, 88, 194], "searchsort": 152, "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 29, 30, 76, 101, 110, 111, 112, 114, 118, 124, 136, 152, 174, 200], "section": [24, 33], "see": [1, 2, 3, 9, 12, 15, 27, 30, 31, 32, 33, 47, 48, 52, 53, 54, 59, 61, 72, 74, 75, 76, 83, 84, 85, 86, 87, 88, 100, 101, 111, 112, 113, 118, 124, 132, 133, 134, 146, 147, 149, 150, 151, 153, 155, 161, 162, 176, 200], "seed": [11, 45, 94], "seen": [161, 200], "segment": 69, "select": [8, 12, 112, 114, 118, 133, 148, 152, 197, 198], "self": [76, 140, 141, 142], "semant": 111, "send": [23, 195], "separ": [3, 11, 196], "seper": [75, 83, 148], "sequenc": [2, 9, 10, 30, 47, 51, 79, 81, 97, 98, 119, 122, 154, 174, 192], "sergei": 51, "seri": 201, "serologi": [1, 5, 15, 68, 194], "serum": 3, "serv": [63, 131], "session": [36, 156], "set": [2, 9, 11, 12, 22, 31, 32, 34, 35, 36, 40, 48, 59, 69, 85, 87, 94, 112, 113, 118, 122, 131, 133, 140, 141, 142, 144, 146, 149, 151, 153, 155, 156, 169, 191, 192, 195, 196, 197, 198], "set_aspect": 3, "set_axis_off": [4, 18, 19], "set_backend": [22, 29, 36, 128, 130, 156, 195, 197], "set_param": [140, 141, 142], "set_printopt": 8, "set_size_inch": [9, 10, 13], "set_tenalg_backend": 197, "set_titl": [3, 4, 11, 13, 18, 19], "set_xlabel": [7, 11], "set_xlim": [3, 11], "set_xtick": [2, 3, 11], "set_xticklabel": [2, 3], "set_ylabel": [7, 11], "set_ylim": 3, "set_ytick": 3, "set_yticklabel": 3, "seungjin": [53, 86], "sever": [8, 9, 10, 24, 27, 29, 60, 148, 163, 164, 184, 195, 197], "shallow": 59, "shape": [2, 11, 12, 13, 16, 18, 19, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 152, 153, 154, 155, 157, 161, 162, 163, 165, 166, 167, 170, 174, 176, 177, 184, 185, 190, 191, 192, 193, 195, 197, 198, 199, 200], "shashua": [52, 84], "shift": 11, "ship": 28, "short": [24, 28, 195, 197], "shorthand": [31, 111, 190], "should": [8, 10, 12, 13, 22, 23, 24, 29, 33, 34, 35, 53, 54, 55, 56, 58, 64, 72, 74, 80, 82, 85, 86, 87, 88, 90, 93, 99, 103, 107, 119, 131, 134, 143, 148, 164, 170, 174, 180, 185, 186, 187, 190, 193, 195, 197, 198], "show": [2, 4, 7, 8, 9, 11, 13, 18, 19, 23, 27, 31], "shown": [30, 76], "shrinkag": [10, 150, 167], "siam": [54, 58, 72, 74, 75, 81, 82, 83, 87, 88, 98, 150, 161, 162, 193, 199, 200], "sidiropoulo": [8, 75, 83, 148], "sig_tensor_fact": 2, "sigma_i": 11, "sign": [11, 48, 133, 155, 167, 170], "signal": [2, 3, 8, 12, 67, 75, 83, 148], "signatur": [8, 22, 31, 48, 111, 146, 151, 153], "signific": [3, 155], "sigpro": 114, "similar": [9, 10, 11, 30, 59, 114, 115, 134, 147], "similarli": [8, 24, 29, 195], "simpl": [27, 151, 172], "simplex": [8, 75, 83, 148], "simpli": [9, 16, 28, 29, 134, 176, 195, 197], "simplifi": [131, 151], "simul": 12, "simultan": 13, "sinc": [8, 9, 10, 11, 12, 23, 51, 124, 131, 143], "singl": [24, 30, 32, 76, 91, 96, 112, 113, 118, 123, 133, 152, 155, 174], "singular": [12, 131, 147, 168, 170, 198, 200], "site": 69, "size": [10, 11, 12, 18, 19, 32, 33, 34, 35, 47, 53, 55, 57, 58, 73, 78, 80, 82, 86, 87, 89, 90, 95, 96, 99, 101, 111, 112, 113, 115, 118, 124, 133, 134, 152, 154, 155, 159, 161, 162, 174, 193, 197, 199, 200], "skeleton": 51, "skip": [11, 38, 41, 94, 131, 161, 162, 164, 185, 186, 187], "skip_begin": [18, 19, 38, 39, 40, 41], "skip_end": [38, 39, 40, 41], "skip_factor": [185, 186, 187], "skip_matrix": [94, 161, 162], "slein": [3, 68], "slice": [11, 12, 30, 76, 112, 118, 123, 124, 125, 126, 127, 131, 199], "slice_idx": 123, "slight": 12, "slightli": [30, 76], "slimit": 28, "slower": [155, 161, 172, 174, 187, 198], "slowest": 143, "small": [150, 151, 155, 200], "smaller": 200, "smallest": 110, "smith": 130, "smooth": [8, 75, 83, 148, 151], "sn": 110, "snyder": 67, "so": [2, 10, 11, 12, 23, 29, 30, 33, 63, 76, 103, 114, 122, 132, 134, 153, 170, 174, 180, 192, 195, 198, 200], "sobhani": 114, "societi": [11, 149], "soft": [8, 167], "soft_spars": [8, 75, 83, 148], "softwar": 130, "solut": [9, 10, 85, 87, 147, 149, 150, 151], "solv": [8, 10, 56, 75, 83, 87, 93, 131, 134, 148, 149, 150, 151, 198], "solver": [8, 167], "some": [12, 22, 24, 29, 30, 33, 76, 134, 190, 198, 200], "somewhat": 11, "sort": 176, "sorted_arrai": 152, "sourc": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 27, 30, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114, 115, 116, 117, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 148, 149, 150, 151, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193], "space": [3, 24, 33, 131, 152], "span": 131, "sparisti": 151, "spars": [8, 72, 74, 88, 90, 93, 151, 172, 193, 196, 197], "sparse_auto_densifi": 198, "sparse_compon": [54, 72, 74, 88], "sparse_cp": 198, "sparse_parafac": 198, "sparsiti": [8, 54, 72, 74, 85, 87, 88, 151], "sparsity_coef": 150, "sparsity_coeffici": [74, 85, 87, 151], "spawn": 22, "special": 62, "specif": [2, 3, 9, 10, 12, 22, 23, 29, 67, 101, 133], "specifi": [2, 8, 23, 30, 32, 33, 34, 35, 37, 39, 40, 47, 60, 71, 76, 85, 100, 103, 106, 107, 113, 133, 144, 148, 152, 154, 155, 163, 164, 169, 170, 171, 174, 176, 184, 195], "sped": 131, "speed": [6, 9, 10, 14, 15, 131, 152, 155, 194], "speedup": [12, 27], "spell": 134, "sphinx": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 24], "sphinx_gallery_thumbnail_numb": 3, "split": [47, 148, 154, 200], "splitter": 24, "spot": 23, "spsolv": 198, "sqrt": [31, 146], "squar": [3, 8, 9, 10, 29, 30, 51, 54, 70, 72, 74, 75, 76, 83, 85, 87, 88, 116, 117, 134, 140, 147, 148, 149, 151, 153], "squeez": [34, 35], "st": 110, "stabil": [33, 152], "stabl": [33, 152], "stack": [47, 111, 114, 134, 147], "stand": 151, "standard": [2, 146, 176], "standard_norm": [11, 12], "start": [7, 11, 12, 27, 28, 31, 33, 38, 40, 43, 133, 155, 174, 196, 199], "starting_factor": 198, "starting_weight": 198, "stat": 2, "stat5": 2, "state": [29, 131, 181, 196], "statement": 23, "static": [189, 196], "staticmethod": 22, "stationari": 11, "statist": [52, 84], "statu": 3, "std": 113, "steal": 3, "step": [33, 77, 92, 155], "still": [9, 28, 32, 152, 189, 197], "stimul": 2, "stl": 198, "stop": [30, 31, 33, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 149, 150, 151, 193], "storag": [22, 200], "store": [11, 13, 31, 48, 103, 111, 122, 146, 153, 191], "stori": 9, "str": [9, 10, 30, 33, 47, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 103, 105, 114, 122, 131, 144, 152, 154, 158, 169, 170, 192, 193], "strang": 147, "strengh": 29, "strength": 12, "strengthen": 2, "string": 152, "structur": [2, 3, 8, 11, 24, 68, 110, 131, 152, 197, 198], "studi": 196, "style": [24, 25, 103, 122, 191], "sub": [32, 47, 59, 112, 113, 118, 133, 154, 155, 192, 198, 200], "subclass": [22, 134, 190], "subject": [3, 56, 93], "submatrix": 51, "submit": 23, "submodul": 197, "subok": [31, 48, 59, 111, 146, 153, 192], "subplot": [2, 3, 11, 13], "subplots_adjust": 13, "subproblem": 9, "subroutin": [9, 87], "subsampl": 94, "substack": 199, "subtleti": 197, "subunit": 2, "success": [85, 87], "suggest": 9, "suit": 70, "suitabl": 27, "sum": [3, 8, 11, 13, 30, 54, 56, 63, 64, 72, 74, 76, 88, 93, 100, 101, 111, 113, 174, 200], "sum_": [11, 30, 56, 76, 93, 123, 124, 125, 126, 127, 199, 200], "sum_along_axi": 155, "sum_i": 141, "summat": [101, 111, 155], "super": 200, "support": [8, 11, 22, 23, 27, 29, 33, 56, 93, 103, 122, 151, 191, 195, 197, 198], "suptitl": [18, 19], "sure": [11, 23], "svd": [6, 14, 15, 29, 30, 50, 51, 52, 53, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 97, 98, 99, 131, 132, 166, 167, 170, 193, 194, 198, 200], "svd_compress_tensor_slic": [12, 132], "svd_decompress_parafac2_tensor": 12, "svd_fun": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 170, 193], "svd_mask_repeat": [54, 55, 72, 74, 88, 90], "svd_threshold": [166, 167], "swapax": 119, "sweep": 51, "swiss": [18, 19, 71, 200], "switch": [22, 29, 152, 189, 195, 197], "sy": 22, "symbol": 24, "symeig_svd": 30, "symmetr": [57, 62, 78, 95, 96], "symptom": 3, "syntax": 24, "synthet": [18, 19, 29], "system": [0, 2, 3, 8, 23, 25, 27, 30, 54, 68, 72, 74, 75, 83, 88, 128, 130, 147, 148, 149, 150, 196, 197], "systemat": 3, "t": [2, 3, 10, 11, 12, 13, 23, 30, 36, 47, 51, 54, 61, 68, 72, 74, 75, 76, 82, 83, 87, 88, 110, 112, 115, 118, 123, 124, 125, 126, 127, 131, 134, 148, 151, 156, 161, 162, 167, 176, 195, 197, 198, 199, 200], "t1": 12, "t2": 12, "t3": 12, "t_": 10, "tabl": 24, "take": [9, 12, 23, 115, 143, 160, 174, 195, 197, 198, 199, 201], "take_along_axi": [34, 35], "taken": [94, 113], "talk": 23, "tamara": [77, 92], "tamir": [52, 84], "tan": [3, 68], "target": [116, 117, 140], "tau": 134, "taylor": [0, 3, 68], "team": 27, "teboul": 150, "technic": 155, "technologi": 3, "tell": 9, "temporari": 152, "temporarili": 23, "ten": [11, 30, 76], "tenalg": [24, 55, 90, 128, 130, 197], "tensor": [0, 2, 3, 5, 7, 8, 12, 20, 21, 22, 24, 25, 27, 30, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 107, 108, 114, 115, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 148, 151, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 196, 198], "tensor1": [157, 160, 165, 171], "tensor2": [157, 160, 165, 171], "tensor_h": 9, "tensor_hals_a": 10, "tensor_hals_fista": 10, "tensor_i": 87, "tensor_mask": 2, "tensor_mu": [9, 10], "tensor_ord": 51, "tensor_shap": [51, 65], "tensor_slic": [30, 76, 131], "tensor_to_vec": [18, 19, 187], "tensor_train": 200, "tensor_train_cross": 200, "tensorcross": 87, "tensorcross_j": 87, "tensordot": [23, 101, 111], "tensorflow": [0, 22, 23, 27, 29, 36, 156, 195, 197, 198], "tensorhals_exact": 9, "tensorized_shap": [80, 99], "tensorli": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 24, 27, 194, 196, 198, 199, 200, 201], "tensors_to_permut": 63, "tensortoolbox": 51, "term": [3, 8], "termin": [28, 54, 72, 74, 75, 83, 85, 88, 151], "test": [9, 10, 16, 18, 19, 25, 27, 29, 32, 69, 71, 197, 198, 201], "test_cp": 23, "text": [13, 24, 56, 93, 131, 161, 162, 163, 164, 199], "tf": 22, "tfac": 3, "tg": 197, "th": [30, 58, 76, 82, 100, 103, 123, 124, 125, 126, 127, 161, 176, 193], "than": [2, 9, 10, 30, 33, 51, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 112, 118, 131, 133, 134, 146, 150, 151, 154, 155, 170, 172, 174, 193, 198, 199, 200], "thank": 0, "thei": [2, 9, 29, 111, 151, 152, 174, 195, 200], "thelper": 2, "them": [0, 3, 22, 24, 140, 195, 198], "themselv": 22, "theoret": 51, "theori": 50, "therapeut": 2, "therapi": 2, "therefor": [2, 8, 9, 10, 23, 29, 38, 40, 43, 101, 115, 151, 199, 200], "thi": [0, 2, 8, 9, 10, 11, 12, 13, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 47, 48, 51, 54, 55, 59, 61, 64, 69, 70, 72, 74, 75, 76, 79, 81, 83, 87, 88, 90, 97, 98, 100, 101, 103, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 131, 133, 134, 140, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 161, 172, 176, 178, 182, 189, 190, 191, 195, 197, 198, 199, 200, 201], "thin": 29, "thing": 28, "think": [131, 143], "third": [11, 22, 30, 47, 71, 76, 174, 200], "thorough": 27, "those": [0, 2, 189], "thought": 131, "thread": [22, 36, 144, 156, 169], "three": [2, 11, 18, 19, 24, 68, 174, 190], "threshold": [8, 10, 12, 51, 75, 83, 114, 131, 148, 150, 151, 166, 167, 168], "through": [2, 29, 32, 59, 112, 113, 118, 133, 155, 174, 195, 197, 201], "thu": [2, 8, 131, 198], "ti": 152, "tic": [9, 10], "tick": [2, 3], "ticnew": 10, "tight_layout": [2, 4, 11], "tild": [56, 93, 199, 201], "time": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 28, 30, 53, 54, 58, 67, 72, 74, 76, 82, 85, 86, 87, 88, 123, 124, 125, 126, 127, 148, 151, 161, 162, 164, 172, 193, 198, 199, 200], "time_a": 10, "time_exact_h": 9, "time_fista": 10, "time_h": 9, "time_mu": [9, 10], "timepoint": 2, "times_": 163, "times_0": 164, "times_1": 164, "times_n": 164, "timsort": 152, "tin": 3, "titl": [0, 8, 9, 10, 11, 25, 27], "tl": [3, 4, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 36, 50, 51, 57, 58, 60, 61, 73, 78, 80, 89, 91, 95, 96, 99, 121, 128, 130, 132, 156, 167, 171, 172, 184, 185, 186, 187, 193, 195, 197, 199, 200], "tm": 87, "tmask": 3, "to_imag": 4, "to_numpi": [4, 18, 19], "to_tensor": [12, 195], "togeth": [47, 111, 154, 190], "tol": [2, 3, 4, 7, 10, 11, 18, 19, 30, 51, 52, 53, 54, 55, 56, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 114, 140, 141, 142, 148, 149, 150, 151, 193], "tol_inn": [75, 83], "tol_out": [75, 83], "toler": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 193], "toll": 7, "tomasi": [54, 72, 74, 88], "too": [134, 155, 174, 190, 198], "took": 12, "tool": 3, "top": [0, 11], "torch": [23, 27, 197], "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 194], "tr": [79, 97], "trace": 100, "traceback": 111, "track": [3, 68], "tradit": [160, 174], "tradition": [195, 199], "train": [11, 29, 50, 51, 81, 98, 140, 180, 182, 196, 197], "trajectori": 50, "transact": [8, 50, 75, 83, 148, 201], "transform": [9, 140], "transmit": 2, "transpar": [23, 29, 128, 130, 195, 197], "transpos": [22, 119, 134, 148, 149, 150, 151, 163, 164, 185, 186, 187, 197], "transpose_factor": [185, 186, 187], "transposit": 176, "trapezoid": 155, "treat": [111, 147], "treatment": [2, 67], "treg": 2, "trend": [3, 131], "tri": [57, 73, 78, 89, 91, 95, 96], "trial_decomposit": 11, "trial_err": 11, "triangl": 100, "triangular": 134, "tril": 100, "triu": 100, "trivial": 195, "trivial_fun": 195, "true": [3, 7, 8, 9, 10, 11, 12, 13, 30, 31, 32, 34, 35, 36, 40, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 110, 111, 112, 113, 115, 118, 123, 124, 133, 134, 135, 136, 137, 138, 139, 143, 146, 147, 148, 150, 151, 152, 153, 155, 156, 162, 163, 164, 170, 174, 180, 185, 186, 187, 190, 192, 193, 197, 198], "true_rank": 11, "truncat": [12, 131], "truncated_svd": [30, 52, 54, 55, 58, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 97, 98, 99, 131, 170, 193, 195], "truth": [69, 116, 117, 140], "try": [12, 23, 192], "tt": [7, 50, 51, 80, 81, 98, 99, 137, 138, 177, 178, 179, 181, 182, 183, 197, 200], "tt_l": 7, "tt_matrix": [80, 99, 197], "tt_tensor": [137, 138, 197], "tt_to_tensor": 200, "ttcross": 51, "ttoi": 50, "tu": 87, "tucker": [4, 6, 11, 14, 15, 17, 20, 53, 55, 86, 87, 90, 115, 139, 142, 184, 185, 186, 187, 194, 195, 196, 197, 201], "tucker_factor": 4, "tucker_multi_mode_dot": 184, "tucker_rank": 4, "tucker_reconstruct": 4, "tucker_reconstruction_a": 10, "tucker_reconstruction_fista": 10, "tucker_reconstruction_mu": 10, "tucker_regress": 19, "tucker_tensor": [139, 197], "tucker_to_tensor": [4, 10, 200], "tucker_to_vec": 197, "tuckerregressor": 19, "tuckertensor": [55, 90, 184, 185, 186, 187], "tuna": 0, "tupl": [11, 31, 32, 34, 35, 37, 38, 41, 44, 48, 50, 80, 94, 99, 110, 112, 113, 118, 121, 133, 135, 136, 137, 138, 139, 140, 143, 145, 146, 153, 154, 155, 171, 176, 191], "turn": [62, 64, 65, 66], "tutori": 200, "two": [2, 3, 10, 11, 13, 22, 33, 87, 101, 110, 111, 112, 114, 115, 116, 117, 118, 119, 133, 157, 165, 171, 174, 198, 200], "txt": 152, "type": [2, 3, 22, 24, 30, 32, 33, 54, 67, 72, 74, 75, 76, 83, 88, 101, 103, 104, 112, 113, 118, 122, 133, 134, 152, 155, 191, 192, 197, 201], "typic": [12, 22, 24], "typo": 23, "tyrtyshnikov": 51, "u": [3, 9, 23, 27, 28, 62, 64, 65, 66, 85, 87, 131, 148, 149, 150, 151, 170, 195], "u_1": [62, 64, 65, 66, 161, 162], "u_based_flip_sign": 170, "u_i": 131, "u_k": [62, 65, 161, 162], "u_n": [62, 64, 65, 66, 161, 162], "ubiquit": 195, "ucphchemometr": 70, "ufunc": [31, 32, 48, 111, 112, 113, 118, 133, 146, 153, 155], "uint": 133, "uint8": [4, 133], "umfpack": 198, "unabl": 3, "unchang": [176, 192], "uncompress": [12, 131, 132], "uncompressed_data": 12, "unconstrain": [10, 151], "undefin": 152, "under": [148, 152, 195], "underestim": 51, "underli": [2, 3, 24, 143, 180], "underlin": 24, "understand": 2, "uneven": [11, 125, 126, 127], "unexpect": 33, "unfold": [10, 16, 24, 37, 38, 40, 64, 65, 66, 126, 172, 178, 182, 186, 195, 196, 197, 198], "unfolded_tensor": [37, 43], "unfolding_dot_khatri_rao_memori": 172, "unfortun": 23, "uni": 28, "uniform": [11, 29, 195], "unimod": [8, 75, 83, 148], "uniniti": [31, 48, 122, 146, 153, 191], "union": [79, 97], "uniqu": 119, "unit": [23, 62], "unitari": 134, "univers": [0, 27, 30, 54, 69, 72, 74, 88], "unless": [9, 32, 133, 155], "unlik": [30, 112, 118], "unravel_index": [34, 35], "unsaf": [47, 154], "unseen": 197, "unsign": [133, 155], "unspecifi": [143, 152], "unstack": 154, "unsur": 23, "untouch": [38, 39, 40, 41], "up": [6, 14, 15, 131, 152, 194, 198], "updat": [9, 10, 23, 28, 51, 52, 53, 64, 75, 82, 83, 84, 85, 86, 87, 106, 107, 148, 151], "upgrad": 28, "upload": 69, "upper": [8, 9, 10, 11, 100, 103, 134, 151], "us": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 33, 36, 45, 47, 52, 53, 54, 55, 58, 61, 67, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 97, 98, 99, 100, 101, 105, 106, 107, 111, 112, 113, 118, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 139, 143, 146, 147, 148, 151, 152, 155, 156, 158, 163, 164, 170, 172, 174, 176, 180, 187, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201], "usag": [15, 22, 27, 106, 196], "use_default_einsum": [128, 130], "use_dynamic_dispatch": [172, 195], "use_static_dispatch": 195, "user": [8, 9, 10, 23, 27, 29, 75, 83, 103, 148, 152, 195], "usual": [111, 198], "util": [23, 27, 29, 197], "utm": [87, 148, 149, 150, 151], "utu": [87, 148, 149, 150, 151], "uv": 151, "ux": [148, 149, 150], "v": [81, 85, 87, 98, 100, 115, 131, 151, 170, 195, 198], "v1": [4, 11], "v20": 27, "v_": 151, "v_1": 62, "v_i": 131, "v_k": 62, "v_n": 62, "valenc": 2, "valid": [45, 58, 82, 123, 124, 193], "validate_constraint": 8, "valu": [2, 8, 9, 10, 12, 22, 23, 29, 30, 31, 32, 33, 34, 35, 48, 52, 54, 55, 56, 58, 59, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 93, 97, 98, 99, 103, 106, 107, 111, 112, 113, 115, 116, 117, 118, 122, 131, 133, 134, 140, 141, 142, 143, 146, 147, 148, 152, 153, 155, 167, 168, 170, 190, 191, 192, 193, 195, 196, 200], "valueerror": [101, 111, 143], "var": 113, "varaibl": 22, "vari": [32, 33, 62, 64, 66, 113, 124, 133, 152, 155], "variabl": [11, 13, 22, 23, 24, 87, 140, 147, 148, 198], "varianc": 3, "variant": [2, 198], "variat": [52, 55, 58, 77, 82, 84, 85, 87, 90, 92, 193], "variou": [0, 2, 10, 22, 152, 170, 197], "vbottom": 3, "vdot": [101, 111], "ve": 2, "vec": [44, 164], "vector": [10, 11, 12, 60, 64, 66, 101, 111, 115, 127, 131, 140, 147, 149, 163, 164, 170, 176, 179, 183, 184, 185, 186, 187, 197, 198, 200, 201], "vectoris": [39, 41, 42, 44, 66, 187], "verbos": [18, 19, 30, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 140, 141, 142, 193], "veri": [10, 12, 29, 59, 195], "verifi": [50, 137, 138], "version": [8, 9, 10, 11, 28, 30, 32, 33, 34, 35, 47, 59, 64, 76, 100, 103, 111, 112, 113, 118, 119, 122, 131, 133, 134, 143, 146, 147, 151, 152, 153, 154, 155, 172, 191, 192, 197, 198, 200], "vertic": [47, 114], "via": [1, 5, 15, 22, 30, 31, 32, 33, 48, 50, 51, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 88, 89, 90, 92, 93, 95, 97, 98, 103, 122, 131, 134, 146, 153, 191, 193, 194, 198], "view": [100, 119, 143, 176, 199], "viru": 3, "vision": [52, 53, 84, 86], "visual": 110, "vital": 28, "vmax": 3, "vmin": 3, "void": 9, "vol": [54, 58, 72, 74, 75, 82, 83, 87, 88, 151, 161, 162, 193, 199, 200], "volum": [27, 51], "vsplit": 47, "vstack": 47, "vtop": 3, "w": [54, 58, 72, 74, 75, 82, 83, 87, 88, 161, 162, 193, 199, 200, 201], "wa": [0, 28, 30, 76, 101, 131, 134, 143, 147, 152, 153, 177, 181, 198], "wai": [9, 10, 22, 23, 29, 30, 54, 70, 72, 74, 88, 111, 174, 195, 197, 199, 200], "wang": [3, 50, 68], "want": [8, 12, 23, 24, 28, 29, 195, 197, 201], "warn": [30, 33, 76], "watch": 198, "we": [0, 2, 3, 9, 10, 11, 12, 13, 22, 23, 24, 29, 30, 51, 54, 56, 59, 65, 72, 74, 76, 87, 88, 93, 115, 123, 124, 125, 126, 127, 131, 132, 133, 134, 150, 151, 195, 197, 198, 199, 200, 201], "weak": 29, "weight": [2, 3, 4, 9, 11, 13, 18, 19, 30, 52, 54, 57, 62, 64, 65, 66, 72, 73, 74, 75, 76, 78, 83, 84, 85, 88, 89, 95, 109, 113, 123, 124, 125, 126, 127, 140, 141, 142, 161, 201], "weight_img": [18, 19], "weight_rank": [18, 19, 141, 142], "weight_tensor_": [18, 19], "weight_valu": 71, "weights_init": 9, "welcom": 23, "well": [2, 3, 11, 12, 22, 23, 29, 70, 112, 118, 133, 147, 197], "were": [3, 47, 67, 111, 134, 154, 198], "what": [11, 12, 22, 28, 47, 100, 134, 154], "when": [2, 9, 10, 22, 23, 29, 30, 33, 47, 52, 54, 55, 58, 59, 72, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 101, 111, 112, 115, 118, 131, 132, 133, 134, 152, 153, 155, 172, 174, 176, 190, 193, 195, 198], "whenev": [131, 176, 198], "where": [2, 10, 11, 12, 29, 30, 31, 32, 33, 36, 47, 48, 54, 55, 56, 58, 62, 64, 65, 66, 72, 74, 75, 76, 83, 88, 90, 93, 101, 103, 110, 112, 113, 118, 123, 124, 125, 126, 127, 131, 133, 134, 136, 140, 146, 147, 148, 151, 152, 153, 155, 156, 161, 162, 170, 176, 193, 198], "wherea": [30, 76], "wherein": 114, "whether": [2, 27, 30, 32, 53, 54, 58, 72, 82, 85, 86, 87, 88, 100, 103, 115, 122, 134, 140, 152, 170, 191, 193, 195, 197, 198], "which": [2, 8, 9, 11, 12, 13, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 47, 48, 51, 52, 54, 55, 58, 60, 71, 72, 74, 75, 76, 82, 83, 84, 85, 88, 90, 102, 103, 104, 107, 111, 112, 113, 114, 118, 122, 131, 133, 134, 135, 137, 138, 146, 148, 151, 152, 153, 154, 155, 163, 166, 167, 168, 171, 172, 176, 177, 181, 184, 190, 191, 192, 193, 195, 197, 198, 200], "while": [3, 8, 9, 10, 24, 28, 29, 33, 39, 40, 51, 62, 66, 85, 133, 151, 152, 155, 195, 200], "white": 24, "who": 0, "whole": [12, 51, 167], "whose": [29, 30, 76, 103, 113, 119, 123, 124, 125, 126, 127, 153, 177, 181, 201], "why": [0, 12, 196, 197], "wide": 10, "width": 2, "wiki": [28, 134], "wikipedia": 134, "wise": [31, 47, 48, 85, 112, 114, 118, 146, 153, 161], "wish": [3, 11, 22, 100], "within": [31, 33, 48, 146, 153], "without": [2, 7, 30, 76, 85, 87, 91, 96, 101, 131, 143, 148, 180, 197, 198], "won": 13, "word": [23, 33, 37, 114, 195], "work": [0, 2, 3, 4, 12, 25, 54, 64, 72, 74, 85, 88, 134, 152, 172, 195, 198], "workshop": 0, "world": 27, "worri": 198, "worst": 152, "would": [0, 12, 40, 47, 101, 132, 147, 154, 176, 198], "wrap": [22, 23], "wrapper": [11, 25, 29, 195], "write": [8, 25, 27, 28, 29, 65, 100, 143, 195, 197], "writeabl": 59, "written": [0, 198], "www": [3, 69, 195], "x": [2, 11, 12, 18, 19, 28, 30, 31, 34, 35, 40, 48, 56, 59, 61, 76, 80, 93, 99, 100, 119, 123, 124, 125, 126, 127, 131, 133, 134, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 190, 191, 192, 198, 199, 201], "x0": 147, "x1": [33, 111, 147], "x2": [33, 111], "x60t": 70, "x_": [30, 76, 123, 124, 125, 126, 127, 148, 199], "x_1": 199, "x_2": 199, "x_cell": 2, "x_factor": 140, "x_i": [12, 30, 76, 123, 124, 125, 126, 127, 131, 201], "x_lig": 2, "x_norm": 12, "x_score": 140, "x_split": 148, "xi": 12, "xlabel": [2, 3], "xtick": 11, "xv": 190, "xx": 31, "y": [18, 19, 48, 50, 59, 111, 134, 140, 141, 142, 145, 146, 153, 190, 191, 192, 201], "y0": 134, "y_factor": 140, "y_i": 201, "y_pred": [116, 117], "y_score": 140, "y_true": [116, 117], "yanni": [0, 27], "ye": 152, "year": [27, 28], "yet": 172, "yield": 190, "ylabel": [2, 3], "ylim": 2, "yngve": 0, "yong": [53, 86], "you": [1, 8, 11, 12, 13, 15, 22, 23, 24, 27, 28, 29, 61, 70, 100, 112, 128, 130, 133, 134, 143, 155, 187, 189, 195, 197, 198, 199, 200, 201], "your": [12, 23, 24, 27, 28, 29, 80, 99, 128, 130, 195, 197], "yu": 30, "yv": 190, "z": [3, 32, 59, 68, 148], "zero": [32, 54, 56, 71, 72, 74, 77, 88, 92, 93, 103, 113, 119, 122, 125, 126, 127, 131, 150, 151, 155, 161, 174, 192, 199, 200], "zeros_lik": 191, "zeroth": 197, "zgeqrf": 134, "zhang": 50, "zhao": [79, 97], "zheng": 50, "zhou": 50, "zip": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 190], "zohar": [3, 68], "zoom": 4, "zungqr": 134, "\u00e5": 70}, "titles": ["About us", "Practical applications of tensor methods", "Non-negative PARAFAC Decomposition of IL-2 Response Data", "COVID-19 Serology Dataset Analysis with CP", "Image compression via tensor decomposition", "Computation times", "Tensor decomposition", "Using line search with PARAFAC", "Constrained CP decomposition in Tensorly &gt;=0.7", "Non-negative CP decomposition in Tensorly &gt;=0.6", "Non-negative Tucker decomposition", "Demonstration of PARAFAC2", "Speeding up PARAFAC2 with SVD compression", "Permuting CP factors", "Computation times", "Gallery of examples", "Basic tensor operations", "Tensor regression with tensorly", "CP tensor regression", "Tucker tensor regression", "Computation times", "Computation times", "Backend System", "Contributing", "Writing documentation", "Development guide", "&lt;no title&gt;", "TensorLy: Tensor Learning in Python", "Installing tensorly", "API reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.abs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.all", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.arange", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmax", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_fold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.partial_vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.tensor_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.unfold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.base</span></code>.vec_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.clip", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.concatenate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.conj", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_OI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.contrib.decomposition</span></code>.tensor_train_cross", "tensorly.contrib.sparse.decomposition.non_negative_parafac", "tensorly.contrib.sparse.decomposition.non_negative_tucker", "tensorly.contrib.sparse.decomposition.parafac", "tensorly.contrib.sparse.decomposition.partial_tucker", "tensorly.contrib.sparse.decomposition.robust_pca", "tensorly.contrib.sparse.decomposition.symmetric_parafac_power_iteration", "tensorly.contrib.sparse.decomposition.tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.copy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_permute_factors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.cp_tensor</span></code>.cp_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_IL2data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_covid19_serology", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_indian_pines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets</span></code>.load_kinetic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.datasets.synthetic</span></code>.gen_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CPPower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.CP_NN_HALS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.ConstrainedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.RandomizedCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.SymmetricCP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorRing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.TensorTrainMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.Tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.constrained_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_parafac_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.non_negative_tucker_hals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.partial_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.randomised_parafac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.robust_pca", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.sample_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_parafac_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.symmetric_power_iteration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_ring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tensor_train_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.diag", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eps", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.eye", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.finfo", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.index_update", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.is_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.kron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.matmul", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.max", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics</span></code>.correlation_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.factors</span></code>.congruence_coefficient", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.MSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.metrics.regression</span></code>.RMSE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.moveaxis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ndim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.norm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.ones", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slice", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.parafac2_tensor</span></code>.parafac2_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_cuquantum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_default_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.plugins</span></code>.use_opt_einsum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.preprocessing</span></code>.svd_compress_tensor_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.preprocessing</span></code>.svd_decompress_parafac2_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.prod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.qr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_cp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_parafac2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tt_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.random</span></code>.random_tucker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression</span></code>.CP_PLSR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.cp_regression</span></code>.CPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.regression.tucker_regression</span></code>.TuckerRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.reshape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.shape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sign", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.solve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.solvers.admm</span></code>.admm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.solvers.nnls</span></code>.active_set_nnls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.solvers.nnls</span></code>.fista", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.solvers.nnls</span></code>.hals_nnls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sort", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sqrt", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.stack", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.backend_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.batched_outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.get_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.higher_order_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.inner", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.kronecker", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.multi_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.outer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.procrustes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.soft_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg.proximal</span></code>.svd_thresholding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.set_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.svd_interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tenalg</span></code>.unfolding_dot_khatri_rao", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.tensordot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.to_numpy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.transpose", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_matrix</span></code>.tt_matrix_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.pad_tt_rank", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tt_tensor</span></code>.tt_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_mode_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_tensor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_unfolded", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.tucker_tensor</span></code>.tucker_to_vec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.use_dynamic_dispatch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.use_static_dispatch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.where", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly</span></code>.zeros_like", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tensorly.decomposition</span></code>.tucker", "Computation times", "<span class=\"section-number\">2. </span>TensorLy\u2019s backend system", "User guide", "<span class=\"section-number\">1. </span>Quick-Start", "<span class=\"section-number\">6. </span>Sparse Backend", "<span class=\"section-number\">3. </span>Tensor basics", "<span class=\"section-number\">4. </span>Tensor decomposition", "<span class=\"section-number\">5. </span>Tensor regression"], "titleterms": {"": [22, 195], "0": [8, 9], "19": 3, "2": 2, "3": 28, "6": 9, "7": 8, "In": 23, "On": 195, "The": 22, "ab": 31, "about": 0, "activ": 10, "active_set_nnl": 149, "admm": 148, "algebra": [29, 197], "algorithm": 198, "all": [8, 32], "analysi": 3, "api": 29, "appli": 3, "applic": [1, 15], "approxim": 12, "arang": 33, "argmax": 34, "argmin": 35, "arrai": 29, "assign": [23, 29], "avail": 29, "backend": [22, 23, 29, 195, 197, 198], "backend_context": [36, 156], "base": [29, 37, 38, 39, 40, 41, 42, 43, 44], "basic": [16, 195, 199], "batched_out": 157, "biolog": 3, "candecomp": 200, "case": 195, "chang": 195, "check_random_st": 45, "class": [22, 23, 29], "clip": 46, "clone": 28, "column": 12, "comparison": [9, 10], "compat": 23, "compil": 28, "compon": [3, 11], "compress": [4, 12], "comput": [5, 11, 14, 20, 21, 194], "concaten": 47, "conda": 28, "congruence_coeffici": 115, "conj": 48, "constrain": 8, "constrained_parafac": 83, "constrainedcp": 75, "constraint": 8, "content": 15, "context": [23, 29, 49, 195], "contrib": [29, 50, 51, 52, 53, 54, 55, 56, 57, 58], "contribut": 23, "converg": 11, "copi": 59, "core": [0, 29], "correlation_index": 114, "covid": 3, "cp": [3, 8, 9, 13, 18, 29, 72, 200], "cp_mode_dot": 60, "cp_nn_hal": 74, "cp_norm": 61, "cp_normal": 62, "cp_permute_factor": 63, "cp_plsr": 140, "cp_regress": 141, "cp_tensor": [29, 60, 61, 62, 63, 64, 65, 66], "cp_to_tensor": 64, "cp_to_unfold": 65, "cp_to_vec": 66, "cppower": 73, "cpregressor": 141, "cptensor": 13, "cpu": 195, "creat": [9, 10, 11, 12, 13, 199], "creation": 29, "data": [2, 12], "dataset": [3, 29, 67, 68, 69, 70, 71, 197], "decomposit": [2, 3, 4, 6, 8, 9, 10, 15, 29, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 193, 197, 200], "demonstr": 11, "develop": [0, 25], "diag": 100, "differ": 8, "dispatch": [22, 195], "do": 195, "docstr": 24, "document": [24, 28], "dot": 101, "each": 8, "ep": 102, "exact": 9, "exampl": [15, 24, 198], "experiment": [29, 197], "ey": 103, "factor": [13, 115], "featur": [29, 197], "few": 12, "finfo": 104, "fista": [10, 150], "fit": [11, 12], "fold": [37, 199], "form": [29, 200], "from": 3, "function": [12, 22, 24, 29, 195], "galleri": 15, "gen_imag": 71, "gener": 15, "get_backend": [105, 158], "github": 28, "gpu": 195, "guid": [25, 196], "guidelin": 23, "hal": [9, 10], "hals_nnl": 151, "higher_order_mo": 159, "how": [22, 23, 195], "i": [12, 195], "il": 2, "imag": 4, "implement": 200, "index": [23, 29, 106], "index_upd": 107, "inner": 160, "input": 8, "insight": 3, "inspect": [3, 11], "instal": 28, "interfac": [23, 29], "introduct": [3, 8, 9, 10, 13], "is_tensor": 108, "khatri_rao": 161, "kr": 109, "kron": 110, "kroneck": 162, "line": 7, "load": 22, "load_covid19_serologi": 68, "load_il2data": 67, "load_indian_pin": 69, "load_kinet": 70, "lossi": 12, "lossless": 12, "low": 12, "mani": 12, "manipul": [29, 197], "matmul": 111, "matric": 29, "matrix": 200, "max": 112, "mean": 113, "measur": 29, "method": [1, 15], "metric": [11, 29, 114, 115, 116, 117, 197], "min": 118, "miss": 198, "mode": 8, "mode_dot": 163, "modul": 24, "moveaxi": 119, "mp": 29, "mse": 116, "multi_mode_dot": 164, "ndim": 120, "neg": [2, 9, 10], "nnl": [149, 150, 151], "non": [2, 9, 10], "non_negative_parafac": [52, 84], "non_negative_parafac_h": 85, "non_negative_tuck": [53, 86], "non_negative_tucker_h": 87, "norm": 121, "numpi": [23, 29], "one": 8, "ones": 122, "oper": [16, 29], "organ": 197, "origin": 0, "outer": 165, "pad_tt_rank": 180, "parafac": [2, 7, 9, 54, 88, 200], "parafac2": [11, 12, 29, 30, 76], "parafac2_tensor": [29, 123, 124, 125, 126, 127], "parafac2_to_slic": [123, 124], "parafac2_to_tensor": 125, "parafac2_to_unfold": 126, "parafac2_to_vec": 127, "parafac_power_iter": 89, "partial_fold": 38, "partial_tensor_to_vec": 39, "partial_tuck": [55, 90], "partial_unfold": 40, "partial_vec_to_tensor": 41, "perform": [11, 29], "permut": 13, "pip": 28, "plugin": [29, 128, 129, 130], "power_iter": 91, "practic": [1, 15, 23], "pre": 28, "preprocess": [29, 131, 132], "procrust": 166, "prod": 133, "product": 200, "proxim": [166, 167, 168], "python": 28, "pytorch": 195, "qr": 134, "quick": 197, "random": [29, 135, 136, 137, 138, 139, 197], "random_cp": 135, "random_parafac2": 136, "random_tt": 137, "random_tt_matrix": 138, "random_tuck": 139, "randomised_parafac": 92, "randomizedcp": 77, "rank": 12, "rate": 11, "recommend": 28, "refer": [3, 8, 9, 10, 11, 24, 29, 199, 200, 201], "regress": [15, 17, 18, 19, 29, 116, 117, 140, 141, 142, 197, 201], "repositori": 28, "requisit": 28, "reshap": 143, "respons": 2, "rmse": 117, "robust_pca": [56, 93], "row": 12, "run": 28, "sampl": [29, 197], "sample_khatri_rao": 94, "scalar": 8, "search": 7, "separ": 198, "serologi": 3, "set": [10, 29, 201], "set_backend": [144, 169], "shape": 145, "sign": 146, "soft_threshold": 167, "solv": 147, "solver": [29, 148, 149, 150, 151], "some": 8, "sort": 152, "spars": [29, 52, 53, 54, 55, 56, 57, 58, 198], "speed": 12, "sqrt": 153, "stack": 154, "start": 197, "state": 200, "static": 195, "studi": 195, "style": [23, 29], "sum": 155, "support": 0, "svd": 12, "svd_compress_tensor_slic": 131, "svd_decompress_parafac2_tensor": 132, "svd_interfac": 170, "svd_threshold": 168, "symmetric_parafac_power_iter": [57, 95], "symmetric_power_iter": 96, "symmetriccp": 78, "synthet": [9, 10, 11, 12, 13, 71], "system": [22, 195], "target": 13, "tenalg": [29, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172], "tensor": [1, 4, 6, 9, 10, 11, 13, 15, 16, 17, 18, 19, 23, 29, 79, 173, 195, 197, 199, 200, 201], "tensor_r": 97, "tensor_to_vec": 42, "tensor_train": 98, "tensor_train_cross": 51, "tensor_train_matrix": 99, "tensor_train_oi": 50, "tensordot": [171, 174], "tensorli": [3, 8, 9, 15, 17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197], "tensortrain": 80, "tensortrainmatrix": 81, "test": [23, 28], "thi": 3, "time": [5, 14, 20, 21, 194], "titl": 24, "to_numpi": 175, "train": 200, "transpos": 176, "tt": 29, "tt_matrix": [29, 177, 178, 179], "tt_matrix_to_tensor": 177, "tt_matrix_to_unfold": 178, "tt_matrix_to_vec": 179, "tt_tensor": [29, 180, 181, 182, 183], "tt_to_tensor": 181, "tt_to_unfold": 182, "tt_to_vec": 183, "tucker": [10, 19, 29, 58, 82, 193, 200], "tucker_mode_dot": 184, "tucker_regress": 142, "tucker_tensor": [29, 184, 185, 186, 187], "tucker_to_tensor": 185, "tucker_to_unfold": 186, "tucker_to_vec": 187, "tuckerregressor": 142, "u": 0, "unfold": [43, 199], "unfolding_dot_khatri_rao": 172, "unifi": 29, "up": 12, "us": [7, 8, 195], "usag": 198, "use_cuquantum": 128, "use_default_einsum": 129, "use_dynamic_dispatch": 188, "use_opt_einsum": 130, "use_static_dispatch": 189, "user": 196, "valu": 198, "vec_to_tensor": 44, "via": 4, "visual": 11, "where": 190, "why": [28, 195, 198], "without": 12, "work": [22, 23], "wrapper": 23, "write": 24, "zero": 191, "zeros_lik": 192}})