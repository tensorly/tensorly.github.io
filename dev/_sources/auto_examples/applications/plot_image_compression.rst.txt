
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/applications/plot_image_compression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_applications_plot_image_compression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_applications_plot_image_compression.py:


Image compression via tensor decomposition
==========================================

Example on how to use :func:`tensorly.decomposition.parafac` and :func:`tensorly.decomposition.tucker` on images.

.. GENERATED FROM PYTHON SOURCE LINES 8-65



.. image-sg:: /auto_examples/applications/images/sphx_glr_plot_image_compression_001.png
   :alt: original, CP, Tucker
   :srcset: /auto_examples/applications/images/sphx_glr_plot_image_compression_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    import matplotlib.pyplot as plt
    import tensorly as tl
    import numpy as np
    from scipy.misc import face
    from scipy.ndimage import zoom
    from tensorly.decomposition import parafac
    from tensorly.decomposition import tucker
    from math import ceil


    random_state = 12345

    image = face()
    image = tl.tensor(zoom(face(), (0.3, 0.3, 1)), dtype='float64')

    def to_image(tensor):
        """A convenience function to convert from a float dtype back to uint8"""
        im = tl.to_numpy(tensor)
        im -= im.min()
        im /= im.max()
        im *= 255
        return im.astype(np.uint8)

    # Rank of the CP decomposition
    cp_rank = 25
    # Rank of the Tucker decomposition
    tucker_rank = [100, 100, 2]

    # Perform the CP decomposition
    weights, factors = parafac(image, rank=cp_rank, init='random', tol=10e-6)
    # Reconstruct the image from the factors
    cp_reconstruction = tl.cp_to_tensor((weights, factors))

    # Tucker decomposition
    core, tucker_factors = tucker(image, rank=tucker_rank, init='random', tol=10e-5, random_state=random_state)
    tucker_reconstruction = tl.tucker_to_tensor((core, tucker_factors))

    # Plotting the original and reconstruction from the decompositions
    fig = plt.figure()
    ax = fig.add_subplot(1, 3, 1)
    ax.set_axis_off()
    ax.imshow(to_image(image))
    ax.set_title('original')

    ax = fig.add_subplot(1, 3, 2)
    ax.set_axis_off()
    ax.imshow(to_image(cp_reconstruction))
    ax.set_title('CP')

    ax = fig.add_subplot(1, 3, 3)
    ax.set_axis_off()
    ax.imshow(to_image(tucker_reconstruction))
    ax.set_title('Tucker')

    plt.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.364 seconds)


.. _sphx_glr_download_auto_examples_applications_plot_image_compression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_image_compression.py <plot_image_compression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_image_compression.ipynb <plot_image_compression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
