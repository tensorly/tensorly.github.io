
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/decomposition/plot_cp_line_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_decomposition_plot_cp_line_search.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_decomposition_plot_cp_line_search.py:


Using line search with PARAFAC
==============================

Example on how to use :func:`tensorly.decomposition.parafac` with line search to accelerate convergence.

.. GENERATED FROM PYTHON SOURCE LINES 7-53



.. image:: /auto_examples/decomposition/images/sphx_glr_plot_cp_line_search_001.png
    :alt: plot cp line search
    :class: sphx-glr-single-img





.. code-block:: default

    import matplotlib.pyplot as plt

    from time import time
    import numpy as np
    import tensorly as tl
    from tensorly.random import random_cp
    from tensorly.decomposition import CP, parafac

    tol = np.logspace(-1, -9)
    err = np.empty_like(tol)
    err_ls = np.empty_like(tol)
    tt = np.empty_like(tol)
    tt_ls = np.empty_like(tol)
    tensor = random_cp((10, 10, 10), 3, random_state=1234, full=True)

    # Get a high-accuracy decomposition for comparison
    fac = parafac(tensor, rank=3, n_iter_max=2000000, tol=1.0e-15, linesearch=True)
    err_min = tl.norm(tl.cp_to_tensor(fac) - tensor)

    for ii, toll in enumerate(tol):
    	# Run PARAFAC decomposition without line search and time
        start = time()
        cp = CP(rank=3, n_iter_max=2000000, tol=toll, linesearch=False)
        fac = cp.fit_transform(tensor)
        tt[ii] = time() - start
        err[ii] = tl.norm(tl.cp_to_tensor(fac) - tensor)

    # Run PARAFAC decomposition with line search and time
    for ii, toll in enumerate(tol):
        start = time()
        cp = CP(rank=3, n_iter_max=2000000, tol=toll, linesearch=True)
        fac_ls = cp.fit_transform(tensor)
        tt_ls[ii] = time() - start

        # Calculate the error of both decompositions
        err_ls[ii] = tl.norm(tl.cp_to_tensor(fac_ls) - tensor)


    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.loglog(tt, err - err_min, '.', label="No line search")
    ax.loglog(tt_ls, err_ls - err_min, '.r', label="Line search")
    ax.legend()
    ax.set_ylabel("Time")
    ax.set_xlabel("Error")

    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.868 seconds)


.. _sphx_glr_download_auto_examples_decomposition_plot_cp_line_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cp_line_search.py <plot_cp_line_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cp_line_search.ipynb <plot_cp_line_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
